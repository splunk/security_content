# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
#############
# Automatically generated by ci-generator.py in splunk/security-content
# On Date: 2020-07-30T03:07:52 UTC
# Author: Splunk Security Research
# Contact: research@splunk.com
#############

version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.19

dependencies:
  cache_directories:
    - "~/.apt-cache"
  pre:
    - sudo rm -rf /var/cache/apt/archives && sudo ln -s ~/.apt-cache /var/cache/apt/archives && mkdir -p ~/.apt-cache/partial

apt-run: &apt-install
  name: install system packages
  command: |
    sudo apt update -qq
    sudo apt install -y python-dev python3-dev jq -qq

executors:
  content-executor:
    docker:
      - image: cimg/python:3.9.5-browsers
    working_directory: ~/repo

jobs:
  validate-content:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [[ ! -z "${CIRCLE_PULL_REQUEST}" &&  ! -z "${CIRCLE_PR_NUMBER}" ]]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
                cd security-content
                git fetch origin pull/${CIRCLE_PR_NUMBER}/head:${CIRCLE_BRANCH}
                git checkout ${CIRCLE_BRANCH}
            elif [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - restore_cache:
          key: virtualenv
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - save_cache:
          key: virtualenv
          paths:
            - "/security-content/venv"
      - run:
          name: run validate
          command: |
            cd security-content
            source venv/bin/activate
            python contentctl.py --path . --verbose  validate
      - run:
          name: get cti repo for mitre context
          command: |
            cd security-content
            git clone https://github.com/mitre/cti.git
      - run:
          name: generate documentation
          command: |
            cd security-content
            source venv/bin/activate
            python bin/doc_gen.py --path . --output docs -v
            # now generate spec docs
            sudo apt-get install -y npm -qq
            sudo npm install -g @adobe/jsonschema2md
            jsonschema2md -d spec -o docs/spec -f yaml -e spec.json -x -
            # clean up extra properties on docs
            rm -rf docs/spec/*-*.md

  build-sources:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [[ ! -z "${CIRCLE_PULL_REQUEST}" &&  ! -z "${CIRCLE_PR_NUMBER}" ]]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
                cd security-content
                git fetch origin pull/${CIRCLE_PR_NUMBER}/head:${CIRCLE_BRANCH}
                git checkout ${CIRCLE_BRANCH}
            elif [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: run generate
          command: |
            cd security-content
            source venv/bin/activate
            python contentctl.py --path . --verbose generate --product ESCU --output dist/escu
            python contentctl.py --path . --verbose generate --product SAAWS --output dist/saaws
            # make a copy of use_case_lib in order to have ES work :-(
            cp dist/escu/default/use_case_library.conf dist/escu/default/analyticstories.conf
            cp dist/saaws/default/use_case_library.conf dist/saaws/default/analyticstories.conf
      - run:
          name: copy lookups .csv files
          command: |
            cd security-content
            # clean up current lookups
            rm -rf dist/escu/lookups
            rm -rf dist/saaws/lookups
            mkdir dist/escu/lookups
            mkdir dist/saaws/lookups
            # copy over lookups
            cd lookups
            cp -rv *.csv ../dist/escu/lookups
            cp -rv *.csv ../dist/saaws/lookups
      - run:
          name: update version and build number
          command: |
            cd security-content
            # check if tag is set, get build number from the tag if set
            if [ -z "${CIRCLE_TAG}" ]; then
                CONTENT_VERSION=$(grep -oP "(\d+.\d+.\d+$)" dist/escu/default/content-version.conf)
                echo "detected content version: $CONTENT_VERSION"
            else
                CONTENT_VERSION=$(echo $CIRCLE_TAG | grep -oP "\d+.\d+.\d+")
                echo "content version: $CONTENT_VERSION, set by tag: $CIRCLE_TAG"
            fi
            # update build number and version for ESCU
            sed -i "s/build = .*$/build = $CIRCLE_BUILD_NUM/g" dist/escu/default/app.conf
            sed -i "s/^version = .*$/version = $CONTENT_VERSION/g" dist/escu/default/app.conf
            sed -i "s/\"version\": .*$/\"version\": \"$CONTENT_VERSION\"/g" dist/escu/app.manifest
            sed -i "s/version = .*$/version = $CONTENT_VERSION/g" dist/escu/default/content-version.conf
            tar -czf content-pack-build-escu.tar.gz dist/escu/*
            # update build number and version for saaws
            sed -i "s/build = .*$/build = $CIRCLE_BUILD_NUM/g" dist/saaws/default/app.conf
            sed -i "s/^version = .*$/version = $CONTENT_VERSION/g" dist/saaws/default/app.conf
            sed -i "s/\"version\": .*$/\"version\": \"$CONTENT_VERSION\"/g" dist/saaws/app.manifest
            sed -i "s/version = .*$/version = $CONTENT_VERSION/g" dist/saaws/default/content-version.conf
            tar -czf content-pack-build-saaws.tar.gz dist/saaws/*

      - persist_to_workspace:
          root: security-content/
          paths:
              - content-pack-build-escu.tar.gz
              - content-pack-build-saaws.tar.gz

  build-package:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/build
      - run:
          name: grab splunk packaging toolkit
          command: |
            curl -Ls https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-0.9.0.tar.gz -o ~/splunk-packaging-toolkit-latest.tar.gz
            mkdir ~/slim-latest
            tar -zxf ~/splunk-packaging-toolkit-latest.tar.gz -C ~/slim-latest --strip-components=1
      - run:
          name: install splunk packaging toolkit (slim)
          command: |
              cd ~/slim-latest
              virtualenv --python=/usr/bin/python2.7 --clear venv
              source venv/bin/activate
              pip install semantic_version
              pip install .
      - run:
          name: create a .spl for this build using slim
          command: |
              source ~/slim-latest/venv/bin/activate
              cd ~/build
              tar -zxf content-pack-build-escu.tar.gz
              tar -zxf content-pack-build-saaws.tar.gz
              mv dist/escu DA-ESS-ContentUpdate
              mv dist/saaws DA-ESS_AmazonWebServices_Content
              slim package -o upload DA-ESS-ContentUpdate
              slim package -o upload DA-ESS_AmazonWebServices_Content
              cp upload/DA-ESS-ContentUpdate-*.tar.gz DA-ESS-ContentUpdate-latest.tar.gz
              cp upload/DA-ESS_AmazonWebServices_Content-*tar.gz DA-ESS_AmazonWebServices_Content-latest.tar.gz
      - store_artifacts:
          path: ~/build/upload
          destination: package/
      - persist_to_workspace:
          root: ~/build
          paths:
             - DA-ESS-ContentUpdate-latest.tar.gz
             - DA-ESS_AmazonWebServices_Content-latest.tar.gz

  run-appinspect:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/
      - run: *apt-install
      - run:
          name: checkout repo
          command: |
            if [[ ! -z "${CIRCLE_PULL_REQUEST}" &&  ! -z "${CIRCLE_PR_NUMBER}" ]]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
                cd security-content
                git fetch origin pull/${CIRCLE_PR_NUMBER}/head:${CIRCLE_BRANCH}
                git checkout ${CIRCLE_BRANCH}
            elif [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run:
          name: submit ESCU package to appinspect API
          command: |
            cd security-content/bin
            ./appinspect.sh ~/ DA-ESS-ContentUpdate-latest.tar.gz $APPINSPECT_USERNAME $APPINSPECT_PASSWORD
      - run:
          name: submit saaws package to appinspect API
          command: |
            cd security-content/bin
            ./appinspect.sh ~/ DA-ESS_AmazonWebServices_Content-latest.tar.gz $APPINSPECT_USERNAME $APPINSPECT_PASSWORD
      - store_artifacts:
          path: ~/report
          destination: report/
      - persist_to_workspace:
          root: ~/
          paths:
             - DA-ESS-ContentUpdate-latest.tar.gz
             - DA-ESS_AmazonWebServices_Content-latest.tar.gz
  update-sources-github:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/
      - run: *apt-install
      - run:
          name: checkout repo
          command: |
            mkdir ~/latest-escu
            tar -zxf ~/DA-ESS-ContentUpdate-latest.tar.gz -C ~/latest-escu --strip-components=1
            mkdir ~/latest-saaws
            tar -zxf ~/DA-ESS_AmazonWebServices_Content-latest.tar.gz -C ~/latest-saaws --strip-components=1
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: get cti repo for mitre context
          command: |
            cd security-content
            git clone https://github.com/mitre/cti.git
      - run:
          name: run doc-gen
          command: |
            cd security-content
            source venv/bin/activate
            python bin/doc_gen.py --path . --output docs -v
      - run:
          name: make yamls pretty
          command: |
            cd security-content
            source venv/bin/activate
            python bin/pretty_yaml.py --path . -v
      - run:
          name: run generate-actors-map
          command: |
            cd security-content
            source venv/bin/activate
            python bin/generate-actors-map.py --projects_path . --output docs/mitre-map/
      - run:
          name: run generate-coverage-map
          command: |
            cd security-content
            source venv/bin/activate
            python bin/generate-coverage-map.py --projects_path . --output docs/mitre-map
      - run:
          name: update github with new docs and package bits
          command: |
            cd security-content
            rm -rf dist
            mkdir dist
            mv ~/latest-escu dist/escu
            mv ~/latest-saaws dist/saaws
            # configure git to prep for commit
            git config credential.helper 'cache --timeout=120'
            git config user.email "research@splunk.com"
            git config user.name "research bot"
            git config --global push.default simple
            git add dist/*
            git add docs/*
            git add detections/*
            git commit --allow-empty -m "updating docs and package bits [ci skip]"
            # Push quietly to prevent showing the token in log
            git push https://${GITHUB_TOKEN}@github.com/splunk/security-content.git ${CIRCLE_BRANCH}
      - persist_to_workspace:
          root: ~/
          paths:
              - DA-ESS-ContentUpdate-latest.tar.gz

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: publish release on github
          command: |
            cp ~/DA-ESS-ContentUpdate-latest.tar.gz ~/DA-ESS-ContentUpdate-${CIRCLE_TAG}.tar.gz
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/DA-ESS-ContentUpdate-${CIRCLE_TAG}.tar.gz
      - persist_to_workspace:
          root: ~/
          paths:
              - DA-ESS-ContentUpdate-latest.tar.gz

  attack-range-update:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/
      - aws-cli/setup:
          profile-name: default
      - run:
          name: sync latest ESCU to the Attack Range S3 bucket for apps
          command: |
            aws s3 cp ~/DA-ESS-ContentUpdate-latest.tar.gz s3://attack-range-appbinaries/
            # make the file public since it is not by default
            aws s3api put-object-acl --bucket attack-range-appbinaries --key DA-ESS-ContentUpdate-latest.tar.gz --acl public-read

  master-api-update:
    executor: aws-cli/default
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - aws-cli/setup:
          profile-name: default
      - run:
          name: update api sources
          command: |
            cd security-content
            aws s3 rm s3://security-content --recursive --exclude "*" --include "*.yml"
            aws s3 cp stories s3://security-content/stories --recursive --exclude "*" --include "*.yml"
            aws s3 cp baselines s3://security-content/baselines --recursive --exclude "*" --include "*.yml"
            aws s3 cp detections s3://security-content/detections --recursive --exclude "*" --include "*.yml"
            aws s3 cp response_tasks s3://security-content/response_tasks --recursive --exclude "*" --include "*.yml"
            aws s3 cp responses s3://security-content/responses --recursive --exclude "*" --include "*.yml"
            aws s3 cp lookups s3://security-content/lookups --recursive --exclude "*" --include "*.yml"
            aws s3 cp lookups s3://security-content/lookups --recursive --exclude "*" --include "*.csv"
            aws s3 cp macros s3://security-content/macros --recursive --exclude "*" --include "*.yml"
            aws s3 cp deployments s3://security-content/deployments --recursive --exclude "*" --include "*.yml"
      - run:
          name: security content api smoke test
          command: |
            API_URL='https://content.splunkresearch.com/detections'
            API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_URL)
            echo "Security Content API Status: $API_STATUS"
            if [ "$API_STATUS" != "200" ]; then
              echo "Error [Security Content API status: $API_STATUS]"
              exit 1
            fi

  create-report:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: run reporting
          command: |
            cd security-content
            source venv/bin/activate
            python bin/reporting.py
      - aws-cli/setup:
          profile-name: default
      - run:
          name: upload reporting
          command: |
            cd security-content
            aws s3 cp bin/reporting s3://security-content/reporting --recursive --exclude "*" --include "*.svg"


workflows:
  version: 2.1
  validate-and-build:
    jobs:
      - validate-content:
        # build always
          filters:
            tags:
              only: /.*/
      - build-sources:
        # build always
          requires:
            - validate-content
          filters:
            tags:
              only: /.*/
      - build-package:
        # build always
          requires:
            - validate-content
            - build-sources
          filters:
            tags:
              only: /.*/
      - run-appinspect:
        # build always
          requires:
            - validate-content
            - build-sources
            - build-package
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - create-report:
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - update-sources-github:
        # update package and docs in github if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - create-report
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-release:
        # publish release in github if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - create-report
            - update-sources-github
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - attack-range-update:
        # update the attack range with the latest build
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - create-report
            - update-sources-github
            - publish-github-release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - master-api-update:
        # update master API from develop if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - create-report
            - update-sources-github
            - publish-github-release
            - attack-range-update
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
