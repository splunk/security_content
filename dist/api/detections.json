{"detections": [{"name": "Office Product Spawning Rundll32 with no DLL", "id": "c661f6be-a38c-11eb-be57-acde48001122", "version": 2, "date": "2021-04-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the latest behavior utilized by IcedID malware family. This detection identifies any Windows Office Product spawning `rundll32.exe` without a `.dll` file extension. In malicious instances, the command-line of `rundll32.exe` will look like `rundll32 ..\\oepddl.igk2,DllRegisterServer`. In addition, Threat Research has released a detection identifying the use of `DllRegisterServer` on the command-line of `rundll32.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze the `DLL` that was dropped to disk. The Office Product will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") `process_rundll32` (Processes.process!=*.dll*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_rundll32_with_no_dll_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, but if any are present, filter as needed.", "references": ["https://www.joesandbox.com/analysis/395471/0/html", "https://app.any.run/tasks/cef4b8ba-023c-4b3b-b2ef-6486a44f6ed9/", "https://any.run/malware-trends/icedid"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_icedid.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "office parent process $parent_process_name$ will execute a suspicious child process $process_name$ with process id $process_id$ and no dll commandline $process$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawning_rundll32_with_no_dll_filter"}]}, {"name": "Office Document Executing Macro Code", "id": "b12c89bc-9d06-11eb-a592-acde48001122", "version": 1, "date": "2021-04-14", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this detection was designed to identifies suspicious office documents that using macro code. Macro code is known to be one of the prevalent weaponization or attack vector of threat actor. This malicious macro code is embed to a office document as an attachment that may execute malicious payload, download malware payload or other malware component. It is really good practice to disable macro by default to avoid automatically execute macro code while opening or closing a office document files.", "search": "`sysmon` EventCode=7 process_name IN (\"WINWORD.EXE\", \"EXCEL.EXE\", \"POWERPNT.EXE\") ImageLoaded IN (\"*\\\\VBE7INTL.DLL\",\"*\\\\VBE7.DLL\", \"*\\\\VBEUI.DLL\") | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) as AllImageLoaded count by Computer EventCode Image process_name ProcessId ProcessGuid | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_executing_macro_code_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and ImageLoaded (Like sysmon EventCode 7) from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Also be sure to include those monitored dll to your own sysmon config.", "known_false_positives": "Normal Office Document macro use for automation", "references": ["https://www.joesandbox.com/analysis/386500/0/html"], "tags": {"analytic_story": ["Spearphishing Attachments", "Trickbot", "IcedID"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/datasets/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Office document executing a macro on $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["ImageLoaded", "AllImageLoaded", "Computer", "EventCode", "Image", "process_name", "ProcessId", "ProcessGuid", "_time"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_document_executing_macro_code_filter"}]}, {"name": "Windows AdFind Exe", "id": "bd3b0187-189b-46c0-be45-f52da2bae67f", "version": 2, "date": "2021-11-03", "author": "Jose Hernandez, Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for the execution of `adfind.exe` with command-line arguments that it uses by default. Specifically the filter or search functions. It also considers the arguments necessary like objectcategory, see readme for more details: https://www.joeware.net/freetools/tools/adfind/usage.htm. This has been seen used before by Wizard Spider, FIN6 and actors whom also launched SUNBURST. AdFind.exe is usually used a recon tool to enumare a domain controller.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=\"* -f *\" OR Processes.process=\"* -b *\") AND (Processes.process=*objectcategory* OR Processes.process=\"* -gcb *\" OR Processes.process=\"* -sc *\") by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_adfind_exe_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "administrators rarely use adfind, usually not used for legitimate reasons", "references": ["https://www.volexity.com/blog/2020/12/14/dark-halo-leverages-solarwinds-compromise-to-breach-organizations/", "https://www.fireeye.com/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html"], "tags": {"analytic_story": ["NOBELIUM Group", "Domain Trust Discovery"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/atomic_red_team/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1018"], "nist": ["PR.PT", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.dest", "Processes.user", "Processes.process_name", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_adfind_exe_filter"}]}, {"name": "Local Account Discovery With Wmic", "id": "4902d7aa-0134-11ec-9d65-acde48001122", "version": 2, "date": "2021-09-16", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for local users. The argument `useraccount` is used to leverage WMI to return a list of all local users. Red Teams and adversaries alike use net.exe to enumerate users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` (Processes.process=*useraccount*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `local_account_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "local_account_discovery_with_wmic_filter"}]}, {"name": "Detect MSHTA Url in Command Line", "id": "9b3af1e6-5b68-11eb-ae93-0242ac130002", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies when Microsoft HTML Application Host (mshta.exe) utility is used to make remote http connections. Adversaries may use mshta.exe to proxy the download and execution of remote .hta files. The analytic identifies command line arguments of http and https being used. This technique is commonly used by malicious software to bypass preventative controls. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process \"rundll32.exe\" and its parent process.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_mshta` (Processes.process=\"*http://*\" OR Processes.process=\"*https://*\") by Processes.user Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mshta_url_in_command_line_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "It is possible legitimate applications may perform this behavior and will need to be filtered.", "references": ["https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/", "https://docs.microsoft.com/en-us/windows/win32/search/-search-3x-wds-extidx-prot-implementing"], "tags": {"analytic_story": ["Suspicious MSHTA Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $est$ by user $user$ attempting to access a remote destination to download an additional payload.", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=mshta.exe OR Processes.original_file_name=MSHTA.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_mshta"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_mshta_url_in_command_line_filter"}]}, {"name": "Detect Renamed RClone", "id": "6dca1124-b3ec-11eb-9328-acde48001122", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": [], "description": "The following analytic identifies the usage of `rclone.exe`, renamed, being used to exfiltrate data to a remote destination. RClone has been used by multiple ransomware groups to exfiltrate data. In many instances, it will be downloaded from the legitimate site and executed accordingly. During triage, isolate the endpoint and begin to review parallel processes for additional behavior. At this stage, the adversary may have staged data to be exfiltrated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.original_file_name=rclone.exe AND Processes.process_name!=rclone.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_rclone_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited as this analytic identifies renamed instances of `rclone.exe`. Filter as needed if there is a legitimate business use case.", "references": ["https://redcanary.com/blog/rclone-mega-extortion/", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html", "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/"], "tags": {"analytic_story": ["DarkSide Ransomware", "Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1020/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exfiltration"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$ on $dest$ by $user$.", "mitre_attack_id": ["T1020"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 27, "security_domain": "endpoint", "mitre_attack_technique": ["Automated Exfiltration"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["Tropic Trooper", "Frankenstein", "Honeybee"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_renamed_rclone_filter"}]}, {"name": "NLTest Domain Trust Discovery", "id": "c3e05466-5f22-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-25", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for the execution of `nltest.exe` with command-line arguments utilized to query for Domain Trust information. Two arguments `/domain trusts`, returns a list of trusted domains, and `/all_trusts`, returns all trusted domains. Red Teams and adversaries alike use NLTest.exe to enumerate the current domain to assist with further understanding where to pivot next.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=nltest.exe OR Processes.process_name!=nltest.exe) (Processes.process=*/domain_trusts* OR Processes.process=*/all_trusts*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `nltest_domain_trust_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators may use nltest for troubleshooting purposes, otherwise, rarely used.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1482/T1482.md", "https://malware.news/t/lets-learn-trickbot-implements-network-collector-module-leveraging-cmd-wmi-ldap/19104", "https://attack.mitre.org/techniques/T1482/", "https://www.owasp.org/images/4/4b/Red_Team_Operating_in_a_Modern_Environment.pdf", "https://ss64.com/nt/nltest.html", "https://redcanary.com/threat-detection-report/techniques/domain-trust-discovery/", "https://thedfirreport.com/2020/10/08/ryuks-return/"], "tags": {"analytic_story": ["Ryuk Ransomware", "Domain Trust Discovery", "IcedID", "Active Directory Discovery"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "Domain trust discovery execution on $dest$", "mitre_attack_id": ["T1482"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "nltest_domain_trust_discovery_filter"}]}, {"name": "Malicious PowerShell Process With Obfuscation Techniques", "id": "cde75cf6-3c7a-4dd6-af01-27cdb4511fd4", "version": 5, "date": "2021-01-19", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for PowerShell processes launched with arguments that have characters indicative of obfuscation on the command-line.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest Processes.process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| eval num_obfuscation = (mvcount(split(process,\"`\"))-1) + (mvcount(split(process, \"^\"))-1) + (mvcount(split(process, \"'\"))-1) | `malicious_powershell_process_with_obfuscation_techniques_filter` | search num_obfuscation > 10 ", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "These characters might be legitimately on the command-line, but it is not common.", "references": [], "tags": {"analytic_story": ["Malicious PowerShell"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 7", "CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/obfuscated_powershell/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "Powershell.exe running with potential obfuscated arguments on $dest$", "mitre_attack_id": ["T1059", "T1059.001"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_powershell_process_with_obfuscation_techniques_filter"}]}, {"name": "Detect Prohibited Applications Spawning cmd exe", "id": "dcfd6b40-42f9-469d-a433-2e53f7486664", "version": 6, "date": "2020-11-10", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This search looks for executions of cmd.exe spawned by a process that is often abused by attackers and that does not typically launch cmd.exe.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` by Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |search [`prohibited_apps_launching_cmd`] | `detect_prohibited_applications_spawning_cmd_exe_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts and populates the Endpoint data model with the resultant dataset. This search includes a lookup file, `prohibited_apps_launching_cmd.csv`, that contains a list of processes that should not be spawning cmd.exe. You can modify this lookup to better suit your environment. To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "There are circumstances where an application may legitimately execute and interact with the Windows command-line interface. Investigate and modify the lookup file, as appropriate.", "references": [], "tags": {"analytic_story": ["Suspicious Command-Line Executions", "Suspicious MSHTA Activity", "Suspicious Zoom Child Processes", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.003/powershell_spawn_cmd/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ running prohibited applications.", "mitre_attack_id": ["T1059", "T1059.003"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Windows Command Shell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "TA505", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "OilRig", "Lazarus Group", "Honeybee", "Cobalt Group", "FIN7", "APT41", "Soft Cell", "Turla", "Silence", "APT32", "APT39", "Darkhotel", "MuddyWater", "APT18", "APT38", "Dark Caracal", "Gorgon Group", "Dragonfly 2.0", "Rancor", "Ke3chang", "APT37", "Leviathan", "FIN8", "APT28", "Magic Hound", "Sowbug", "BRONZE BUTLER", "FIN10", "Threat Group-3390", "menuPass", "Gamaredon Group", "Suckfly", "Patchwork", "Threat Group-1314", "APT3", "admin@338", "APT1"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "| inputlookup prohibited_apps_launching_cmd | rename prohibited_applications as parent_process_name | eval parent_process_name=\"*\" . parent_process_name | table parent_process_name", "description": "This macro outputs a list of process that should not be the parent process of cmd.exe", "name": "prohibited_apps_launching_cmd", "lookups": [{"description": "A list of processes that should not be launching cmd.exe", "fields": "prohibited_applications", "filename": "prohibited_apps_launching_cmd.csv", "match_type": "WILDCARD(prohibited_applications)", "name": "prohibited_apps_launching_cmd", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/prohibited_apps_launching_cmd.csv"}]}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_prohibited_applications_spawning_cmd_exe_filter"}]}, {"name": "Disable Registry Tool", "id": "cd2cf33c-9201-11eb-a10a-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search identifies modification of registry to disable the regedit or registry tools of the windows operating system. Since registry tool is a swiss knife in analyzing registry, malware such as RAT or trojan Spy disable this application to prevent the removal of their registry entry such as persistence, file less components and defense evasion.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableRegistryTools\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_registry_tool_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Disabled Registry Tools on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_registry_tool_filter"}]}, {"name": "Any Powershell DownloadString", "id": "4d015ef2-7adf-11eb-95da-acde48001122", "version": 2, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of PowerShell downloading a file using `DownloadString` method. This particular method is utilized in many different PowerShell frameworks to download files and output to disk. Identify the source (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell transaction logs are available, review for further details of the implant.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*.DownloadString*  by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `any_powershell_downloadstring_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be present and filtering will need to occur by parent process or command line argument. It may be required to modify this query to an EDR product for more granular coverage.", "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-5.0", "https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md"], "tags": {"analytic_story": ["Malicious PowerShell", "HAFNIUM Group", "Ingress Tool Transfer"], "automated_detection_testing": "passed", "confidence": 70, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$. This behavior identifies the use of DownloadString within PowerShell.", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "any_powershell_downloadstring_filter"}]}, {"name": "Windows DiskCryptor Usage", "id": "d56fe0c8-4650-11ec-a8fa-acde48001122", "version": 1, "date": "2021-11-15", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies DiskCryptor  process name of dcrypt.exe or internal name dcinst.exe. This utility has been utilized by adversaries to encrypt disks manually during an operation. In addition, during install, a dcrypt.sys driver is installed and requires a reboot in order to take effect. There are no command-line arguments used.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"dcrypt.exe\" OR Processes.original_file_name=dcinst.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_diskcryptor_usage_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "It is possible false positives may be present based on the internal name dcinst.exe, filter as needed. It may be worthy to alert on the service name.", "references": ["https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/", "https://github.com/DavidXanatos/DiskCryptor"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1486/dcrypt/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to encrypt disks.", "mitre_attack_id": ["T1486"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_diskcryptor_usage_filter"}]}, {"name": "Schtasks used for forcing a reboot", "id": "1297fb80-f42a-4b4a-9c8a-88c066437cf6", "version": 4, "date": "2020-12-07", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for flags passed to schtasks.exe on the command-line that indicate that a forced reboot of system is scheduled.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe Processes.process=\"*shutdown*\" Processes.process=\"*/create *\" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_used_for_forcing_a_reboot_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Administrators may create jobs on systems forcing reboots to perform updates, maintenance, etc.", "references": [], "tags": {"analytic_story": ["Windows Persistence Techniques", "Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3"], "confidence": 80, "context": ["source:endpoint", {"stage": "Execution"}, "Persistence", "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/schtask_shutdown/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A schedule task process $process_name$ with force reboot commandline $process$ in host $dest$", "mitre_attack_id": ["T1053.005", "T1053"], "nist": ["PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schtasks_used_for_forcing_a_reboot_filter"}]}, {"name": "Ransomware Notes bulk creation", "id": "eff7919a-8330-11eb-83f8-acde48001122", "version": 1, "date": "2021-03-12", "author": "Teoderick Contreras", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytics identifies a big number of instance of ransomware notes (filetype e.g .txt, .html, .hta) file creation to the infected machine. This behavior is a good sensor if the ransomware note filename is quite new for security industry or the ransomware note filename is not in your ransomware lookup table list for monitoring.", "search": "`sysmon` EventCode=11 file_name IN (\"*\\.txt\",\"*\\.html\",\"*\\.hta\") |bin _time span=10s | stats min(_time) as firstTime max(_time) as lastTime dc(TargetFilename) as unique_readme_path_count values(TargetFilename) as list_of_readme_path by Computer Image file_name | where unique_readme_path_count >= 15 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ransomware_notes_bulk_creation_filter`", "how_to_implement": "You must be ingesting data that records the filesystem activity from your hosts to populate the Endpoint file-system data model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware", "DarkSide Ransomware", "BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Impact"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Obfuscation"], "message": "A high frequency file creation of $file_name$ in different file path in host $Computer$", "mitre_attack_id": ["T1486"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "file_name", "_time", "TargetFilename", "Computer", "Image", "user"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ransomware_notes_bulk_creation_filter"}]}, {"name": "Revil Registry Entry", "id": "e3d3f57a-c381-11eb-9e35-acde48001122", "version": 1, "date": "2021-06-02", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies suspicious modification in registry entry to keep some malware data during its infection. This technique seen in several apt implant, malware and ransomware like REVIL where it keep some information like the random generated file extension it uses for all the encrypted files and ransomware notes file name in the compromised host.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=\"*\\\\SOFTWARE\\\\WOW6432Node\\\\Facebook_Assistant\\\\*\" OR Registry.registry_path=\"*\\\\SOFTWARE\\\\WOW6432Node\\\\BlackLivesMatter*\") AND (Registry.registry_value_name = \"\\.*\" OR Registry.registry_value_name = \"Binary Data\") by Registry.registry_value_name Registry.dest Registry.user | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `revil_registry_entry_filter`", "how_to_implement": "to successfully implement this search, you need to be ingesting logs with the Image, TargetObject registry key, registry Details from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://krebsonsecurity.com/2021/05/a-closer-look-at-the-darkside-ransomware-gang/", "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf1/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "A registry entry $registry_path$ with registry value $registry_value_name$ and $registry_value_name$ related to revil ransomware in host $dest$", "mitre_attack_id": ["T1112"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_path", "Registry.registry_key_name"], "risk_score": 60, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "revil_registry_entry_filter"}]}, {"name": "Create Remote Thread into LSASS", "id": "67d4dbef-9564-4699-8da8-03a151529edc", "version": 1, "date": "2019-12-06", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "Detect remote thread creation into LSASS consistent with credential dumping.", "search": "`sysmon` EventID=8 TargetImage=*lsass.exe | stats count min(_time) as firstTime max(_time) as lastTime by Computer, EventCode, TargetImage, TargetProcessId | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `create_remote_thread_into_lsass_filter`", "how_to_implement": "This search needs Sysmon Logs with a Sysmon configuration, which includes EventCode 8 with lsass.exe. This search uses an input macro named `sysmon`. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Sysmon logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "Other tools can access LSASS for legitimate reasons and generate an event. In these cases, tweaking the search may help eliminate noise.", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "A process has created a remote thread into $TargetImage$ on $dest$. This behavior is indicative of credential dumping and should be investigated.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "TargetImage", "type": "Other", "role": ["Other"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "TargetImage", "Computer", "EventCode", "TargetImage", "TargetProcessId", "dest"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "create_remote_thread_into_lsass_filter"}]}, {"name": "Disable Net User Account", "id": "ba858b08-d26c-11eb-af9b-acde48001122", "version": 3, "date": "2021-11-30", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This analytic will identify a suspicious command-line that disables a user account using the native `net.exe` or `net1.exe` utility to Windows. This technique may used by the adversaries to interrupt availability of accounts and continue the impact against the organization.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%/active:no%\") AND like(cmd_line, \"%user%\") AND (process_name=\"net1.exe\" OR process_name=\"net.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed net.exe/net1.exe may be used.", "known_false_positives": "System administrators or automated scripts may disable an account but not a common practice. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "cis20": ["CIS 4", "CIS 16"], "confidence": 70, "context": ["Source:Endpoint", "stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/net_user_dis.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to disable accounts.", "mitre_attack_id": ["T1489", "T1078"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 49, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop", "Valid Accounts"], "mitre_attack_tactics": ["Impact", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Lazarus Group", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_net_user_account_filter"}]}, {"name": "Deny Permission using Cacls Utility", "id": "b76eae28-cd25-11eb-9c92-acde48001122", "version": 3, "date": "2021-11-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies the use of `cacls.exe`, `icacls.exe` or `xcacls.exe` placing the deny permission on a file or directory. Adversaries perform this behavior to prevent responders from reviewing or gaining access to adversary files on disk.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND match_regex(cmd_line, /(?i)deny/)=true AND (process_name=\"cacls.exe\" OR process_name=\"xcacls.exe\" OR process_name=\"icacls.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed icacls.exe may be used.", "known_false_positives": "System administrators may use cacls utilities but this is not a common practice. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "cis20": ["CIS 14", "CIS 16"], "confidence": 70, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1222.001/ssa_cacls/all_icalc.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A cacls process $process_name$ with commandline $cmd_line$ try to deny a permission of a file or directory in host $dest_device_id$", "mitre_attack_id": ["T1222"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 35, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "deny_permission_using_cacls_utility_filter"}]}, {"name": "Detect Use of cmd exe to Launch Script Interpreters", "id": "b89919ed-fe5f-492c-b139-95dbb162039e", "version": 4, "date": "2020-07-21", "author": "Bhavin Patel, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for the execution of the cscript.exe or wscript.exe processes, with a parent of cmd.exe. The search will return the count, the first and last time this execution was seen on a machine, the user, and the destination of the machine", "search": "| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"cmd.exe\" (Processes.process_name=cscript.exe OR Processes.process_name =wscript.exe) by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `detect_use_of_cmd_exe_to_launch_script_interpreters_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records process activity from your hosts to populate the endpoint data model in the processes node. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Some legitimate applications may exhibit this behavior.", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Suspicious Command-Line Executions"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.003/cmd_spawns_cscript/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "cmd.exe launching script interpreters on $dest$", "mitre_attack_id": ["T1059", "T1059.003"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process_name", "Processes.process_name", "Processes.parent_process", "Processes.user", "Processes.dest"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Windows Command Shell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "TA505", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "OilRig", "Lazarus Group", "Honeybee", "Cobalt Group", "FIN7", "APT41", "Soft Cell", "Turla", "Silence", "APT32", "APT39", "Darkhotel", "MuddyWater", "APT18", "APT38", "Dark Caracal", "Gorgon Group", "Dragonfly 2.0", "Rancor", "Ke3chang", "APT37", "Leviathan", "FIN8", "APT28", "Magic Hound", "Sowbug", "BRONZE BUTLER", "FIN10", "Threat Group-3390", "menuPass", "Gamaredon Group", "Suckfly", "Patchwork", "Threat Group-1314", "APT3", "admin@338", "APT1"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_use_of_cmd_exe_to_launch_script_interpreters_filter"}]}, {"name": "Wermgr Process Connecting To IP Check Web Services", "id": "ed313326-a0f9-11eb-a89c-acde48001122", "version": 1, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is designed to detect suspicious wermgr.exe process that tries to connect to known IP web services. This technique is know for trickbot and other trojan spy malware to recon the infected machine and look for its ip address without so much finger print on the commandline process. Since wermgr.exe is designed for error handling process of windows it is really suspicious that this process is trying to connect to this IP web services cause that maybe cause of some malicious code injection.", "search": "`sysmon` EventCode =22 process_name = wermgr.exe QueryName IN (\"*wtfismyip.com\", \"*checkip.amazonaws.com\", \"*ipecho.net\", \"*ipinfo.io\", \"*api.ipify.org\", \"*icanhazip.com\", \"*ip.anysrc.com\",\"*api.ip.sb\", \"ident.me\", \"www.myexternalip.com\", \"*zen.spamhaus.org\", \"*cbl.abuseat.org\", \"*b.barracudacentral.org\",\"*dnsbl-1.uceprotect.net\", \"*spam.dnsbl.sorbs.net\") |  stats  min(_time) as firstTime max(_time) as lastTime count by  process_path process_name process_id QueryName QueryStatus QueryResults Computer EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_connecting_to_ip_check_web_services_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, dns query name process path , and query ststus from your endpoints like EventCode 22. If you are using Sysmon, you must have at least version 12 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/infection/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Wermgr.exe process connecting IP location web services on $ComputerName$", "mitre_attack_id": ["T1590", "T1590.005"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_path", "process_name", "process_id", "QueryName", "QueryStatus", "QueryResults", "Computer", "EventCode"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wermgr_process_connecting_to_ip_check_web_services_filter"}]}, {"name": "Get WMIObject Group Discovery with Script Block Logging", "id": "69df7f7c-155d-11ec-a055-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies the usage of `Get-WMIObject Win32_Group`, which is typically used as a way to identify groups on the endpoint.  Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message = \"*Get-WMIObject*\" AND Message = \"*Win32_Group*\" | stats count min(_time) as firstTime max(_time) as lastTime by  Message OpCode ComputerName User EventCode| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_wmiobject_group_discovery_with_script_block_logging_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives may be present. Tune as needed.", "references": ["https://www.splunk.com/en_us/blog/security/powershell-detections-threat-research-release-august-2021.html", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System group discovery enumeration on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_wmiobject_group_discovery_with_script_block_logging_filter"}]}, {"name": "PowerShell Start-BitsTransfer", "id": "39e2605a-90d8-11eb-899e-acde48001122", "version": 2, "date": "2021-03-29", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Start-BitsTransfer is the PowerShell \"version\" of BitsAdmin.exe. Similar functionality is present. This technique variation is not as commonly used by adversaries, but has been abused in the past. Lesser known uses include the ability to set the `-TransferType` to `Upload` for exfiltration of files. In an instance where `Upload` is used, it is highly possible files will be archived. During triage, review parallel processes and process lineage. Capture any files on disk and review. For the remote domain or IP, what is the reputation?", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*start-bitstransfer* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.original_file_name Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_start_bitstransfer_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives. It is possible administrators will utilize Start-BitsTransfer for administrative tasks, otherwise filter based parent process or command-line arguments.", "references": ["https://isc.sans.edu/diary/Investigating+Microsoft+BITS+Activity/23281", "https://docs.microsoft.com/en-us/windows/win32/bits/using-windows-powershell-to-create-bits-transfer-jobs"], "tags": {"analytic_story": ["BITS Jobs"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}, "Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1197/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A suspicious process $process_name$ with commandline $process$ that are related to bittransfer functionality in host $dest$", "mitre_attack_id": ["T1197"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["BITS Jobs"], "mitre_attack_tactics": ["Defense Evasion", "Persistence"], "mitre_attack_groups": ["Patchwork", "APT41", "Leviathan"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_start_bitstransfer_filter"}]}, {"name": "Disable ETW Through Registry", "id": "f0eacfa4-d33f-11eb-8f9d-acde48001122", "version": 1, "date": "2021-06-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to identify modification in registry to disable ETW windows feature to evade detections. This technique was seen in several ransomware, RAT and even APT to impaire defenses of the compromise machine and to be able to execute payload with minimal alert as much as possible.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\ETWEnabled\" Registry.registry_value_data = \"0x00000000\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_etw_through_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "network operator may disable this feature of windows but not so common.", "references": ["https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1562.001", "T1562"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_etw_through_registry_filter"}]}, {"name": "Regsvr32 Silent and Install Param Dll Loading", "id": "f421c250-24e7-11ec-bc43-acde48001122", "version": 1, "date": "2021-10-04", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic is to detect a loading of dll using regsvr32 application with silent parameter and dllinstall execution. This technique was seen in several RAT malware similar to remcos, njrat and adversaries to load their malicious DLL on the compromised machine. This TTP may executed by normal 3rd party application so it is better to pivot by the parent process, parent command-line and command-line of the file that execute this regsvr32.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` AND Processes.process=\"*/i*\" by Processes.dest Processes.parent_process Processes.process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,\"(?i)[\\-|\\/][Ss]{1}\") | `regsvr32_silent_and_install_param_dll_loading_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Other third part application may used this parameter but not so common in base windows environment.", "references": ["https://app.any.run/tasks/dc93ee63-050c-4ff8-b07e-8277af9ab939/#", "https://attack.mitre.org/techniques/T1218/010/"], "tags": {"analytic_story": ["Suspicious Regsvr32 Activity", "Remcos"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.005/vbs_wscript/sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to load a DLL using the silent and dllinstall parameter.", "mitre_attack_id": ["T1218", "T1218.010"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 36, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvr32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Blue Mockingbird", "Inception", "WIRTE", "Cobalt Group", "APT19", "Leviathan", "APT32", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "regsvr32_silent_and_install_param_dll_loading_filter"}]}, {"name": "MSBuild Suspicious Spawned By Script Process", "id": "213b3148-24ea-11ec-93a2-acde48001122", "version": 1, "date": "2021-10-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious child process of MSBuild spawned by Windows Script Host - cscript or wscript. This behavior or event are commonly seen and used by malware or adversaries to execute malicious msbuild process using malicious script in the compromised host. During triage, review parallel processes and identify any file modifications. MSBuild may load a script from the same path without having command-line arguments.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"wscript.exe\", \"cscript.exe\") AND `process_msbuild` by Processes.dest Processes.parent_process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `msbuild_suspicious_spawned_by_script_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited as developers do not spawn MSBuild via a WSH.", "references": ["https://app.any.run/tasks/dc93ee63-050c-4ff8-b07e-8277af9ab939/#"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution MSBuild"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127.001/regsvr32_silent/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Msbuild.exe process spawned by $parent_process_name$ on $dest$ executed by $user$", "mitre_attack_id": ["T1127.001", "T1127"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.parent_process", "Processes.parent_process_name", "Processes.process_name", "Processes.original_file_name", "Processes.user"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["MSBuild", "Trusted Developer Utilities Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Frankenstein", "no"]}, "macros": [{"definition": "(Processes.process_name=msbuild.exe OR Processes.original_file_name=MSBuild.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_msbuild"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "msbuild_suspicious_spawned_by_script_process_filter"}]}, {"name": "CHCP Command Execution", "id": "21d236ec-eec1-11eb-b23e-acde48001122", "version": 1, "date": "2021-07-27", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect execution of chcp.exe application. this utility is used to change the active code page of the console. This technique was seen in icedid malware to know the locale region/language/country of the compromise host.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=chcp.com Processes.parent_process_name = cmd.exe Processes.parent_process=*/c* by  Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `chcp_command_execution_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed chcp.com may be used.", "known_false_positives": "other tools or script may used this to change code page to UTF-* or others", "references": ["https://ss64.com/nt/chcp.html", "https://twitter.com/tccontre18/status/1419941156633329665?s=20"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/simulated_icedid/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "parent process $parent_process_name$ spawning chcp process $process_name$ with parent command line $parent_process$", "mitre_attack_id": ["T1059"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "process", "parent_process_name", "parent_process", "process_id", "parent_process_id", "dest", "user"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "chcp_command_execution_filter"}]}, {"name": "Attempt To Delete Services", "id": "a0c8c292-d01a-11eb-aa18-acde48001122", "version": 3, "date": "2021-11-24", "author": "Teoderick Contreras, splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies Windows Service Control, `sc.exe`, attempting to delete a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then delete it. Adversaries utilize this technique to terminate security services or other related services to continue there objective and evade detections.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%delete%\") AND process_name = \"sc.exe\" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "It is possible administrative scripts may start/stop/delete services. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1543.003/T1543.003.md"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "cis20": ["CIS 8", "CIS 13"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/sc_del.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to delete a service.", "mitre_attack_id": ["T1489", "T1543", "T1543.003"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 36, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop", "Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Impact", "Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Lazarus Group", "no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempt_to_delete_services_filter"}]}, {"name": "Delete ShadowCopy With PowerShell", "id": "5ee2bcd0-b2ff-11eb-bb34-acde48001122", "version": 1, "date": "2021-05-12", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This following analytic detects PowerShell command to delete shadow copy using the WMIC PowerShell module. This technique was seen used by a recent adversary to deploy DarkSide Ransomware where it executed a child process of PowerShell to execute a hex encoded command to delete shadow copy. This hex encoded command was able to be decrypted by PowerShell log.", "search": "`powershell` EventCode=4104 Message= \"*ShadowCopy*\" (Message = \"*Delete*\" OR Message = \"*Remove*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `delete_shadowcopy_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the powershell logs  from your endpoints. make sure you enable needed registry to monitor this event.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html", "https://searchwindowsserver.techtarget.com/tutorial/Set-up-PowerShell-script-block-logging-for-added-security"], "tags": {"analytic_story": ["DarkSide Ransomware", "Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf1/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An attempt to delete ShadowCopy was performed using PowerShell on $ComputerName$ by $User$.", "mitre_attack_id": ["T1490"], "observable": [{"name": "User", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "delete_shadowcopy_with_powershell_filter"}]}, {"name": "Certutil exe certificate extraction", "id": "337a46be-600f-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for arguments to certutil.exe indicating the manipulation or extraction of Certificate. This certificate can then be used to sign new authentication tokens specially inside Federated environments such as Windows ADFS.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=certutil.exe Processes.process = \"*-exportPFX*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `certutil_exe_certificate_extraction_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Unless there are specific use cases, manipulating or exporting certificates using certutil is uncommon. Extraction of certificate has been observed during attacks such as Golden SAML and other campaigns targeting Federated services.", "references": [], "tags": {"analytic_story": ["Windows Persistence Techniques", "Cloud Federated Credential Abuse"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/certutil_exe_certificate_extraction/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Installation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting export a certificate.", "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "certutil_exe_certificate_extraction_filter"}]}, {"name": "Registry Keys Used For Persistence", "id": "f5f6af30-7aa7-4295-bfe9-07fe87c01a4b", "version": 6, "date": "2021-09-07", "author": "Jose Hernandez, David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for modifications to registry keys that can be used to launch an application or service at system startup.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=*\\\\currentversion\\\\run* OR Registry.registry_path=*\\\\currentVersion\\\\Windows\\\\Appinit_Dlls* OR Registry.registry_path=*\\\\CurrentVersion\\\\Winlogon\\\\Shell* OR Registry.registry_path=*\\\\CurrentVersion\\\\Winlogon\\\\Notify* OR Registry.registry_path=*\\\\CurrentVersion\\\\Winlogon\\\\Userinit* OR Registry.registry_path=*\\\\CurrentVersion\\\\Winlogon\\\\VmApplet* OR Registry.registry_path=*\\\\currentversion\\\\policies\\\\explorer\\\\run* OR Registry.registry_path=*\\\\currentversion\\\\runservices* OR Registry.registry_path=HKLM\\\\SOFTWARE\\\\Microsoft\\\\Netsh\\\\* OR (Registry.registry_path=\"*Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options*\" AND Registry.registry_key_name=Debugger) OR (Registry.registry_path=\"*\\\\CurrentControlSet\\\\Control\\\\Lsa\" AND Registry.registry_key_name=\"Security Packages\") OR (Registry.registry_path=\"*\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\OSConfig\" AND Registry.registry_key_name=\"Security Packages\") OR (Registry.registry_path=\"*\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\\\\*\") OR (Registry.registry_path=\"*currentVersion\\\\Windows\" AND Registry.registry_key_name=\"Load\") OR (Registry.registry_path=\"*\\\\CurrentVersion\" AND Registry.registry_key_name=\"Svchost\") OR (Registry.registry_path=\"*\\\\CurrentControlSet\\Control\\Session Manager\"AND Registry.registry_key_name=\"BootExecute\") OR (Registry.registry_path=\"*\\\\Software\\\\Run\" AND Registry.registry_key_name=\"auto_update\")) by Registry.dest Registry.user | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `registry_keys_used_for_persistence_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "There are many legitimate applications that must execute on system startup and will use these registry keys to accomplish that task.", "references": [], "tags": {"analytic_story": ["Suspicious Windows Registry Activities", "Suspicious MSHTA Activity", "DHS Report TA18-074A", "Possible Backdoor Activity Associated With MUDCARP Espionage Campaigns", "Ransomware", "Windows Persistence Techniques", "Emotet Malware  DHS Report TA18-201A ", "IcedID", "Remcos"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 95, "context": ["source:endpoint", {"stage": "Persistence"}, "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "A registry activity in $registry_path$ related to persistence in host $dest$", "mitre_attack_id": ["T1547.001", "T1547"], "nist": ["PR.PT", "DE.CM", "DE.AE"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.dest", "Registry.user"], "risk_score": 76, "security_domain": "endpoint", "mitre_attack_technique": ["Registry Run Keys / Startup Folder", "Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Rocke", "Tropic Trooper", "Gamaredon Group", "Sharpshooter", "Molerats", "Silence", "RTM", "Inception", "APT41", "Machete", "Kimsuky", "APT33", "APT39", "APT32", "APT18", "Turla", "Dark Caracal", "Cobalt Group", "Honeybee", "Threat Group-3390", "Dragonfly 2.0", "Gorgon Group", "Ke3chang", "APT19", "Leviathan", "MuddyWater", "APT37", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "FIN7", "Patchwork", "FIN6", "Lazarus Group", "Putter Panda", "APT29", "Darkhotel", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "registry_keys_used_for_persistence_filter"}]}, {"name": "Attempt To Add Certificate To Untrusted Store", "id": "6bc5243e-ef36-45dc-9b12-f4a6be131159", "version": 7, "date": "2021-09-16", "author": "Patrick Bareiss, Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Attempt To Add Certificate To Untrusted Store", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` (Processes.process=*-addstore*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `attempt_to_add_certificate_to_untrusted_store_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "There may be legitimate reasons for administrators to add a certificate to the untrusted certificate store. In such cases, this will typically be done on a large number of systems.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1553.004/T1553.004.md"], "tags": {"analytic_story": ["Disabling Security Tools"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1553.004/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Installation", "Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified attempting to add a certificate to the store on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1553.004", "T1553"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Install Root Certificate", "Subvert Trust Controls"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=certutil.exe OR Processes.original_file_name=CertUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_certutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempt_to_add_certificate_to_untrusted_store_filter"}]}, {"name": "Modify ACL permission To Files Or Folder", "id": "7e8458cc-acca-11eb-9e3f-acde48001122", "version": 1, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies suspicious modification of ACL permission to a files or folder to make it available to everyone. This technique may be used by the adversary to evade ACLs or protected files access. This changes is commonly configured by the file or directory owner with appropriate permission. This behavior is a good indicator if this command seen on a machine utilized by an account with no permission to do so.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"cacls.exe\" OR Processes.process_name = \"icacls.exe\" OR Processes.process_name = \"xcacls.exe\" AND (Processes.process = \"*/G everyone:*\"  OR Processes.process = \"*/G SYSTEM:*\") by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `modify_acl_permission_to_files_or_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed cacls.exe may be used.", "known_false_positives": "administrators may use this command. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Suspicious ACL permission modification on $dest$", "mitre_attack_id": ["T1222"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.dest", "Processes.user", "Processes.process", "Processes.process_id"], "risk_score": 32, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "modify_acl_permission_to_files_or_folder_filter"}]}, {"name": "Detect HTML Help Using InfoTech Storage Handlers", "id": "0b2eefa5-5508-450d-b970-3dd2fb761aec", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) file using InfoTech Storage Handlers. This particular technique will load Windows script code from a compiled help file, using InfoTech Storage Handlers. itss.dll will load upon execution. Three InfoTech Storage handlers are supported - ms-its, its, mk:@MSITStore. ITSS may be used to launch a specific html/htm file from within a CHM file. CHM files may contain nearly any file type embedded. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The \"htm\" and \"html\" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. hh.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_hh` Processes.process IN (\"*its:*\", \"*mk:@MSITStore:*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_using_infotech_storage_handlers_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "It is rare to see instances of InfoTech Storage Handlers being used, but it does happen in some legitimate instances. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/001/", "https://www.kb.cert.org/vuls/id/851869", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.001/T1218.001.md", "https://lolbas-project.github.io/lolbas/Binaries/Hh/", "https://gist.github.com/mgeeky/cce31c8602a144d8f2172a73d510e0e7", "https://cyberforensicator.com/2019/01/20/silence-dissecting-malicious-chm-files-and-performing-forensic-analysis/"], "tags": {"analytic_story": ["Suspicious Compiled HTML Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "$process_name$ has been identified using Infotech Storage Handlers to load a specific file within a CHM on $dest$ under user $user$.", "mitre_attack_id": ["T1218", "T1218.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Compiled HTML File"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "Silence", "Lazarus Group", "Dark Caracal", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=hh.exe OR Processes.original_file_name=HH.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_hh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_html_help_using_infotech_storage_handlers_filter"}]}, {"name": "Detect mshta renamed", "id": "8f45fcf0-5b68-11eb-ae93-0242ac130002", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies renamed instances of mshta.exe executing. Mshta.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. This analytic utilizes the internal name of the PE to identify if is the legitimate mshta binary. Further analysis should be performed to review the executed content and validation it is the real mshta.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_mshta` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_mshta_renamed_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of mshta.exe, but never renamed, triggering a false positive.", "references": ["https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/"], "tags": {"analytic_story": ["Suspicious MSHTA Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$.", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=mshta.exe OR Processes.original_file_name=MSHTA.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_mshta"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_mshta_renamed_filter"}]}, {"name": "GetLocalUser with PowerShell Script Block", "id": "2e891cbe-0426-11ec-9c9c-acde48001122", "version": 1, "date": "2021-08-23", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-LocalUser` commandlet. The `Get-LocalUser` commandlet is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-LocalUser*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getlocaluser_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getlocaluser_with_powershell_script_block_filter"}]}, {"name": "GetDomainGroup with PowerShell", "id": "93c94be3-bead-4a60-860f-77ca3fe59903", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. `Get-DomainGroup` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-DomainGroup*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaingroup_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainGroup/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery with PowerView on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaingroup_with_powershell_filter"}]}, {"name": "Detect SharpHound File Modifications", "id": "42b4b438-beed-11eb-ba1d-acde48001122", "version": 1, "date": "2021-05-27", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "SharpHound is used as a reconnaissance collector, ingestor, for BloodHound. SharpHound will query the domain controller and begin gathering all the data related to the domain and trusts. For output, it will drop a .zip file upon completion following a typical pattern that is often not changed. This analytic focuses on the default file name scheme. Note that this may be evaded with different parameters within SharpHound, but that depends on the operator. `-randomizefilenames` and `-encryptzip` are two examples. In addition, executing SharpHound via .exe or .ps1 without any command-line arguments will still perform activity and dump output to the default filename. Example default filename `20210601181553_BloodHound.zip`. SharpHound creates multiple temp files following the same pattern `20210601182121_computers.json`, `domains.json`, `gpos.json`, `ous.json` and `users.json`. Tuning may be required, or remove these json's entirely if it is too noisy. During traige, review parallel processes for further suspicious behavior. Typically, the process executing the `.ps1` ingestor will be PowerShell.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*bloodhound.zip\", \"*_computers.json\", \"*_gpos.json\", \"*_domains.json\", \"*_users.json\", \"*_groups.json\") by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.file_path Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_file_modifications_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on file modifications that include the name of the process, and file, responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesystem` node.", "known_false_positives": "False positives should be limited as the analytic is specific to a filename with extension .zip. Filter as needed.", "references": ["https://attack.mitre.org/software/S0521/", "https://thedfirreport.com/?s=bloodhound", "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "https://github.com/BloodHoundAD/SharpHound3", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md#atomic-test-2---run-bloodhound-from-local-disk"], "tags": {"analytic_story": ["Discovery Techniques", "Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/sharphound/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Potential SharpHound file modifications identified on $dest$", "mitre_attack_id": ["T1087.002", "T1069.001", "T1482", "T1087.001", "T1087", "T1069.002", "T1069"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "file_path", "dest", "file_name", "process_id", "file_create_time"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Local Groups", "Domain Trust Discovery", "Local Account", "Account Discovery", "Domain Groups", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "Turla", "OilRig", "admin@338", "Wizard Spider", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338", "no", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang", "TA505", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_sharphound_file_modifications_filter"}]}, {"name": "Powershell Processing Stream Of Data", "id": "0d718b52-c9f1-11eb-bc61-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is processing compressed stream data. This is typically found in obfuscated PowerShell or PowerShell executing embedded .NET or binary files that are stream flattened and will be deflated durnig execution. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 Message = \"*IO.Compression.*\" OR Message = \"*IO.StreamReader*\" OR Message = \"*]::Decompress*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_processing_stream_of_data_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "powershell may used this function to process compressed data.", "references": ["https://medium.com/@ahmedjouini99/deobfuscating-emotets-powershell-payload-e39fb116f7b9", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains stream command in $Message$ commonly for processing compressed or to decompressed binary file with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User", "Score"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_processing_stream_of_data_filter"}]}, {"name": "Cobalt Strike Named Pipes", "id": "5876d429-0240-4709-8b93-ea8330b411b5", "version": 1, "date": "2021-02-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies the use of default or publicly known named pipes used with Cobalt Strike. A named pipe is a named, one-way or duplex pipe for communication between the pipe server and one or more pipe clients. Cobalt Strike uses named pipes in many ways and has default values used with the Artifact Kit and Malleable C2 Profiles. The following query assists with identifying these default named pipes. Each EDR product presents named pipes a little different. Consider taking the values and generating a query based on the product of choice. \\\nUpon triage, review the process performing the named pipe. If it is explorer.exe, It is possible it was injected into by another process. Review recent parallel processes to identify suspicious patterns or behaviors. A parallel process may have a network connection, review and follow the connection back to identify any file modifications.", "search": "`sysmon` EventID=17 OR EventID=18 PipeName IN (\\\\msagent_*, \\\\wkssvc*, \\\\DserNamePipe*, \\\\srvsvc_*, \\\\mojo.*, \\\\postex_*, \\\\status_*, \\\\MSSE-*, \\\\spoolss_*, \\\\win_svc*, \\\\ntsvcs*, \\\\winsock*, \\\\UIA_PIPE*) | stats count min(_time) as firstTime max(_time) as lastTime by Computer, process_name, process_id process_path, PipeName | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cobalt_strike_named_pipes_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "The idea of using named pipes with Cobalt Strike is to blend in. Therefore, some of the named pipes identified and added may cause false positives. Filter by process name or pipe name to reduce false positives.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes", "https://www.cobaltstrike.com/help-smb-beacon", "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/", "https://gist.github.com/MHaggis/6c600e524045a6d49c35291a21e10752", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html"], "tags": {"analytic_story": ["Cobalt Strike", "Trickbot", "DarkSide Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $process_name$ was identified on endpoint $Computer$ by user $user$ accessing known suspicious named pipes related to Cobalt Strike.", "mitre_attack_id": ["T1055"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "PipeName", "Computer", "process_name", "process_path", "process_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cobalt_strike_named_pipes_filter"}]}, {"name": "Sdelete Application Execution", "id": "31702fc0-2682-11ec-85c3-acde48001122", "version": 1, "date": "2021-10-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect the execution of sdelete.exe application sysinternal tools. This tool is one of the most use tool of malware and adversaries to remove or clear their tracks and artifact in the targetted host. This tool is designed to delete securely a file in file system that remove the forensic evidence on the machine. A good TTP query to check why user execute this application which is not a common practice.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_sdelete` by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sdelete_application_execution_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "user may execute and use this application", "references": ["https://app.any.run/tasks/956f50be-2c13-465a-ac00-6224c14c5f89/"], "tags": {"analytic_story": ["Masquerading - Rename System Utilities"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1485/sdelete/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "sdelete process $process_name$ executed in $dest$", "mitre_attack_id": ["T1485", "T1070.004", "T1070"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction", "File Deletion", "Indicator Removal on Host"], "mitre_attack_tactics": ["Impact", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38", "Sandworm Team", "Rocke", "Tropic Trooper", "Gamaredon Group", "Wizard Spider", "APT41", "Kimsuky", "Silence", "The White Company", "TEMP.Veles", "APT32", "APT38", "Patchwork", "Honeybee", "Cobalt Group", "Dragonfly 2.0", "menuPass", "FIN8", "OilRig", "FIN5", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "APT28", "Threat Group-3390", "Group5", "Lazarus Group", "APT18", "APT29", "no"]}, "macros": [{"definition": "(Processes.process_name=sdelete.exe OR Processes.original_file_name=sdelete.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_sdelete"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sdelete_application_execution_filter"}]}, {"name": "Detect SharpHound Command-Line Arguments", "id": "a0bdd2f6-c2ff-11eb-b918-acde48001122", "version": 1, "date": "2021-06-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies common command-line arguments used by SharpHound `-collectionMethod` and `invoke-bloodhound`. Being the script is FOSS, function names may be modified, but these changes are dependent upon the operator. In most instances the defaults are used. This analytic works to identify the common command-line attributes used. It does not cover the entirety of every argument in order to avoid false positives.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (\"*-collectionMethod*\",\"*invoke-bloodhound*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "False positives should be limited as the arguments used are specific to SharpHound. Filter as needed or add more command-line arguments as needed.", "references": ["https://attack.mitre.org/software/S0521/", "https://thedfirreport.com/?s=bloodhound", "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "https://github.com/BloodHoundAD/SharpHound3", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md#atomic-test-2---run-bloodhound-from-local-disk"], "tags": {"analytic_story": ["Discovery Techniques", "Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/sharphound/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Possible SharpHound command-Line arguments identified on $dest$", "mitre_attack_id": ["T1087.002", "T1069.001", "T1482", "T1087.001", "T1087", "T1069.002", "T1069"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Local Groups", "Domain Trust Discovery", "Local Account", "Account Discovery", "Domain Groups", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "Turla", "OilRig", "admin@338", "Wizard Spider", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338", "no", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang", "TA505", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_sharphound_command_line_arguments_filter"}]}, {"name": "Dump LSASS via comsvcs DLL", "id": "8943b567-f14d-4ee8-a0bb-2121d4ce3184", "version": 2, "date": "2020-02-21", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Detect the usage of comsvcs.dll for dumping the lsass process.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*comsvcs.dll* Processes.process=*MiniDump* by Processes.user Processes.process_name Processes.original_file_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dump_lsass_via_comsvcs_dll_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "None identified.", "references": ["https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/", "https://twitter.com/SBousseaden/status/1167417096374050817"], "tags": {"analytic_story": ["Credential Dumping", "Suspicious Rundll32 Activity", "HAFNIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified accessing credentials using comsvcs.dll on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dump_lsass_via_comsvcs_dll_filter"}]}, {"name": "Print Spooler Failed to Load a Plug-in", "id": "1adc9548-da7c-11eb-8f13-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies driver load errors utilizing the Windows PrintService Admin logs. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. \\\nWithin the proof of concept code, the following error will occur - \"The print spooler failed to load a plug-in module C:\\Windows\\system32\\spool\\DRIVERS\\x64\\3\\meterpreter.dll, error code 0x45A. See the event user data for context information.\" \\\nThe analytic is based on file path and failure to load the plug-in. \\\nDuring triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.", "search": "`printservice` ((ErrorCode=\"0x45A\" (EventCode=\"808\" OR EventCode=\"4909\")) OR (\"The print spooler failed to load a plug-in module\" OR \"\\\\drivers\\\\x64\\\\\")) | stats count min(_time) as firstTime max(_time) as lastTime by OpCode EventCode ComputerName Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `print_spooler_failed_to_load_a_plug_in_filter`", "how_to_implement": "You will need to ensure PrintService Admin and Operational logs are being logged to Splunk from critical or all systems.", "known_false_positives": "False positives are unknown and filtering may be required.", "references": ["https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "cve": ["CVE-2021-34527", "CVE-2021-1675"], "dataset": [], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Suspicious printer spooler errors have occured on endpoint $ComputerName$ with EventCode $EventCode$.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "OpCode", "EventCode", "ComputerName", "Message"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "source=\"wineventlog:microsoft-windows-printservice/operational\" OR sourcetype=\"WinEventLog:Microsoft-Windows-PrintService/Admin\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "printservice"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "print_spooler_failed_to_load_a_plug_in_filter"}]}, {"name": "Suspicious mshta child process", "id": "60023bb6-5500-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies child processes spawning from  \"mshta.exe\". The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, parent process \"mshta.exe\" and its child process.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=mshta.exe AND (Processes.process_name=powershell.exe OR Processes.process_name=colorcpl.exe OR Processes.process_name=msbuild.exe OR Processes.process_name=microsoft.workflow.compiler.exe OR Processes.process_name=searchprotocolhost.exe OR Processes.process_name=scrcons.exe OR Processes.process_name=cscript.exe OR Processes.process_name=wscript.exe OR Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe) by Processes.dest Processes.parent_process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_mshta_child_process_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Although unlikely, some legitimate applications may exhibit this behavior, triggering a false positive.", "references": ["https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/"], "tags": {"analytic_story": ["Suspicious MSHTA Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "suspicious mshta child process detected on host $dest$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process", "type": "Process Name", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.dest", "Processes.parent_process", "Processes.user"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_mshta_child_process_filter"}]}, {"name": "DNS Exfiltration Using Nslookup App", "id": "2452e632-9e0d-11eb-bacd-acde48001122", "version": 1, "date": "2021-04-15", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type, TXT, A, AAAA, that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id values(Processes.parent_process) as parent_process count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"nslookup.exe\" Processes.process = \"*-querytype=*\" OR Processes.process=\"*-qt=*\" OR Processes.process=\"*-q=*\" OR Processes.process=\"-type=*\" OR Processes.process=\"*-retry=*\" by Processes.dest Processes.user Processes.process_name  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dns_exfiltration_using_nslookup_app_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances of nslookup.exe may be used.", "known_false_positives": "admin nslookup usage", "references": ["https://www.fireeye.com/blog/threat-research/2017/03/fin7_spear_phishing.html", "https://www.varonis.com/blog/dns-tunneling/", "https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"], "tags": {"analytic_story": ["Suspicious DNS Traffic", "Dynamic DNS", "Command and Control", "Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/nslookup_exfil/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ performing activity related to DNS exfiltration.", "mitre_attack_id": ["T1048"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dns_exfiltration_using_nslookup_app_filter"}]}, {"name": "Detect Empire with PowerShell Script Block Logging", "id": "bc1dc6b8-c954-11eb-bade-acde48001122", "version": 1, "date": "2021-06-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies the common PowerShell stager used by PowerShell-Empire. Each stager that may use PowerShell all uses the same pattern. The initial HTTP will be base64 encoded and use `system.net.webclient`. Note that some obfuscation may evade the analytic. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104  (Message=*system.net.webclient* AND Message=*frombase64string*) | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_empire_with_powershell_script_block_logging_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives may only pertain to it not being related to Empire, but another framework. Filter as needed if any applications use the same pattern.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/", "https://github.com/BC-SECURITY/Empire"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "The following behavior was identified and typically related to PowerShell-Empire on $ComputerName$ by $User$.", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "User", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_empire_with_powershell_script_block_logging_filter"}]}, {"name": "Unload Sysmon Filter Driver", "id": "c77162d3-f93c-45cc-80c8-22f665664g9f", "version": 3, "date": "2020-07-22", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Attackers often disable security tools to avoid detection. This search looks for the usage of process `fltMC.exe` to unload a Sysmon Driver that will stop sysmon from collecting the data.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fltMC.exe AND Processes.process=*unload* AND Processes.process=*SysmonDrv*  by Processes.process_name Processes.process_id Processes.parent_process_name Processes.process Processes.dest Processes.user | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` |`unload_sysmon_filter_driver_filter`| table firstTime lastTime dest user count process_name process_id parent_process_name process", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model. This search is also shipped with `unload_sysmon_filter_driver_filter` macro, update this macro to filter out false positives.", "known_false_positives": "", "references": [], "tags": {"analytic_story": ["Disabling Security Tools"], "asset_type": "", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "Possible Sysmon filter driver unloading on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unload_sysmon_filter_driver_filter"}]}, {"name": "Reg exe Manipulating Windows Services Registry Keys", "id": "8470d755-0c13-45b3-bd63-387a373c10cf", "version": 5, "date": "2020-11-26", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for reg.exe modifying registry keys that define Windows services and their configurations.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process_name) as process_name values(Processes.parent_process_name) as parent_process_name values(Processes.user) as user FROM datamodel=Endpoint.Processes where Processes.process_name=reg.exe Processes.process=*reg* Processes.process=*add* Processes.process=*Services* by Processes.process_id Processes.dest Processes.process | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `reg_exe_manipulating_windows_services_registry_keys_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "It is unusual for a service to be created or modified by directly manipulating the registry. However, there may be legitimate instances of this behavior. It is important to validate and investigate, as appropriate.", "references": [], "tags": {"analytic_story": ["Windows Service Abuse", "Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 8"], "confidence": 60, "context": ["source:endpoint", {"stage": "Persistence"}, "Privilege Escalation", "Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1574.011/change_registry_path_service/windows-sysmon.log"], "impact": 75, "kill_chain_phases": ["Installation"], "message": "A reg.exe process $process_name$ with commandline $process$ in host $dest$", "mitre_attack_id": ["T1574.011", "T1574"], "nist": ["PR.IP", "PR.PT", "PR.AC", "PR.AT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.parent_process_name", "Processes.user", "Processes.process", "Processes.process_id", "Processes.dest"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Services Registry Permissions Weakness", "Hijack Execution Flow"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Defense Evasion", "Persistence", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "reg_exe_manipulating_windows_services_registry_keys_filter"}]}, {"name": "Wmiprsve LOLBAS Execution Process Spawn", "id": "95a455f0-4c04-11ec-b8ac-3e22fbd008af", "version": 1, "date": "2021-11-22", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `wmiprsve.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing Windows Management Instrumentation (WMI), the executed command is spawned as a child process of `wmiprvse.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of wmiprvse.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wmiprvse.exe) (Processes.process_name IN (\"Regsvcs.exe\", \"Ftp.exe\", \"OfflineScannerShell.exe\", \"Rasautou.exe\", \"Schtasks.exe\", \"Xwizard.exe\", \"Dllhost.exe\", \"Pnputil.exe\", \"Atbroker.exe\", \"Pcwrun.exe\", \"Ttdinject.exe\",\"Mshta.exe\", \"Bitsadmin.exe\", \"Certoc.exe\", \"Ieexec.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Runscripthelper.exe\", \"Forfiles.exe\", \"Msbuild.exe\", \"Register-cimprovider.exe\", \"Tttracer.exe\", \"Ie4uinit.exe\", \"Bash.exe\", \"Hh.exe\", \"SettingSyncHost.exe\", \"Cmstp.exe\", \"Mmc.exe\", \"Stordiag.exe\", \"Scriptrunner.exe\", \"Odbcconf.exe\", \"Extexport.exe\", \"Msdt.exe\", \"WorkFolders.exe\", \"Diskshadow.exe\", \"Mavinject.exe\", \"Regasm.exe\", \"Gpscript.exe\", \"Rundll32.exe\", \"Regsvr32.exe\", \"Msiexec.exe\", \"Wuauclt.exe\", \"Presentationhost.exe\", \"Wmic.exe\", \"Runonce.exe\", \"Syncappvpublishingserver.exe\", \"Verclsid.exe\", \"Infdefaultinstall.exe\", \"Explorer.exe\", \"Installutil.exe\", \"Netsh.exe\", \"Wab.exe\", \"Dnscmd.exe\", \"At.exe\", \"Pcalua.exe\", \"Msconfig.exe\")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmiprsve_lolbas_execution_process_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may trigger this behavior, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1047/", "https://www.ired.team/offensive-security/lateral-movement/t1047-wmi-for-lateral-movement", "https://lolbas-project.github.io/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/lateral_movement_lolbas/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "Wmiprsve.exe spawned a LOLBAS process on $dest$.", "mitre_attack_id": ["T1047"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmiprsve_lolbas_execution_process_spawn_filter"}]}, {"name": "Detect HTML Help Spawn Child Process", "id": "723716de-ee55-4cd4-9759-c44e7e55ba4b", "version": 1, "date": "2021-02-11", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) that spawns a child process. This particular technique will load Windows script code from a compiled help file. CHM files may contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The \"htm\" and \"html\" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Review child process events and investigate further. hh.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=hh.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_spawn_child_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Although unlikely, some legitimate applications (ex. web browsers) may spawn a child process. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.001/T1218.001.md", "https://lolbas-project.github.io/lolbas/Binaries/Hh/", "https://gist.github.com/mgeeky/cce31c8602a144d8f2172a73d510e0e7", "https://cyberforensicator.com/2019/01/20/silence-dissecting-malicious-chm-files-and-performing-forensic-analysis/"], "tags": {"analytic_story": ["Suspicious Compiled HTML Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ spawning a child process, typically not normal behavior.", "mitre_attack_id": ["T1218", "T1218.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Compiled HTML File"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "Silence", "Lazarus Group", "Dark Caracal", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_html_help_spawn_child_process_filter"}]}, {"name": "Multiple Invalid Users Failing To Authenticate From Host Using Kerberos", "id": "001266a6-9d5b-11eb-829b-acde48001122", "version": 1, "date": "2021-04-14", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies one source endpoint failing to authenticate with multiple invalid domain users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack using an invalid list of users. Event 4768 is generated every time the Key Distribution Center issues a Kerberos Ticket Granting Ticket (TGT). Failure code 0x6 stands for `client not found in Kerberos database` (the attempted user is not a valid domain user).\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will only trigger on domain controllers, not on member servers or workstations.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.", "search": "`wineventlog_security` EventCode=4768 Result_Code=0x6 Account_Name!=\"*$\" | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_invalid_users_failing_to_authenticate_from_host_using_kerberos_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller and Kerberos events. The Advanced Security Audit policy setting `Audit Kerberos Authentication Service` within `Account Logon` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple invalid domain users is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners, multi-user systems and missconfigured systems.", "references": ["https://attack.mitre.org/techniques/T1110/003/"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_invalid_users_kerberos/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential Kerberos based password spraying attack from $Client_Address$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "Client_Address", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Result_Code", "Account_Name", "Client_Address"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_invalid_users_failing_to_authenticate_from_host_using_kerberos_filter"}]}, {"name": "Curl Download and Bash Execution", "id": "900bc324-59f3-11ec-9fb4-acde48001122", "version": 1, "date": "2021-12-10", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of curl on Linux or MacOS attempting to download a file from a remote source and pipe it to bash. This is typically found with coinminers and most recently with CVE-2021-44228, a vulnerability in Log4j.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl (Processes.process=\"*-s *\") OR (Processes.process=\"*|*\" AND Processes.process=\"*bash*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `curl_download_and_bash_execution_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon for Linux, you will need to ensure mapping is occurring correctly. If the EDR is not parsing the pipe bash in the command-line, modifying the analytic will be required. Add parent process name (Processes.parent_process_name) as needed to filter.", "known_false_positives": "False positives should be limited, however filtering may be required.", "references": ["https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java", "https://www.lunasec.io/docs/blog/log4j-zero-day/", "https://gist.github.com/nathanqthai/01808c569903f41a52e7e7b575caa890"], "tags": {"analytic_story": ["Ingress Tool Transfer", "Log4Shell CVE-2021-44228"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/linux-sysmon_curlwget.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $process_name$ was identified on endpoint $dest$ attempting to download a remote file and run it with bash.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "curl_download_and_bash_execution_filter"}]}, {"name": "Short Lived Windows Accounts", "id": "b25f6f62-0782-43c1-b403-083231ffd97d", "version": 2, "date": "2020-07-06", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Change"], "description": "This search detects accounts that were created and deleted in a short time period.", "search": "| tstats `security_content_summariesonly` values(All_Changes.result_id) as result_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Change where All_Changes.result_id=4720 OR All_Changes.result_id=4726 by _time span=4h All_Changes.user All_Changes.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(\"All_Changes\")` | search result_id = 4720 result_id=4726 | transaction user connected=false maxspan=240m | table firstTime lastTime count user dest result_id | `short_lived_windows_accounts_filter`", "how_to_implement": "This search requires you to have enabled your Group Management Audit Logs in your Local Windows Security Policy and be ingesting those logs.  More information on how to enable them can be found here: http://whatevernetworks.com/auditing-group-membership-changes-in-active-directory/", "known_false_positives": "It is possible that an administrator created and deleted an account in a short time period.  Verifying activity with an administrator is advised.", "references": [], "tags": {"analytic_story": ["Account Monitoring and Controls"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 90, "context": ["source:endpoint", {"stage": "Persistence"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-sysmon.log"], "impact": 70, "message": "A user account created or delete shortly in host $dest$", "mitre_attack_id": ["T1136.001", "T1136"], "nist": ["PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.result_id", "All_Changes.user", "All_Changes.dest"], "risk_score": 63, "security_domain": "access", "mitre_attack_technique": ["Local Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["APT39", "APT41", "Dragonfly 2.0", "Leafminer", "APT3", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "short_lived_windows_accounts_filter"}]}, {"name": "Suspicious MSBuild Spawn", "id": "a115fba6-5514-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies wmiprvse.exe spawning msbuild.exe. This behavior is indicative of a COM object being utilized to spawn msbuild from wmiprvse.exe. It is common for MSBuild.exe to be spawned from devenv.exe while using Visual Studio. In this instance, there will be command line arguments and file paths. In a malicious instance, MSBuild.exe will spawn from non-standard processes and have no command line arguments. For example, MSBuild.exe spawning from explorer.exe, powershell.exe is far less common and should be investigated.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=wmiprvse.exe AND `process_msbuild` by Processes.dest Processes.parent_process Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_msbuild_spawn_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may exhibit this behavior, triggering a false positive.", "references": ["https://lolbas-project.github.io/lolbas/Binaries/Msbuild/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1127.001/T1127.001.md"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution MSBuild"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Defense Evasion", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127.001/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious msbuild.exe process executed on $dest$ by $user$", "mitre_attack_id": ["T1127", "T1127.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Trusted Developer Utilities Proxy Execution", "MSBuild"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Frankenstein"]}, "macros": [{"definition": "(Processes.process_name=msbuild.exe OR Processes.original_file_name=MSBuild.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_msbuild"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_msbuild_spawn_filter"}]}, {"name": "SilentCleanup UAC Bypass", "id": "56d7cfcc-da63-11eb-92d4-acde48001122", "version": 1, "date": "2021-07-01", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious modification of registry that may related to UAC bypassed. This registry will be trigger once the attacker abuse the silentcleanup task schedule to gain high privilege execution that will bypass User control account.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\Environment\\\\windir\" Registry.registry_value_name = \"*.exe*\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `silentcleanup_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://github.com/hfiref0x/UACME", "https://www.intezer.com/blog/malware-analysis/klingon-rat-holding-on-for-dear-life/"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/uac_bypass/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious modification of registry $registry_path$ with possible payload path $registry_value_name$ in $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "silentcleanup_uac_bypass_filter"}]}, {"name": "Rundll32 Process Creating Exe Dll Files", "id": "6338266a-ee2a-11eb-bf68-acde48001122", "version": 1, "date": "2021-07-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious rundll32 process that drops executable (.exe or .dll) files. this behavior seen in rundll32 process of IcedID that tries to drop copy of itself in temp folder or download executable drop it either appdata or programdata as part of its execution.", "search": "`sysmon` EventCode=11 process_name=\"rundll32.exe\" TargetFilename IN (\"*.exe\", \"*.dll\",) | stats count min(_time) as firstTime max(_time) as lastTime by Image TargetFilename ProcessGuid dest user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_process_creating_exe_dll_files_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, TargetFilename, and eventcode 11 executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "unknown", "references": ["https://any.run/malware-trends/icedid"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "rundll32 process $process_name$ drops a file $TargetFilename$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "TargetFilename", "ProcessGuid", "dest", "user_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_process_creating_exe_dll_files_filter"}]}, {"name": "Windows InstallUtil Credential Theft", "id": "ccfeddec-43ec-11ec-b494-acde48001122", "version": 1, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Windows InstallUtil.exe binary loading `vaultcli.dll` and Samlib.dll`. This technique may be used to execute code to bypassing application control and capture credentials by utilizing a tool like MimiKatz. \\\nWhen `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \\\nIf used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \\\nDuring triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.", "search": "`sysmon` EventCode=7  process_name=installutil.exe ImageLoaded IN (\"*\\\\samlib.dll\", \"*\\\\vaultcli.dll\") | stats count min(_time) as firstTime max(_time) as lastTime by Computer, process_name, ImageLoaded, OriginalFileName, process_id | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_credential_theft_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and module loads from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Typically this will not trigger as by it's very nature InstallUtil does not need credentials. Filter as needed.", "references": ["https://gist.github.com/xorrior/bbac3919ca2aef8d924bdf3b16cce3d0"], "tags": {"analytic_story": ["Signed Binary Proxy Execution InstallUtil"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.004/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ loading samlib.dll and vaultcli.dll to potentially capture credentials in memory.", "mitre_attack_id": ["T1218.004", "T1218"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["InstallUtil", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_installutil_credential_theft_filter"}]}, {"name": "Get ADDefaultDomainPasswordPolicy with Powershell", "id": "36e46ebe-065a-11ec-b4c7-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` executing the Get-ADDefaultDomainPasswordPolicy commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*Get-ADDefaultDomainPasswordPolicy*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_addefaultdomainpasswordpolicy_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://attack.mitre.org/techniques/T1201/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1201"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_addefaultdomainpasswordpolicy_with_powershell_filter"}]}, {"name": "Excessive number of taskhost processes", "id": "f443dac2-c7cf-11eb-ab51-acde48001122", "version": 1, "date": "2021-06-07", "author": "Michael Hart", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This detection targets behaviors observed in post exploit kits like Meterpreter and Koadic that are run in memory.  We have observed that these tools must invoke an excessive number of taskhost.exe and taskhostex.exe processes to complete various actions (discovery, lateral movement, etc.).  It is extremely uncommon in the course of normal operations to see so many distinct taskhost and taskhostex processes running concurrently in a short time frame.", "search": "| tstats `security_content_summariesonly` values(Processes.process_id) as process_ids  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name = \"taskhost.exe\" OR Processes.process_name = \"taskhostex.exe\" BY Processes.dest Processes.process_name _time span=1h | `drop_dm_object_name(Processes)` | eval pid_count=mvcount(process_ids) | eval taskhost_count_=if(process_name == \"taskhost.exe\", pid_count, 0) | eval taskhostex_count_=if(process_name == \"taskhostex.exe\", pid_count, 0) | stats sum(taskhost_count_) as taskhost_count, sum(taskhostex_count_) as taskhostex_count by _time, dest, firstTime, lastTime | where taskhost_count > 10 and taskhostex_count > 10 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_number_of_taskhost_processes_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting events related to processes on the endpoints that include the name of the process and process id into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators, administrative actions or certain applications may run many instances of taskhost and taskhostex concurrently.  Filter as needed.", "references": ["https://attack.mitre.org/software/S0250/"], "tags": {"analytic_story": ["Meterpreter"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059/meterpreter/taskhost_processes/logExcessiveTaskHost.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An excessive amount of $process_name$ was executed on $dest$ indicative of suspicious behavior.", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_id", "Processes.process_name", "Processes.dest", "Processes.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_number_of_taskhost_processes_filter"}]}, {"name": "Windows InstallUtil URL in Command Line", "id": "28e06670-43df-11ec-a569-acde48001122", "version": 1, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Windows InstallUtil.exe binary passing a HTTP request on the command-line. This technique may be used to download and execute code while bypassing application control. \\\nWhen `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \\\nIf used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \\\nDuring triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (\"*http://*\",\"*https://*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_url_in_command_line_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present as InstallUtil is not typically used to download remote files. Filter as needed based on Developers requirements.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md", "https://gist.github.com/DanielRTeixeira/0fd06ec8f041f34a32bf5623c6dd479d"], "tags": {"analytic_story": ["Signed Binary Proxy Execution InstallUtil"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.004/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ passing a URL on the command-line.", "mitre_attack_id": ["T1218.004", "T1218"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["InstallUtil", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=installutil.exe OR Processes.original_file_name=InstallUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_installutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_installutil_url_in_command_line_filter"}]}, {"name": "Suspicious WAV file in Appdata Folder", "id": "5be109e6-1ac5-11ec-b421-acde48001122", "version": 1, "date": "2021-09-21", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious creation of .wav file in appdata folder. This behavior was seen in Remcos RAT malware where it put the audio recording in the appdata\\audio folde as part of data collection. this recording can be send to its C2 server as part of its exfiltration to the compromised machine. creation of wav files in this folder path is not a ussual disk place used by user to save audio format file.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*.exe Processes.process_path=\"*\\\\appdata\\\\Roaming\\\\*\" by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*.wav\") Filesystem.file_path = \"*\\\\appdata\\\\Roaming\\\\*\" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields file_name file_path process_name process_path process dest file_create_time _time ] | `suspicious_wav_file_in_appdata_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, file_name, file_path and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://success.trendmicro.com/solution/1123281-remcos-malware-information", "https://blog.malwarebytes.com/threat-intelligence/2021/07/remcos-rat-delivered-via-visual-basic/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_agent/sysmon_wav.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "process $process_name$ creating image file $file_path$ in $dest$", "mitre_attack_id": ["T1113"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "file_create_time", "file_name", "file_path", "process_name", "process_path", "process"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Screen Capture"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["Gamaredon Group", "APT39", "Silence", "MuddyWater", "Dragonfly 2.0", "OilRig", "Dark Caracal", "FIN7", "BRONZE BUTLER", "Magic Hound", "Group5", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_wav_file_in_appdata_folder_filter"}]}, {"name": "Multiple Users Failing To Authenticate From Host Using Kerberos", "id": "3a91a212-98a9-11eb-b86a-acde48001122", "version": 1, "date": "2021-04-08", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies one source endpoint failing to authenticate with multiple valid users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. Event 4771 is generated when the Key Distribution Center fails to issue a Kerberos Ticket Granting Ticket (TGT). Failure code 0x18 stands for `wrong password provided` (the attempted user is a legitimate domain user).\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will only trigger on domain controllers, not on member servers or workstations.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.", "search": "`wineventlog_security` EventCode=4771 Failure_Code=0x18 Account_Name!=\"*$\" | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_host_using_kerberos_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller and Kerberos events. The Advanced Security Audit policy setting `Audit Kerberos Authentication Service` within `Account Logon` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple valid domain users is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners, missconfigured systems and multi-user systems like Citrix farms.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn319109(v=ws.11)", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4771"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_valid_users_kerberos/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential Kerberos based password spraying attack from $Client_Address$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "Client_Address", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Result_Code", "Account_Name", "Client_Address"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_users_failing_to_authenticate_from_host_using_kerberos_filter"}]}, {"name": "Office Application Spawn rundll32 process", "id": "958751e4-9c5f-11eb-b103-acde48001122", "version": 2, "date": "2021-04-13", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this detection was designed to identifies suspicious spawned process of known MS office application due to macro or malicious code. this technique can be seen in so many malware like trickbot that used MS office as its weapon or attack vector to initially infect the machines.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = \"winword.exe\" OR Processes.parent_process_name = \"excel.exe\" OR Processes.parent_process_name = \"powerpnt.exe\") AND `process_rundll32` by Processes.parent_process Processes.process_name Processes.process_id Processes.process_guid Processes.process Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_application_spawn_rundll32_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://any.run/malware-trends/trickbot", "https://any.run/report/47561b4e949041eff0a0f4693c59c81726591779fe21183ae9185b5eb6a69847/aba3722a-b373-4dae-8273-8730fb40cdbe"], "tags": {"analytic_story": ["Spearphishing Attachments", "Trickbot", "IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/datasets/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Office application spawning rundll32.exe on $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_application_spawn_rundll32_process_filter"}]}, {"name": "Time Provider Persistence Registry", "id": "5ba382c4-2105-11ec-8d8f-acde48001122", "version": 1, "date": "2021-09-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspiciouos modification of time provider registry for persistence and autostart. This technique can allow the attacker to persist on the compromised host and autostart as soon as the machine boot up. This TTP can be a good indicator of suspicious behavior since this registry is not commonly modified by normal user or even an admin.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =\"*\\\\CurrentControlSet\\\\Services\\\\W32Time\\\\TimeProviders*\" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `time_provider_persistence_registry_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://pentestlab.blog/2019/10/22/persistence-time-providers/", "https://attack.mitre.org/techniques/T1547/003/"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.003/timeprovider_reg/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1547.003", "T1547"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Time Providers", "Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "time_provider_persistence_registry_filter"}]}, {"name": "Wmic NonInteractive App Uninstallation", "id": "bff0e7a0-317f-11ec-ab4e-acde48001122", "version": 1, "date": "2021-10-20", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious wmic commandlined that uninstall application non interactively. This technique was seen in IceID to uninstall av products to the compromised host to bypassed and evade detections. This Hunting query maybe a good indicator that some process tries to uninstall application using wmic which is not a common behavior. This approach may seen in some script or third part appication to uninstall their application but it is a good thing to check what it uninstall and why.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wmic.exe Processes.process=\"* product *\" Processes.process=\"*where name*\" Processes.process=\"*call uninstall*\" Processes.process=\"*/nointeractive*\" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmic_noninteractive_app_uninstallation_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "third party application may use this approach to uninstall there application", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon2.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "wmic $process$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmic_noninteractive_app_uninstallation_filter"}]}, {"name": "Disabling CMD Application", "id": "ff86077c-9212-11eb-a1e6-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to identify modification in registry to disable cmd prompt application. This technique is commonly seen in RAT, Trojan or WORM to prevent triaging or deleting there samples through cmd application which is one of the tool of analyst to traverse on directory and files.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\DisableCMD\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disabling_cmd_application_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows command prompt was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_cmd_application_filter"}]}, {"name": "Excessive Number of Office Files Copied", "id": "3c6594a9-8df6-45a1-9357-d73b62083c63", "version": 1, "date": "2021-12-07", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Filesystem"], "description": "This detection detects a high amount of office file copied. This can be an indicator for a malicious insider.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval action=ucast(map_get(input_event, \"action\"), \"string\", null), process=ucast(map_get(input_event, \"process\"), \"string\", null), file_name=ucast(map_get(input_event, \"file_name\"), \"string\", null), file_path=ucast(map_get(input_event, \"file_path\"), \"string\", null), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null) | where \"Endpoint_Filesystem\" IN(_datamodels) | where action=\"created\" | where like(file_name, \"%.doc%\") OR like(file_name, \"%.xls%\") OR like(file_name, \"%.ppt%\") | stats count(file_name) AS count BY dest_user_id, dest_device_id, span(timestamp, 10m) | where count > 20 | eval start_time=window_start, end_time=window_end, entities=mvappend(dest_user_id, dest_device_id), body=create_map([\"count\", count]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesytem` node.", "known_false_positives": "user may copy a lot of office fies from one folder to another", "references": [], "tags": {"analytic_story": [], "confidence": 80, "context": ["Source:Endpoint", "Stage:Exfitration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/mass_file_creation/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "High number of files copied", "mitre_attack_id": ["T1048.003"], "product": ["Splunk Behavioral Analytics"], "required_fields": ["action", "process", "file_name", "file_path"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_number_of_office_files_copied_filter"}]}, {"name": "Disable Defender Submit Samples Consent Feature", "id": "73922ff8-3022-11ec-bf5e-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "his analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the submit samples feature for further analysis..", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\Microsoft\\\\Windows Defender\\\\SpyNet*\" Registry.registry_value_name = SubmitSamplesConsent Registry.registry_value_data = 0x00000000 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_submit_samples_consent_feature_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_submit_samples_consent_feature_filter"}]}, {"name": "Office Product Spawn CMD Process", "id": "b8b19420-e892-11eb-9244-acde48001122", "version": 2, "date": "2021-07-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect a suspicious office product process that spawn cmd child process. This is commonly seen in a ms office product having macro to execute shell command to download or execute malicious lolbin relative to its malicious code. This is seen in trickbot spear phishing doc where it execute shell cmd to run mshta payload.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = \"winword.exe\" OR Processes.parent_process_name= \"excel.exe\" OR Processes.parent_process_name = \"powerpnt.exe\") `process_cmd` by Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest Processes.original_file_name | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_product_spawn_cmd_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "IT or network admin may create an document automation that will run shell script.", "references": ["https://twitter.com/cyb3rops/status/1416050325870587910?s=21"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "executions"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/spear_phish/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "an office product parent process $parent_process_name$ spawn child process $process_name$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.005"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawn_cmd_process_filter"}]}, {"name": "Remote Process Instantiation via WMI", "id": "d25d2c3d-d9d8-40ec-8fdf-e86fe155a3da", "version": 7, "date": "2021-11-12", "author": "Rico Valdez, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies wmic.exe being launched with parameters to spawn a process on a remote system. Red Teams and adversaries alike may abuse WMI and this binary for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` (Processes.process=\"*/node:*\" AND Processes.process=\"*process*\" AND Processes.process=\"*call*\" AND  Processes.process=\"*create*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_wmi_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "The wmic.exe utility is a benign Windows application. It may be used legitimately by Administrators with these parameters for remote system administration, but it's relatively uncommon.", "references": ["https://attack.mitre.org/techniques/T1047/", "https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/create-method-in-class-win32-process"], "tags": {"analytic_story": ["Ransomware", "Suspicious WMI Use", "Active Directory Lateral Movement"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5"], "confidence": 70, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A wmic.exe process $process$ contain process spawn commandline $process$ in host $dest$", "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_wmi_filter"}]}, {"name": "Suspicious Process File Path", "id": "9be25988-ad82-11eb-a14f-acde48001122", "version": 1, "date": "2021-05-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic will detect a suspicious process running in a file path where a process is not commonly seen and is most commonly used by malicious softtware. This behavior has been used by adversaries where they drop and run an exe in a path that is accessible without admin privileges.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_path = \"*\\\\windows\\\\fonts\\\\*\" OR Processes.process_path = \"*\\\\windows\\\\temp\\\\*\" OR Processes.process_path = \"*\\\\users\\\\public\\\\*\" OR Processes.process_path = \"*\\\\windows\\\\debug\\\\*\" OR Processes.process_path.file_path = \"*\\\\Users\\\\Administrator\\\\Music\\\\*\" OR Processes.process_path.file_path = \"*\\\\Windows\\\\servicing\\\\*\" OR Processes.process_path.file_path = \"*\\\\Users\\\\Default\\\\*\" OR Processes.process_path.file_path = \"*Recycle.bin*\" OR Processes.process_path = \"*\\\\Windows\\\\Media\\\\*\" OR Processes.process_path = \"\\\\Windows\\\\repair\\\\*\" OR Processes.process_path = \"*\\\\temp\\\\*\" by Processes.parent_process_name Processes.parent_process Processes.process_path Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_process_file_path_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators may allow execution of specific binaries in non-standard paths. Filter as needed.", "references": ["https://www.trendmicro.com/vinfo/hk/threat-encyclopedia/malware/trojan.ps1.powtran.a/"], "tags": {"analytic_story": ["XMRig", "Remcos"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicioues process $Processes.process_path.file_path$ running from suspicious location", "mitre_attack_id": ["T1543"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_path.file_path", "type": "File Name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_path", "Processes.dest", "Processes.user"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_process_file_path_filter"}]}, {"name": "Cmdline Tool Not Executed In CMD Shell", "id": "6c3f7dd8-153c-11ec-ac2d-acde48001122", "version": 1, "date": "2021-09-14", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies a non-standard parent process (not matching CMD, PowerShell, or Explorer) spawning `ipconfig.exe` or `systeminfo.exe`. This particular behavior was seen in FIN7's JSSLoader .NET payload. This is also typically seen when an adversary is injected into another process performing different discovery techniques. This event stands out as a TTP since these tools are commonly executed with a shell application or Explorer parent, and not by another application. This TTP is a good indicator for an adversary gathering host information, but one possible false positive might be an automated tool used by a system administator.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  (Processes.process_name = \"ipconfig.exe\" OR Processes.process_name = \"systeminfo.exe\") AND NOT (Processes.parent_process_name = \"cmd.exe\" OR Processes.parent_process_name = \"powershell*\" OR Processes.parent_process_name=\"pwsh.exe\" OR Processes.parent_process_name = \"explorer.exe\") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmdline_tool_not_executed_in_cmd_shell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "A network operator or systems administrator may utilize an automated host discovery application that may generate false positives. Filter as needed.", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/"], "tags": {"analytic_story": ["FIN7"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/jssloader/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A non-standard parent process $parent_process_name$ spawned child process $process_name$ to execute command-line tool on $dest$.", "mitre_attack_id": ["T1059", "T1059.007"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "JavaScript/JScript"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT32", "FIN7", "Cobalt Group", "Molerats", "TA505", "Silence", "Leafminer"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cmdline_tool_not_executed_in_cmd_shell_filter"}]}, {"name": "Control Loading from World Writable Directory", "id": "10423ac4-10c9-11ec-8dc4-acde48001122", "version": 1, "date": "2021-09-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies control.exe loading either a .cpl or .inf from a writable directory. This is related to CVE-2021-40444. During triage, review parallel processes, parent and child, for further suspicious behaviors. In addition, capture file modifications and analyze.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=control.exe OR Processes.original_file_name=CONTROL.EXE) AND Processes.process IN (\"*\\\\appdata\\\\*\", \"*\\\\windows\\\\temp\\\\*\", \"*\\\\programdata\\\\*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `control_loading_from_world_writable_directory_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives will be present as control.exe does not natively load from writable paths as defined. One may add .cpl or .inf to the command-line if there is any false positives. Tune as needed.", "references": ["https://strontic.github.io/xcyclopedia/library/rundll32.exe-111474C61232202B5B588D2B512CBB25.html", "https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://attack.mitre.org/techniques/T1218/011/", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.002/T1218.002.yaml"], "tags": {"analytic_story": ["Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.002/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to load a suspicious file from disk.", "mitre_attack_id": ["T1218", "T1218.002"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Control Panel"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "control_loading_from_world_writable_directory_filter"}]}, {"name": "Excessive Usage Of Taskkill", "id": "fe5bca48-accb-11eb-a67c-acde48001122", "version": 1, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic identifies excessive usage of `taskkill.exe` application. This application is commonly used by adversaries to evade detections by killing security product processes or even other processes to evade detection.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"taskkill.exe\"  by Processes.parent_process_name Processes.process_name Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_taskkill_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed taskkill.exe may be used.", "known_false_positives": "Unknown. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Excessive usage  of taskkill.exe with process id $process_id$ (more than 10 within 1m) has been detected on $dest$ with a parent process of $parent_process_name$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Process Name", "role": ["Parent Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.dest", "Processes.user", "Processes.process", "Processes.process_id"], "risk_score": 28, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_usage_of_taskkill_filter"}]}, {"name": "Windows Service Creation on Remote Endpoint", "id": "e0eea4fa-4274-11ec-882b-3e22fbd008af", "version": 1, "date": "2021-11-10", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `sc.exe` with command-line arguments utilized to create a Windows Service on a remote endpoint. Red Teams and adversaries alike may abuse the Service Control Manager for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sc.exe OR Processes.original_file_name=sc.exe) (Processes.process=*\\\\\\\\* AND Processes.process=*create* AND Processes.process=*binpath*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_service_creation_on_remote_endpoint_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may create Windows Services on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager", "https://docs.microsoft.com/en-us/windows/win32/services/controlling-a-service-using-sc", "https://attack.mitre.org/techniques/T1543/003/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A Windows Service was created on a remote endpoint from $dest", "mitre_attack_id": ["T1543", "T1543.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_service_creation_on_remote_endpoint_filter"}]}, {"name": "XSL Script Execution With WMIC", "id": "004e32e2-146d-11ec-a83f-acde48001122", "version": 1, "date": "2021-09-13", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious wmic.exe process or renamed wmic process to execute malicious xsl file. This technique was seen in FIN7 to execute its malicous jscript using the .xsl as the loader with the help of wmic.exe process. This TTP is really a good indicator for you to hunt further for FIN7 or other attacker that known to used this technique.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process = \"*os get*\" Processes.process=\"*/format:*\" Processes.process = \"*.xsl*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `xsl_script_execution_with_wmic_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/", "https://web.archive.org/web/20190814201250/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1220/T1220.md#atomic-test-3---wmic-bypass-using-local-xsl-file"], "tags": {"analytic_story": ["FIN7", "Suspicious WMI Use"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_macro_js_1/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ utilizing wmic to load a XSL script.", "mitre_attack_id": ["T1220"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process_id", "Processes.process", "Processes.dest", "Processes.user"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["XSL Script Processing"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Cobalt Group"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "xsl_script_execution_with_wmic_filter"}]}, {"name": "GetDomainController with PowerShell Script Block", "id": "676b600a-a94d-4951-b346-11329431e6c1", "version": 1, "date": "2021-09-02", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainController` commandlet. `Get-DomainController` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain computers for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-DomainController*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getdomaincontroller_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainController/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery with PowerView on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaincontroller_with_powershell_script_block_filter"}]}, {"name": "Windows Service Created Within Public Path", "id": "3abb2eda-4bb8-11ec-9ae4-3e22fbd008af", "version": 1, "date": "2021-11-22", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytc uses Windows Event Id 7045, `New Service Was Installed`, to identify the creation of a Windows Service where the service binary path is located in public paths. This behavior could represent the installation of a malicious service. Red Teams and adversaries alike may create malicious Services for lateral movement or remote code execution", "search": "`wineventlog_system` EventCode=7045  Service_File_Name = \"*\\.exe\" NOT (Service_File_Name IN (\"C:\\\\Windows\\\\*\", \"C:\\\\Program File*\", \"C:\\\\Programdata\\\\*\", \"%systemroot%\\\\*\")) | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_created_within_public_path_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Service name, Service File Name Service Start type, and Service Type from your endpoints.", "known_false_positives": "Legitimate applications may install services with uncommon services paths.", "references": ["https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager", "https://pentestlab.blog/2020/07/21/lateral-movement-services/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/lateral_movement_suspicious_path/windows-system.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A Windows Service $Service_File_Name$ with a public path was created on $ComputerName", "mitre_attack_id": ["T1543", "T1543.003"], "observable": [{"name": "Service_File_Name", "type": "Other", "role": ["Other"]}, {"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "Service_File_Name", "Service_Type", "_time", "Service_Name", "Service_Start_Type"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_service_created_within_public_path_filter"}]}, {"name": "Add DefaultUser And Password In Registry", "id": "d4a3eb62-0f1e-11ec-a971-acde48001122", "version": 1, "date": "2021-09-06", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "this search is to detect a suspicious registry modification to implement auto admin logon to a host. This technique was seen in BlackMatter ransomware to automatically logon to the compromise host after  triggering a safemode boot to continue encrypting the whole network. This behavior is not a common practice and really a suspicious TTP or alert need to be consider if found within then network premise.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon*\" AND Registry.registry_value_name= DefaultPassword OR Registry.registry_value_name= DefaultUserName by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `add_defaultuser_and_password_in_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://news.sophos.com/en-us/2021/08/09/blackmatter-ransomware-emerges-from-the-shadow-of-darkside/"], "tags": {"analytic_story": ["BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1552.002/autoadminlogon/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "modified registry key $registry_key_name$ with registry value $registry_value_name$ to prepare autoadminlogon", "mitre_attack_id": ["T1552.002", "T1552"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Credentials in Registry", "Unsecured Credentials"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT32", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "add_defaultuser_and_password_in_registry_filter"}]}, {"name": "Detect RClone Command-Line Usage", "id": "e8b74268-5454-11ec-a799-acde48001122", "version": 1, "date": "2021-12-03", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This analytic identifies commonly used command-line arguments used by `rclone.exe` to initiate a file transfer. Some arguments were negated as they are specific to the configuration used by adversaries. In particular, an adversary may list the files or directories of the remote file share using `ls` or `lsd`, which is not indicative of malicious behavior. During triage, at this stage of a ransomware event, exfiltration is about to occur or has already. Isolate the endpoint and continue investigating by review file modifications and parallel processes.", "search": "| from read_ssa_enriched_events() | where \"Endpoint_Processes\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"rclone.exe\" AND (like (cmd_line, \"%copy%\") OR like (cmd_line, \"%mega%\")OR like (cmd_line, \"%pcloud%\") OR like (cmd_line, \"%ftp%\") OR like (cmd_line, \"%--config%\") OR like (cmd_line, \"%--progress%\") OR like (cmd_line, \"%--no-check-certificate%\") OR like (cmd_line, \"%--ignore-existing%\") OR like (cmd_line, \"%--auto-confirm%\") OR like (cmd_line, \"%--transfers%\") OR like (cmd_line, \"%--multi-thread-streams%\")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | eval body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint_Processess` datamodel.", "known_false_positives": "False positives should be limited as this is restricted to the Rclone process name. Filter or tune the analytic as needed.", "references": ["https://redcanary.com/blog/rclone-mega-extortion/", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html", "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/", "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/"], "tags": {"analytic_story": ["DarkSide Ransomware", "Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1020/windows-security.log"], "impact": 50, "kill_chain_phases": ["Exfiltration"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to connect to a remote cloud service to move files or folders.", "mitre_attack_id": ["T1020"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Automated Exfiltration"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["Tropic Trooper", "Frankenstein", "Honeybee"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rclone_command_line_usage_filter"}]}, {"name": "Known Services Killed by Ransomware", "id": "3070f8e0-c528-11eb-b2a0-acde48001122", "version": 1, "date": "2021-06-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects a suspicioous termination of known services killed by ransomware before encrypting files in a compromised machine. This technique is commonly seen in most of ransomware now a days to avoid exception error while accessing the targetted files it wants to encrypts because of the open handle of those services to the targetted file.", "search": "`wineventlog_system` EventCode=7036 Message IN (\"*Volume Shadow Copy*\",\"*VSS*\", \"*backup*\", \"*sophos*\", \"*sql*\", \"*memtas*\", \"*mepocs*\", \"*veeam*\", \"*svc$*\") Message=\"*service entered the stopped state*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message dest Type | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `known_services_killed_by_ransomware_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the 7036 EventCode ScManager in System audit Logs from your endpoints.", "known_false_positives": "Admin activities or installing related updates may do a sudden stop to list of services we monitor.", "references": ["https://krebsonsecurity.com/2021/05/a-closer-look-at-the-darkside-ransomware-gang/", "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/"], "tags": {"analytic_story": ["Ransomware", "BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf3/windows-system.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "Known services $Message$ terminated by a potential ransomware on $dest$", "mitre_attack_id": ["T1490"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Message", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "dest", "Type"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "known_services_killed_by_ransomware_filter"}]}, {"name": "Domain Account Discovery with Dsquery", "id": "b1a8ce04-04c2-11ec-bea7-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to discover  domain users. The `user` argument returns a list of all users registered in the domain. Red Teams and adversaries alike engage in remote system discovery for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=\"dsquery.exe\" AND Processes.process = \"*user*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_dsquery_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://jpcertcc.github.io/ToolAnalysisResultSheet/details/dsquery.htm", "https://attack.mitre.org/techniques/T1087/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_account_discovery_with_dsquery_filter"}]}, {"name": "Wermgr Process Create Executable File", "id": "ab3bcce0-a105-11eb-973c-acde48001122", "version": 1, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is designed to detect potential malicious wermgr.exe process that drops or create executable file. Since wermgr.exe is an application trigger when error encountered in a process, it is really un ussual to this process to drop executable file. This technique is commonly seen in trickbot malware where it injects it code to this process to execute it malicious behavior like downloading other payload", "search": "`sysmon` EventCode=11 process_name = \"wermgr.exe\" TargetFilename = \"*.exe\" | stats  min(_time) as firstTime max(_time) as lastTime count by  Image TargetFilename process_name dest EventCode ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_create_executable_file_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances of wermgr.exe may be used.", "known_false_positives": "unknown", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/infection/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Wermgr.exe writing executable files on $dest$", "mitre_attack_id": ["T1027"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "TargetFilename", "process_name", "dest", "EventCode", "ProcessId"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Obfuscated Files or Information"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wermgr_process_create_executable_file_filter"}]}, {"name": "Password Policy Discovery with Net", "id": "09336538-065a-11ec-8665-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` or `net1.exe` with command line arguments used to obtain the domain password policy. Red Teams and adversaries may leverage `net.exe` for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"net.exe\" OR Processes.process_name=\"net1.exe\") AND Processes.process = \"*accounts*\" AND Processes.process = \"*/domain*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `password_policy_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1201"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "password_policy_discovery_with_net_filter"}]}, {"name": "Scheduled Task Creation on Remote Endpoint using At", "id": "4be54858-432f-11ec-8209-3e22fbd008af", "version": 1, "date": "2021-11-11", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `at.exe` with command-line arguments utilized to create a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution. The `at.exe` binary internally leverages the AT protocol which was deprecated starting with Windows 8 and Windows Server 2012 but may still work on previous versions of Windows. Furthermore, attackers may enable this protocol on demand by changing a sytem registry key.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=at.exe OR Processes.original_file_name=at.exe) (Processes.process=*\\\\\\\\*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_creation_on_remote_endpoint_using_at_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may create scheduled tasks on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/at", "https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-scheduledjob?redirectedfrom=MSDN"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.002/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A Windows Scheduled Task was created on a remote endpoint from $dest", "mitre_attack_id": ["T1053", "T1053.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job", "At (Windows)"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "BRONZE BUTLER", "Threat Group-3390", "APT18"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "scheduled_task_creation_on_remote_endpoint_using_at_filter"}]}, {"name": "Java Class File download by Java User Agent", "id": "8281ce42-5c50-11ec-82d2-acde48001122", "version": 1, "date": "2021-12-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "The following analytic identifies a Java user agent performing a GET request for a .class file from the remote site. This is potentially indicative of exploitation of the Java application and may be related to current event CVE-2021-44228 (Log4Shell).", "search": "| tstats count from datamodel=Web where Web.http_user_agent=\"*Java*\" Web.http_method=\"GET\" Web.url=\"*.class*\" by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest | `drop_dm_object_name(\"Web\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `java_class_file_download_by_java_user_agent_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting web or proxy logs, or ensure it is being filled by a proxy like device, into the Web Datamodel. For additional filtering, allow list private IP space or restrict by known good.", "known_false_positives": "Filtering may be required in some instances, filter as needed.", "references": ["https://arstechnica.com/information-technology/2021/12/as-log4shell-wreaks-havoc-payroll-service-reports-ransomware-attack/"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "asset_type": "Web Server", "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:network"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/java/java.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "A Java user agent $http_user_agent$ was performing a $http_method$ to retrieve a remote class file.", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "http_user_agent", "type": "Other", "role": ["other"]}, {"name": "http_method", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.http_method", "Web.url", "Web.url_length", "Web.src", "Web.dest", "Web.http_user_agent"], "risk_score": 40, "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "java_class_file_download_by_java_user_agent_filter"}]}, {"name": "Suspicious Regsvr32 Register Suspicious Path", "id": "62732736-6250-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-28", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code by using non-standard file extensions to load malciious DLLs. Upon investigating, look for network connections to remote destinations (internal or external). Review additional parrallel processes and child processes for additional activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` (Processes.process=*appdata* OR Processes.process=*programdata* OR Processes.process=*windows\\temp*) (Processes.process!=*.dll Processes.process!=*.ax Processes.process!=*.ocx) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_regsvr32_register_suspicious_path_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints, to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model. Tune the query by filtering additional extensions found to be used by  legitimate processes. To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives with the query restricted to specified paths. Add more world writeable paths as tuning continues.", "references": ["https://attack.mitre.org/techniques/T1218/010/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/T1218.010.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/", "https://support.microsoft.com/en-us/topic/how-to-use-the-regsvr32-tool-and-troubleshoot-regsvr32-error-messages-a98d960a-7392-e6fe-d90a-3f4e0cb543e5", "https://any.run/report/f29a7d2ecd3585e1e4208e44bcc7156ab5388725f1d29d03e7699da0d4598e7c/0826458b-5367-45cf-b841-c95a33a01718"], "tags": {"analytic_story": ["Suspicious Regsvr32 Activity", "Iceid"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.010/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Suspicious $Processes.process_path.file_path$ process potentially loading malicious code", "mitre_attack_id": ["T1218", "T1218.010"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_path.file_path", "type": "File Name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvr32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Blue Mockingbird", "Inception", "WIRTE", "Cobalt Group", "APT19", "Leviathan", "APT32", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_regsvr32_register_suspicious_path_filter"}]}, {"name": "Overwriting Accessibility Binaries", "id": "13c2f6c3-10c5-4deb-9ba1-7c4460ebe4ae", "version": 4, "date": "2020-07-21", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Microsoft Windows contains accessibility features that can be launched with a key combination before a user has logged in. An adversary can modify or replace these programs so they can get a command prompt or backdoor without logging in to the system. This search looks for modifications to these binaries.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem where (Filesystem.file_path=*\\\\Windows\\\\System32\\\\sethc.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\utilman.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\osk.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\Magnify.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\Narrator.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\DisplaySwitch.exe* OR Filesystem.file_path=*\\\\Windows\\\\System32\\\\AtBroker.exe*) by Filesystem.file_name Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `overwriting_accessibility_binaries_filter`", "how_to_implement": "You must be ingesting data that records the filesystem activity from your hosts to populate the Endpoint file-system data model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "Microsoft may provide updates to these binaries. Verify that these changes do not correspond with your normal software update cycle.", "references": [], "tags": {"analytic_story": ["Windows Privilege Escalation"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["source:endpoint", {"stage": "privilege escalation"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.008/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "A suspicious file modification or replace in $file_path$  in host $dest$", "mitre_attack_id": ["T1546", "T1546.008"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_path", "type": "file_path", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.dest", "Filesystem.file_path", "Filesystem.file_name", "Filesystem.dest"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Event Triggered Execution", "Accessibility Features"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["no", "APT41", "APT3", "APT29", "Deep Panda", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "overwriting_accessibility_binaries_filter"}]}, {"name": "BITS Job Persistence", "id": "e97a5ffe-90bf-11eb-928a-acde48001122", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` scheduling a BITS job to persist on an endpoint. The query identifies the parameters used to create, resume or add a file to a BITS job. Typically seen combined in a oneliner or ran in sequence. If identified, review the BITS job created and capture any files written to disk. It is possible for BITS to be used to upload files and this may require further network data analysis to identify. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_bitsadmin` Processes.process IN (*create*, *addfile*, *setnotifyflags*, *setnotifycmdline*, *setminretrydelay*, *setcustomheaders*, *resume* ) by Processes.dest Processes.user Processes.original_file_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bits_job_persistence_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives will be present. Typically, applications will use `BitsAdmin.exe`. Any filtering should be done based on command-line arguments (legitimate applications) or parent process.", "references": ["https://attack.mitre.org/techniques/T1197/", "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/bitsadmin", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1197/T1197.md#atomic-test-3---persist-download--execute", "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/"], "tags": {"analytic_story": ["BITS Jobs"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1197/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to persist using BITS.", "mitre_attack_id": ["T1197"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["BITS Jobs"], "mitre_attack_tactics": ["Defense Evasion", "Persistence"], "mitre_attack_groups": ["Patchwork", "APT41", "Leviathan"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=bitsadmin.exe OR Processes.original_file_name=bitsadmin.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_bitsadmin"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "bits_job_persistence_filter"}]}, {"name": "Set Default PowerShell Execution Policy To Unrestricted or Bypass", "id": "c2590137-0b08-4985-9ec5-6ae23d92f63d", "version": 6, "date": "2020-11-06", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Monitor for changes of the ExecutionPolicy in the registry to the values \"unrestricted\" or \"bypass,\" which allows the execution of malicious scripts.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path=*Software\\\\Microsoft\\\\Powershell\\\\1\\\\ShellIds\\\\Microsoft.PowerShell* Registry.registry_key_name=ExecutionPolicy (Registry.registry_value_name=Unrestricted OR Registry.registry_value_name=Bypass) by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `set_default_powershell_execution_policy_to_unrestricted_or_bypass_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Registry node. You must also be ingesting logs with the fields registry_path, registry_key_name, and registry_value_name from your endpoints.", "known_false_positives": "Administrators may attempt to change the default execution policy on a system for a variety of reasons. However, setting the policy to \"unrestricted\" or \"bypass\" as this search is designed to identify, would be unusual. Hits should be reviewed and investigated as appropriate.", "references": [], "tags": {"analytic_story": ["Malicious PowerShell", "Credential Dumping", "HAFNIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 8"], "confidence": 80, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_execution_policy/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Installation", "Actions on Objectives"], "message": "A registry modification in $registry_path$ with reg key $registry_key_name$ and reg value $registry_value_name$ in host $dest$", "mitre_attack_id": ["T1059", "T1059.001"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "registry_path", "type": "RegistryPath", "role": ["Others"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 48, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "set_default_powershell_execution_policy_to_unrestricted_or_bypass_filter"}]}, {"name": "Disabling SystemRestore In Registry", "id": "f4f837e2-91fb-11eb-8bf6-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following search identifies the modification of registry related in disabling the system restore of a machine. This event or behavior are seen in some RAT malware to make the restore of the infected machine  difficult and keep their infection on the box.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SystemRestore\\\\DisableSR\" OR Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SystemRestore\\\\DisableConfig\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disabling_systemrestore_in_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "in some cases admin can disable systemrestore on a machine.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "The Windows registry was modified to disable system restore on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_systemrestore_in_registry_filter"}]}, {"name": "Wmic Group Discovery", "id": "83317b08-155b-11ec-8e00-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic identifies the use of `wmic.exe` enumerating local groups on the endpoint. \\\nTypically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \\\nDuring triage, review parallel processes and identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wmic.exe (Processes.process=\"*group get name*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `wmic_group_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local group discovery on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmic_group_discovery_filter"}]}, {"name": "Script Execution via WMI", "id": "aa73f80d-d728-4077-b226-81ea0c8be589", "version": 4, "date": "2020-03-16", "author": "Rico Valdez, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for scripts launched via WMI.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=scrcons.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `script_execution_via_wmi_filter` ", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Although unlikely, administrators may use wmi to launch scripts for legitimate purposes. Filter as needed.", "references": ["https://redcanary.com/blog/child-processes/"], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5"], "confidence": 60, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/execution_scrcons/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "A wmic.exe process $process_name$ taht execute script in host $dest$", "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.user", "Processes.dest"], "risk_score": 36, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "script_execution_via_wmi_filter"}]}, {"name": "Detect New Local Admin account", "id": "b25f6f62-0712-43c1-b203-083231ffd97d", "version": 2, "date": "2020-07-08", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for newly created accounts that have been elevated to local administrators.", "search": "`wineventlog_security` EventCode=4720 OR (EventCode=4732 Group_Name=Administrators) | transaction member_id connected=false maxspan=180m | rename member_id as user | stats count min(_time) as firstTime max(_time) as lastTime by user dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_local_admin_account_filter`", "how_to_implement": "You must be ingesting Windows event logs using the Splunk Windows TA and collecting event code 4720 and 4732", "known_false_positives": "The activity may be legitimate. For this reason, it's best to verify the account with an administrator and ask whether there was a valid service request for the account creation. If your local administrator group name is not \"Administrators\", this search may generate an excessive number of false positives", "references": [], "tags": {"analytic_story": ["DHS Report TA18-074A", "HAFNIUM Group"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Actions on Objectives", "Command and Control"], "message": "A $user$ on $dest$ was added recently. Identify if this was legitimate behavior or not.", "mitre_attack_id": ["T1136.001", "T1136"], "nist": ["PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Group_Name", "member_id", "dest", "user"], "risk_score": 42, "security_domain": "access", "mitre_attack_technique": ["Local Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["APT39", "APT41", "Dragonfly 2.0", "Leafminer", "APT3", "no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_new_local_admin_account_filter"}]}, {"name": "Office Document Creating Schedule Task", "id": "cc8b7b74-9d0f-11eb-8342-acde48001122", "version": 1, "date": "2021-04-14", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search detects a potential malicious office document that create schedule task entry through macro VBA api or through loading taskschd.dll. This technique was seen in so many malicious macro malware that create persistence , beaconing using task schedule malware entry The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it's possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'", "search": "`sysmon` EventCode=7 process_name IN (\"WINWORD.EXE\", \"EXCEL.EXE\", \"POWERPNT.EXE\") ImageLoaded = \"*\\\\taskschd.dll\" | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) as AllImageLoaded count by Computer EventCode Image process_name ProcessId ProcessGuid | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_creating_schedule_task_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and ImageLoaded (Like sysmon EventCode 7) from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Also be sure to include those monitored dll to your own sysmon config.", "known_false_positives": "unknown", "references": ["https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/", "https://redcanary.com/threat-detection-report/techniques/scheduled-task-job/"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/datasets/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Office document creating a schedule task on $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["ImageLoaded", "AllImageLoaded", "Computer", "EventCode", "Image", "process_name", "ProcessId", "ProcessGuid", "_time"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_document_creating_schedule_task_filter"}]}, {"name": "Detect AzureHound Command-Line Arguments", "id": "26f02e96-c300-11eb-b611-acde48001122", "version": 1, "date": "2021-06-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the common command-line argument used by AzureHound `Invoke-AzureHound`. Being the script is FOSS, function names may be modified, but these changes are dependent upon the operator. In most instances the defaults are used. This analytic works to identify the common command-line attributes used. It does not cover the entirety of every argument in order to avoid false positives.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (\"*invoke-azurehound*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_azurehound_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Unknown.", "references": ["https://attack.mitre.org/software/S0521/", "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "https://posts.specterops.io/introducing-bloodhound-4-0-the-azure-update-9b2b26c5e350", "https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/AzureHound.ps1"], "tags": {"analytic_story": ["Discovery Techniques"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/sharphound/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Reconnaissance"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ using AzureHound to enumerate AzureAD.", "mitre_attack_id": ["T1087.002", "T1069.001", "T1482", "T1087.001", "T1087", "T1069.002", "T1069"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Local Groups", "Domain Trust Discovery", "Local Account", "Account Discovery", "Domain Groups", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "Turla", "OilRig", "admin@338", "Wizard Spider", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338", "no", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang", "TA505", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_azurehound_command_line_arguments_filter"}]}, {"name": "GetLocalUser with PowerShell", "id": "85fae8fa-0427-11ec-8b78-acde48001122", "version": 1, "date": "2021-08-23", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for local users. The `Get-LocalUser` commandlet is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-LocalUser*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getlocaluser_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getlocaluser_with_powershell_filter"}]}, {"name": "Scheduled Task Deleted Or Created via CMD", "id": "d5af132c-7c17-439c-9d31-13d55340f36c", "version": 5, "date": "2020-12-17", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for flags passed to schtasks.exe on the command-line that indicate a task was created via command like. This has been associated with the Dragonfly threat actor, and the SUNBURST attack against Solarwinds.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process=*delete* OR Processes.process=*create*) by Processes.user Processes.process_name Processes.parent_process_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_deleted_or_created_via_cmd_filter` ", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Tasks should not be manually created via CLI, this is rarely done by admins as well", "references": [], "tags": {"analytic_story": ["DHS Report TA18-074A", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3"], "confidence": 80, "context": ["source:endpoint", {"stage": "Execution"}, "Persistence", "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A schedule task process $process_name$ with create or delete commandline $process$ in host $dest$", "mitre_attack_id": ["T1053.005", "T1053"], "nist": ["PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process", "Processes.process_name", "Processes.user", "Processes.parent_process_name", "Processes.dest"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "scheduled_task_deleted_or_created_via_cmd_filter"}]}, {"name": "Execution of File with Multiple Extensions", "id": "b06a555e-dce0-417d-a2eb-28a5d8d66ef7", "version": 3, "date": "2020-11-18", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for processes launched from files that have double extensions in the file name. This is typically done to obscure the \"real\" file extension and make it appear as though the file being accessed is a data file, as opposed to executable content.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = *.doc.exe OR Processes.process = *.htm.exe OR Processes.process = *.html.exe OR Processes.process = *.txt.exe OR Processes.process = *.pdf.exe OR Processes.process = *.doc.exe by Processes.dest Processes.user Processes.process Processes.parent_process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `execution_of_file_with_multiple_extensions_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records process activity from your hosts to populate the endpoint data model in the processes node.", "known_false_positives": "None identified.", "references": [], "tags": {"analytic_story": ["Windows File Extension and Association Abuse", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036.003/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "process $process$ have double extensions in the file name is executed on $dest$ by $user$", "mitre_attack_id": ["T1036", "T1036.003"], "nist": ["DE.CM", "PR.PT", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process", "type": "Process", "role": ["Parent Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading", "Rename System Utilities"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "menuPass", "APT32", "Soft Cell", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "execution_of_file_with_multiple_extensions_filter"}]}, {"name": "WBAdmin Delete System Backups", "id": "71efbf52-4dbb-4c00-a520-306aa546cbb7", "version": 1, "date": "2021-12-07", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This search looks for flags passed to wbadmin.exe (Windows Backup Administrator Tool) that delete backup files. This is typically used by ransomware to prevent recovery.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"wbadmin.exe\" AND like (cmd_line, \"%delete%\") OR like (cmd_line, \"%catalog%\") OR like (cmd_line, \"%systemstatebackup%\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint_Processess` datamodel.", "known_false_positives": "Administrators may modify the boot configuration.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1490/T1490.md", "https://thedfirreport.com/2020/10/08/ryuks-return/", "https://attack.mitre.org/techniques/T1490/", "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin"], "tags": {"analytic_story": ["Ryuk Ransomware", "Ransomware"], "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "stage:Defense Evasion"], "dataset": [], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to delete system backups.", "mitre_attack_id": ["T1490"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 15, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wbadmin_delete_system_backups_filter"}]}, {"name": "Disable Defender MpEngine Registry", "id": "cc391750-3024-11ec-955a-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\MpEngine*\" Registry.registry_value_name = MpEnablePus Registry.registry_value_data = 0x00000000 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_mpengine_registry_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_mpengine_registry_filter"}]}, {"name": "Detect Regsvr32 Application Control Bypass", "id": "070e9b80-6252-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-28", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary.This variation of the technique is often referred to as a \"Squiblydoo\" attack. \\\nUpon investigating, look for network connections to remote destinations (internal or external). Be cautious to modify the query to look for \"scrobj.dll\", the \".dll\" is not required to load scrobj. \"scrobj.dll\" will be loaded by \"regsvr32.exe\" upon execution. ", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` Processes.process=*scrobj* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_regsvr32_application_control_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives related to third party software registering .DLL's.", "references": ["https://attack.mitre.org/techniques/T1218/010/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/T1218.010.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/", "https://support.microsoft.com/en-us/topic/how-to-use-the-regsvr32-tool-and-troubleshoot-regsvr32-error-messages-a98d960a-7392-e6fe-d90a-3f4e0cb543e5"], "tags": {"analytic_story": ["Suspicious Regsvr32 Activity", "Cobalt Strike"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.010/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ in an attempt to bypass detection and preventative controls was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.010"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvr32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Blue Mockingbird", "Inception", "WIRTE", "Cobalt Group", "APT19", "Leviathan", "APT32", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regsvr32_application_control_bypass_filter"}]}, {"name": "Ryuk Test Files Detected", "id": "57d44d70-28d9-4ed1-acf5-1c80ae2bbce3", "version": 1, "date": "2020-11-06", "author": "Rod Soto, Jose Hernandez, Splunk", "type": "TTP", "datamodel": [], "description": "The search looks for files that contain the key word *Ryuk* under any folder in the C drive, which is consistent with Ryuk propagation.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem WHERE \"Filesystem.file_path\"=C:\\\\*Ryuk* BY \"Filesystem.dest\", \"Filesystem.user\", \"Filesystem.file_path\" | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `ryuk_test_files_detected_filter`", "how_to_implement": "You must be ingesting data that records the filesystem activity from your hosts to populate the Endpoint Filesystem data-model object. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "If there are files with this keywoord as file names it might trigger false possitives, please make use of our filters to tune out potential FPs.", "references": [], "tags": {"analytic_story": ["Ryuk Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["source:endpoint", {"stage": "Impact"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ryuk/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Delivery"], "message": "A creation of ryuk test file $file_path$ in host $dest$", "mitre_attack_id": ["T1486"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_path", "Filesystem.dest", "Filesystem.user"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ryuk_test_files_detected_filter"}]}, {"name": "Monitor Registry Keys for Print Monitors", "id": "f5f6af30-7ba7-4295-bfe9-07de87c01bbc", "version": 2, "date": "2020-11-23", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for registry activity associated with modifications to the registry key `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors`. In this scenario, an attacker can load an arbitrary .dll into the print-monitor registry by giving the full path name to the after.dll. The system will execute the .dll with elevated (SYSTEM) permissions and will persist after reboot.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.action=modified AND Registry.registry_path=\"*CurrentControlSet\\\\Control\\\\Print\\\\Monitors*\" by Registry.dest, Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_name Registry.action | `drop_dm_object_name(Registry)` | `monitor_registry_keys_for_print_monitors_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or via other endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report registry modifications.", "known_false_positives": "You will encounter noise from legitimate print-monitor registry entries.", "references": [], "tags": {"analytic_story": ["Suspicious Windows Registry Activities", "Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 5"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Persistence", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.010/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "New print monitor added on $dest$", "mitre_attack_id": ["T1547.010", "T1547"], "nist": ["PR.PT", "DE.CM", "PR.AC"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.action", "Registry.registry_path", "Registry.dest", "Registry.registry_key_name", "Registry.user", "Registry.registry_value_name"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Port Monitors", "Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "monitor_registry_keys_for_print_monitors_filter"}]}, {"name": "CertUtil Download With URLCache and Split Arguments", "id": "415b4306-8bfb-11eb-85c4-acde48001122", "version": 2, "date": "2021-03-23", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Certutil.exe may download a file from a remote destination using `-urlcache`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. However, it is uncommon for `certutil.exe` to write files to world writeable paths.\\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` Processes.process=*urlcache* Processes.process=*split* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.original_file_name Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_download_with_urlcache_and_split_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives in most environments, however tune as needed based on parent-child relationship or network connection.", "references": ["https://attack.mitre.org/techniques/T1105/", "https://www.avira.com/en/blog/certutil-abused-by-attackers-to-spread-threats", "https://www.fireeye.com/blog/threat-research/2019/10/certutil-qualms-they-came-to-drop-fombs.html"], "tags": {"analytic_story": ["Ingress Tool Transfer", "DarkSide Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Command and Control"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to download a file.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=certutil.exe OR Processes.original_file_name=CertUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_certutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "certutil_download_with_urlcache_and_split_arguments_filter"}]}, {"name": "GetAdComputer with PowerShell", "id": "c5a31f80-5888-4d81-9f78-1cc65026316e", "version": 1, "date": "2021-09-07", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. The `Get-AdComputer' commandlet returns a list of all domain computers. Red Teams and adversaries alike may use this commandlet to identify remote systems for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-AdComputer*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getadcomputer_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getadcomputer_with_powershell_filter"}]}, {"name": "Wermgr Process Spawned CMD Or Powershell Process", "id": "e8fc95bc-a107-11eb-a978-acde48001122", "version": 2, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is designed to detect suspicious cmd and powershell process spawned by wermgr.exe process. This suspicious behavior are commonly seen in code injection technique technique like trickbot to execute a shellcode, dll modules to run malicious behavior.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as cmdline min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = \"wermgr.exe\" `process_cmd` OR `process_powershell` by Processes.parent_process_name  Processes.original_file_name Processes.parent_process_id  Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_spawned_cmd_or_powershell_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/infection/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Wermgr.exe spawning suspicious processes on $dest$", "mitre_attack_id": ["T1059"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wermgr_process_spawned_cmd_or_powershell_process_filter"}]}, {"name": "Process Deleting Its Process File Path", "id": "f7eda4bc-871c-11eb-b110-acde48001122", "version": 1, "date": "2021-03-17", "author": "Teoderick Contreras", "type": "TTP", "datamodel": ["Endpoint"], "description": "This detection is to identify a suspicious process that tries to delete the process file path related to its process. This technique is known to be defense evasion once a certain condition of malware is satisfied or not. Clop ransomware use this technique where it will try to delete its process file path using a .bat command if the keyboard layout is not the layout it tries to infect.", "search": "`sysmon` EventCode=1 cmdline = \"*/c del*\" Image = \"*\\\\cmd.exe\" |eval result = if(like(process,\"%\".parent_process.\"%\"), \"Found\", \"Not Found\") | stats min(_time) as firstTime max(_time) as lastTime count by Computer user ParentImage ParentCommandLine Image cmdline EventCode ProcessID result | where result = \"Found\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_deleting_its_process_file_path_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware", "Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Credential Access"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "A process $Image$ tries to delete its process path in commandline $cmdline$ as part of defense evasion in host $Computer$", "mitre_attack_id": ["T1070"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "Computer", "user", "ParentImage", "ParentCommandLine", "Image", "cmdline", "ProcessID", "result", "_time"], "risk_score": 60, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "process_deleting_its_process_file_path_filter"}]}, {"name": "Domain Group Discovery With Dsquery", "id": "f0c9d62f-a232-4edd-b17e-bc409fb133d4", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to query for domain groups. The argument `group`, returns a list of all domain groups. Red Teams and adversaries alike use may leverage dsquery.exe to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"dsquery.exe\") (Processes.process=\"*group*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_dsquery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_group_discovery_with_dsquery_filter"}]}, {"name": "Windows Event Log Cleared", "id": "ad517544-aff9-4c96-bd99-d6eb43bfbb6a", "version": 6, "date": "2020-07-06", "author": "Rico Valdez, Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes Windows Security Event ID 1102 or System log event 104 to identify when a Windows event log is cleared. Note that this analytic will require tuning or restricted to specific endpoints based on criticality. During triage, based on time of day and user, determine if this was planned. If not planned, follow through with reviewing parallel alerts and other data sources to determine what else may have occurred.", "search": "(`wineventlog_security` EventCode=1102) OR (`wineventlog_system` EventCode=104) | stats count min(_time) as firstTime max(_time) as lastTime by dest Message EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_event_log_cleared_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows event logs from your hosts. In addition, the Splunk Windows TA is needed.", "known_false_positives": "It is possible that these logs may be legitimately cleared by Administrators. Filter as needed.", "references": ["https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-1102", "https://www.ired.team/offensive-security/defense-evasion/disabling-windows-event-logs-by-suspending-eventlog-service-threads", "https://attack.mitre.org/techniques/T1070/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1070.001/T1070.001.md"], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware", "Clop Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 6"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/atomic_red_team/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/atomic_red_team/windows-system.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Windows event logs cleared on $dest$ via EventCode $EventCode$", "mitre_attack_id": ["T1070", "T1070.001"], "nist": ["DE.DP", "PR.IP", "PR.AC", "PR.AT", "DE.AE"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "dest"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Clear Windows Event Logs"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_event_log_cleared_filter"}]}, {"name": "Local Account Discovery with Net", "id": "5d0d4830-0133-11ec-bae3-acde48001122", "version": 2, "date": "2021-09-16", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to query for local users. The two arguments `user` and 'users', return a list of all local users. Red Teams and adversaries alike use net.exe to enumerate users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` (Processes.process=*user OR Processes.process=*users) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `local_account_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "local_account_discovery_with_net_filter"}]}, {"name": "CMD Echo Pipe - Escalation", "id": "eb277ba0-b96b-11eb-b00e-acde48001122", "version": 2, "date": "2021-05-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies a common behavior by Cobalt Strike and other frameworks where the adversary will escalate privileges, either via `jump` (Cobalt Strike PTH) or `getsystem`, using named-pipe impersonation. A suspicious event will look like `cmd.exe /c echo 4sgryt3436 > \\\\.\\Pipe\\5erg53`.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` OR Processes.process=*%comspec%* (Processes.process=*echo* AND Processes.process=*pipe*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmd_echo_pipe___escalation_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Unknown. It is possible filtering may be required to ensure fidelity.", "references": ["https://redcanary.com/threat-detection-report/threats/cobalt-strike/", "https://github.com/rapid7/meterpreter/blob/master/source/extensions/priv/server/elevate/namedpipe.c"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ potentially performing privilege escalation using named pipes related to Cobalt Strike and other frameworks.", "mitre_attack_id": ["T1059", "T1059.003", "T1543.003", "T1543"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Windows Command Shell", "Windows Service", "Create or Modify System Process"], "mitre_attack_tactics": ["Execution", "Execution", "Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "TA505", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "OilRig", "Lazarus Group", "Honeybee", "Cobalt Group", "FIN7", "APT41", "Soft Cell", "Turla", "Silence", "APT32", "APT39", "Darkhotel", "MuddyWater", "APT18", "APT38", "Dark Caracal", "Gorgon Group", "Dragonfly 2.0", "Rancor", "Ke3chang", "APT37", "Leviathan", "FIN8", "APT28", "Magic Hound", "Sowbug", "BRONZE BUTLER", "FIN10", "Threat Group-3390", "menuPass", "Gamaredon Group", "Suckfly", "Patchwork", "Threat Group-1314", "APT3", "admin@338", "APT1", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cmd_echo_pipe___escalation_filter"}]}, {"name": "Multiple Users Attempting To Authenticate Using Explicit Credentials", "id": "e61918fa-9ca4-11eb-836c-acde48001122", "version": 1, "date": "2021-04-13", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies a source user failing to authenticate with multiple users using explicit credentials on a host. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4648 is generated when a process attempts an account logon by explicitly specifying that accounts credentials. This event generates on domain controllers, member servers, and workstations.\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will trigger on the potenfially malicious host, perhaps controlled via a trojan or operated by an insider threat, from where a password spraying attack is being executed.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source account, attempted user accounts and the endpoint were the behavior was identified.", "search": " `wineventlog_security` EventCode=4648 | bucket span=2m _time | eval Source_Account = mvindex(Account_Name, 0) | eval Destination_Account = mvindex(Account_Name, 1) | search Source_Account != \"*$\" Source_Account !=\"-\" Destination_Account !=\"*$\" | stats dc(Destination_Account) AS unique_accounts values(Destination_Account) as tried_account by _time, ComputerName, Source_Account | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_attempting_to_authenticate_using_explicit_credentials_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Event Logs from domain controllers as well as member servers and workstations. The Advanced Security Audit policy setting `Audit Logon` within `Logon/Logoff` needs to be enabled.", "known_false_positives": "A source user failing attempting to authenticate multiple users on a host is not a common behavior for regular systems. Some applications, however, may exhibit this behavior in which case sets of users hosts can be added to an allow list. Possible false positive scenarios include systems where several users connect to like Mail servers, identity providers, remote desktop services, Citrix, etc.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4648", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_explicit_credential_spray/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential password spraying attack from $ComputerName$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Security_ID", "Account_Name", "ComputerName"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_users_attempting_to_authenticate_using_explicit_credentials_filter"}]}, {"name": "Detect AzureHound File Modifications", "id": "1c34549e-c31b-11eb-996b-acde48001122", "version": 1, "date": "2021-06-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic is similar to SharpHound file modifications, but this instance covers the use of Invoke-AzureHound. AzureHound is the SharpHound equivilent but for Azure. It's possible this may never be seen in an environment as most attackers may execute this tool remotely. Once execution is complete, a zip file with a similar name will drop `20210601090751-azurecollection.zip`. In addition to the zip, multiple .json files will be written to disk, which are in the zip.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*-azurecollection.zip\", \"*-azprivroleadminrights.json\", \"*-azglobaladminrights.json\", \"*-azcloudappadmins.json\", \"*-azapplicationadmins.json\") by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.file_path Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_azurehound_file_modifications_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on file modifications that include the name of the process, and file, responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesystem` node.", "known_false_positives": "False positives should be limited as the analytic is specific to a filename with extension .zip. Filter as needed.", "references": ["https://posts.specterops.io/introducing-bloodhound-4-0-the-azure-update-9b2b26c5e350", "https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Collectors/AzureHound.ps1"], "tags": {"analytic_story": ["Discovery Techniques"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/sharphound/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Reconnaissance"], "message": "A file - $file_name$ was written to disk that is related to AzureHound, a AzureAD enumeration utility, has occurred on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1087.002", "T1069.001", "T1482", "T1087.001", "T1087", "T1069.002", "T1069"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "file_path", "dest", "file_name", "process_id", "file_create_time"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Local Groups", "Domain Trust Discovery", "Local Account", "Account Discovery", "Domain Groups", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "Turla", "OilRig", "admin@338", "Wizard Spider", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338", "no", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang", "TA505", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_azurehound_file_modifications_filter"}]}, {"name": "FodHelper UAC Bypass", "id": "909f8fd8-7ac8-11eb-a1f3-acde48001122", "version": 1, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Fodhelper.exe has a known UAC bypass as it attempts to look for specific registry keys upon execution, that do not exist. Therefore, an attacker can write its malicious commands in these registry keys to be executed by fodhelper.exe with the highest privilege. \\\n1. `HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command`\\\n1. `HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command\\DelegateExecute`\\\n1. `HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command\\(default)`\\\nUpon triage, fodhelper.exe will have a child process and read access will occur on the registry keys. Isolate the endpoint and review parallel processes for additional behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=fodhelper.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `fodhelper_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited to no false positives are expected.", "references": ["https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md", "https://github.com/gushmazuko/WinBypass/blob/master/FodhelperBypass.ps1", "https://attack.mitre.org/techniques/T1548/002"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "Suspcious registy keys added by process fodhelper.exe (process_id- $process_id), with a parent_process of $parent_process_name$ that has been executed on $dest$ by $user$.", "mitre_attack_id": ["T1112", "T1548.002", "T1548"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Process Name", "role": ["Parent Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry", "Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8", "APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "fodhelper_uac_bypass_filter"}]}, {"name": "Rundll32 with no Command Line Arguments with Network", "id": "35307032-a12d-11eb-835f-acde48001122", "version": 3, "date": "2021-10-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe with no command line arguments and performing a network connection. It is unusual for rundll32.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_rundll32` by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(rundll32\\.exe.{0,4}$)\" | join  process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port| `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process process_guid connection_to_CNC dest_port | `rundll32_with_no_command_line_arguments_with_network_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `port` node. To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of rundll32, triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Cobalt Strike", "PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A rundll32 process $process_name$ with no commandline argument like this process commandline $process$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "processname", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_with_no_command_line_arguments_with_network_filter"}]}, {"name": "Account Discovery With Net App", "id": "339805ce-ac30-11eb-b87d-acde48001122", "version": 3, "date": "2021-09-16", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect a potential account discovery series of command used by several malware or attack to recon the target machine. This technique is also seen in some note worthy malware like trickbot where it runs a cmd process, or even drop its module that will execute the said series of net command. This series of command are good correlation search and indicator of attacker recon if seen in the machines within a none technical user or department (HR, finance, ceo and etc) network.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND (Processes.process=\"*user*\" OR  Processes.process=\"*config*\" OR Processes.process=\"*view /all*\") by  Processes.process_name Processes.dest Processes.user Processes.parent_process_name | where count >=5 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `account_discovery_with_net_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product..", "known_false_positives": "admin or power user may used this series of command.", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html", "https://app.any.run/tasks/48414a33-3d66-4a46-afe5-c2003bb55ccf/"], "tags": {"analytic_story": ["Trickbot", "IcedID"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/infection/windows-sysmon.log"], "impact": 10, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious $process_name$ usage detected on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_name", "type": "Process Name", "role": ["Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 5, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "account_discovery_with_net_app_filter"}]}, {"name": "GetWmiObject User Account with PowerShell", "id": "b44f6ac6-0429-11ec-87e9-acde48001122", "version": 1, "date": "2021-08-23", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query local users. The `Get-WmiObject` commandlet combined with the `Win32_UserAccount` parameter is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-WmiObject* AND Processes.process=*Win32_UserAccount*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_user_account_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_user_account_with_powershell_filter"}]}, {"name": "Executable File Written in Administrative SMB Share", "id": "f63c34fe-a435-11eb-935a-acde48001122", "version": 2, "date": "2021-11-18", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies executable files (.exe or .dll) being written to Windows administrative SMB shares (Admin$, IPC$, C$). This represents suspicious behavior as its commonly used by tools like like PsExec/PaExec and others to stage service binaries before creating and starting a Windows service on remote endpoints. Red Teams and adversaries alike may abuse administrative shares for lateral movement and remote code execution. The Trickbot malware family also implements this behavior to try to infect other machines in the infected network.", "search": "`wineventlog_security` EventCode=5145 Relative_Target_Name IN (\"*.exe\",\"*.dll\") Object_Type=File Share_Name IN (\"\\\\\\\\*\\\\C$\",\"\\\\\\\\*\\\\IPC$\",\"\\\\\\\\*\\\\admin$\") Access_Mask= \"0x2\" | stats min(_time) as firstTime max(_time) as lastTime count by EventCode Share_Name Relative_Target_Name Object_Type Access_Mask user src_port Source_Address | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `executable_file_written_in_administrative_smb_share_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Security Event Logs with 5145 EventCode enabled. The Windows TA is also required. Also enable the object Audit access success/failure in your group policy.", "known_false_positives": "System Administrators may use looks like PsExec for troubleshooting or administrations tasks. However, this will typically come only from certain users and certain systems that can be added to an allow list.", "references": ["https://attack.mitre.org/techniques/T1021/002/", "https://www.rapid7.com/blog/post/2013/03/09/psexec-demystified/", "https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Active Directory Lateral Movement", "Trickbot"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/exe_smbshare/windows-security.log"], "impact": 70, "kill_chain_phases": ["Lateral Movement"], "message": "$user$ dropped or created an executable file in known sensitive SMB share.  Share name=$Share_Name$, Target name=$Relative_Target_Name$, and Access mask=$Access_Mask$", "mitre_attack_id": ["T1021", "T1021.002"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Share_Name", "Relative_Target_Name", "Object_Type", "Access_Mask", "user", "src_port", "Source_Address"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "SMB/Windows Admin Shares"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT32", "Orangeworm", "FIN8", "APT3", "Lazarus Group", "Threat Group-1314", "Turla", "Deep Panda", "Ke3chang"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "executable_file_written_in_administrative_smb_share_filter"}]}, {"name": "Sc exe Manipulating Windows Services", "id": "f0c693d8-2a89-4ce7-80b4-98fea4c3ea6d", "version": 4, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for arguments to sc.exe indicating the creation or modification of a Windows service.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = sc.exe (Processes.process=\"* create *\" OR Processes.process=\"* config *\") by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sc_exe_manipulating_windows_services_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Using sc.exe to manipulate Windows services is uncommon. However, there may be legitimate instances of this behavior. It is important to validate and investigate as appropriate.", "references": [], "tags": {"analytic_story": ["Windows Service Abuse", "DHS Report TA18-074A", "Orangeworm Attack Group", "Windows Persistence Techniques", "Disabling Security Tools", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 8"], "confidence": 80, "context": ["source:endpoint", {"stage": "Persistence"}, "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Installation"], "message": "A sc process $process_name$ with commandline $process$ to create of configure services in host $dest$", "mitre_attack_id": ["T1543.003", "T1543"], "nist": ["PR.IP", "PR.PT", "PR.AC", "PR.AT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Service", "Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sc_exe_manipulating_windows_services_filter"}]}, {"name": "Windows InstallUtil Remote Network Connection", "id": "4fbf9270-43da-11ec-9486-acde48001122", "version": 1, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Windows InstallUtil.exe binary making a remote network connection. This technique may be used to download and execute code while bypassing application control. \\\nWhen `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \\\nIf used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \\\nDuring triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_installutil` by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_guid [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port | `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process process_guid connection_to_CNC dest_port | `windows_installutil_remote_network_connection_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Ports` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present as InstallUtil is not typically used to download remote files. Filter as needed based on Developers requirements.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md"], "tags": {"analytic_story": ["Signed Binary Proxy Execution InstallUtil"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.004/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ generating a remote download.", "mitre_attack_id": ["T1218.004", "T1218"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id", "Ports.process_guid", "Ports.dest", "Ports.dest_port"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["InstallUtil", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=installutil.exe OR Processes.original_file_name=InstallUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_installutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_installutil_remote_network_connection_filter"}]}, {"name": "Detect Kerberoasting", "id": "dabdd6d7-3e10-42be-8711-4e124f7a3850", "version": 2, "date": "2020-10-21", "author": "Xiao Lin, Splunk", "type": "TTP", "datamodel": ["Certificates"], "description": "This search detects a potential kerberoasting attack via service principal name requests", "search": " | from read_ssa_enriched_events() | eval _time=map_get(input_event, \"_time\"), EventCode=map_get(input_event, \"event_code\"), TicketOptions=map_get(input_event, \"ticket_options\"), TicketEncryptionType=map_get(input_event, \"ticket_encryption_type\"), ServiceName=map_get(input_event, \"service_name\"), ServiceID=map_get(input_event, \"service_id\"), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where EventCode=\"4769\" AND TicketOptions=\"0x40810000\" AND TicketEncryptionType=\"0x17\" | first_time_event input_columns=[\"EventCode\",\"TicketOptions\",\"TicketEncryptionType\",\"ServiceName\",\"ServiceID\"] | where first_time_EventCode_TicketOptions_TicketEncryptionType_ServiceName_ServiceID | eval start_time=_time, end_time=_time | eval body=create_map([\"event_id\", event_id, \"EventCode\", EventCode, \"ServiceName\", ServiceName, \"TicketOptions\", TicketOptions, \"TicketEncryptionType\", TicketEncryptionType]), entities = mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | select start_time, end_time, entities, body | into write_ssa_detected_events();", "how_to_implement": "The test data is converted from Windows Security Event logs generated from Attach Range simulation and used in SPL search and extended to SPL2", "known_false_positives": "Older systems that support kerberos RC4 by default NetApp may generate false positives", "references": ["Initial ESCU implementation by Jose Hernandez and Patrick Bareiss"], "tags": {"analytic_story": ["Credential Dumping"], "cis20": ["CIS 8", "CIS 16"], "confidence": 20, "context": ["Source:AD", "Source:Endpoint", "Stage:Credential Access"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Kerberoasting malware is potentially applying stolen credentials. Operation is performed at the device $dest_device_id$, by the account $dest_user_id$ via command $cmd_line$", "mitre_attack_id": ["T1558.003", "T1558"], "nist": ["DE.CM"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "cmd_line", "type": "processname", "role": ["Others"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["service_name", "_time", "event_code", "ticket_encryption_type", "service_id", "ticket_options"], "risk_score": 14, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Kerberoasting", "Steal or Forge Kerberos Tickets"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_kerberoasting_filter"}]}, {"name": "System Processes Run From Unexpected Locations", "id": "a34aae96-ccf8-4aef-952c-3ea21444444d", "version": 6, "date": "2020-12-08", "author": "David Dorsey, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for system processes that typically execute from `C:\\Windows\\System32\\` or `C:\\Windows\\SysWOW64`.  This may indicate a malicious process that is trying to hide as a legitimate process.\\\nThis detection utilizes a lookup that is deduped `system32` and `syswow64` directories from Server 2016 and Windows 10.\\\nDuring triage, review the parallel processes - what process moved the native Windows binary? identify any artifacts on disk and review. If a remote destination is contacted, what is the reputation?", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !=\"C:\\\\Windows\\\\System32*\" Processes.process_path !=\"C:\\\\Windows\\\\SysWOW64*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_hash | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `is_windows_system_file` | `system_processes_run_from_unexpected_locations_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "This detection may require tuning based on third party applications utilizing native Windows binaries in non-standard paths.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1036.003/T1036.003.yaml", "https://attack.mitre.org/techniques/T1036/003/"], "tags": {"analytic_story": ["Suspicious Command-Line Executions", "Unusual Processes", "Ransomware", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036.003/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "System process running from unexpected location on $dest$", "mitre_attack_id": ["T1036", "T1036.003"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_name", "type": "Process", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_path", "Processes.user", "Processes.dest", "Processes.process_name", "Processes.process_id", "Processes.parent_process_name", "Processes.process_hash"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading", "Rename System Utilities"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "menuPass", "APT32", "Soft Cell", "PLATINUM"]}, "macros": [{"definition": "lookup update=true is_windows_system_file filename as process_name OUTPUT systemFile | search systemFile=true", "description": "This macro limits the output to process names that are in the Windows System directory", "name": "is_windows_system_file", "lookups": [{"default_match": "false", "description": "A full baseline of executable files in Windows\\System32 and Windows\\Syswow64, including sub-directories from Server 2016 and Windows 10.", "filename": "is_windows_system_file.csv", "min_matches": 1, "name": "is_windows_system_file", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/is_windows_system_file.csv"}]}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_processes_run_from_unexpected_locations_filter"}]}, {"name": "Excel Spawning PowerShell", "id": "42d40a22-9be3-11eb-8f08-acde48001122", "version": 1, "date": "2021-04-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies Microsoft Excel spawning PowerShell. Typically, this is not common behavior and not default with Excel.exe. Excel.exe will generally be found in the following path `C:\\Program Files\\Microsoft Office\\root\\Office16` (version will vary). PowerShell spawning from Excel.exe is common for a spearphishing attachment and is actively used. Albeit, the command executed will most likely be encoded and captured via another detection. During triage, review parallel processes and identify any files that may have been written.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"excel.exe\" `process_powershell` by Processes.parent_process Processes.process_name Processes.user Processes.dest Processes.original_file_name | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `excel_spawning_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, but if any are present, filter as needed.", "references": ["https://redcanary.com/threat-detection-report/techniques/powershell/", "https://attack.mitre.org/techniques/T1566/001/"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$, indicating potential suspicious macro execution.", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excel_spawning_powershell_filter"}]}, {"name": "Detect SharpHound Usage", "id": "dd04b29a-beed-11eb-87bc-acde48001122", "version": 2, "date": "2021-05-27", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies SharpHound binary usage by using the original filena,e. In addition to renaming the PE, other coverage is available to detect command-line arguments. This particular analytic looks for the original_file_name of `SharpHound.exe` and the process name. It is possible older instances of SharpHound.exe have different original filenames. Dependent upon the operator, the code may be re-compiled and the attributes removed or changed to anything else. During triage, review the metadata of the binary in question. Review parallel processes for suspicious behavior. Identify the source of this binary.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sharphound.exe OR Processes.original_file_name=SharpHound.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_usage_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited as this is specific to a file attribute not used by anything else. Filter as needed.", "references": ["https://attack.mitre.org/software/S0521/", "https://thedfirreport.com/?s=bloodhound", "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "https://github.com/BloodHoundAD/SharpHound3", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md#atomic-test-2---run-bloodhound-from-local-disk"], "tags": {"analytic_story": ["Discovery Techniques", "Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/sharphound/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Potential SharpHound binary identified on $dest$", "mitre_attack_id": ["T1087.002", "T1069.001", "T1482", "T1087.001", "T1087", "T1069.002", "T1069"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Local Groups", "Domain Trust Discovery", "Local Account", "Account Discovery", "Domain Groups", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "Turla", "OilRig", "admin@338", "Wizard Spider", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338", "no", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang", "TA505", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_sharphound_usage_filter"}]}, {"name": "Detect processes used for System Network Configuration Discovery", "id": "a51bfe1a-94f0-48cc-b1e4-16ae10145893", "version": 2, "date": "2020-11-10", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for fast execution of processes used for system network configuration discovery on the endpoint.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where NOT Processes.user IN (\"\",\"unknown\") by Processes.dest Processes.process_name Processes.user _time | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | search `system_network_configuration_discovery_tools` | transaction dest connected=false maxpause=5m |where eventcount>=5 | table firstTime lastTime dest user process_name process parent_process eventcount | `detect_processes_used_for_system_network_configuration_discovery_filter`", "how_to_implement": "You must be ingesting data that records registry activity from your hosts to populate the Endpoint data model in the processes node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or endpoint data sources, such as Sysmon. The data used for this search is usually generated via logs that report reads and writes to the registry or that are populated via Windows event logs, after enabling process tracking in your Windows audit settings.", "known_false_positives": "It is uncommon for normal users to execute a series of commands used for network discovery. System administrators often use scripts to execute these commands. These can generate false positives.", "references": [], "tags": {"analytic_story": ["Unusual Processes"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 2"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1016/discovery_commands/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Installation", "Command and Control", "Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning multiple $process_name$ was identified on endpoint $dest$ by user $user$ typically not a normal behavior of the process.", "mitre_attack_id": ["T1016"], "nist": ["ID.AM", "PR.DS"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 32, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Configuration Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Tropic Trooper", "Frankenstein", "APT41", "Soft Cell", "APT32", "Darkhotel", "MuddyWater", "APT1", "APT19", "Dragonfly 2.0", "Magic Hound", "OilRig", "menuPass", "Threat Group-3390", "Stealth Falcon", "Lazarus Group", "APT3", "Naikon", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "(process_name= \"arp.exe\" OR process_name= \"at.exe\" OR process_name= \"attrib.exe\" OR process_name= \"cscript.exe\" OR process_name= \"dsquery.exe\" OR process_name= \"hostname.exe\" OR process_name= \"ipconfig.exe\" OR process_name= \"mimikatz.exe\" OR process_name= \"nbstat.exe\" OR process_name= \"net.exe\" OR process_name= \"netsh.exe\" OR process_name= \"nslookup.exe\" OR process_name= \"ping.exe\" OR process_name= \"quser.exe\" OR process_name= \"qwinsta.exe\" OR process_name= \"reg.exe\" OR process_name= \"runas.exe\" OR process_name= \"sc.exe\" OR process_name= \"schtasks.exe\" OR process_name= \"ssh.exe\" OR process_name= \"systeminfo.exe\" OR process_name= \"taskkill.exe\" OR process_name= \"telnet.exe\" OR process_name= \"tracert.exe\" OR process_name=\"wscript.exe\" OR process_name= \"xcopy.exe\")", "description": "This macro is a list of process that can be used to discover the network configuration", "name": "system_network_configuration_discovery_tools"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_processes_used_for_system_network_configuration_discovery_filter"}]}, {"name": "Malicious Powershell Executed As A Service", "id": "8e204dfd-cae0-4ea8-a61d-e972a1ff2ff8", "version": 1, "date": "2021-04-07", "author": "Ryan Becwar", "type": "TTP", "datamodel": ["Endpoint"], "description": "This detection is to identify the abuse the Windows SC.exe to execute malicious commands or payloads via PowerShell.", "search": " `wineventlog_system` EventCode=7045 | eval l_Service_File_Name=lower(Service_File_Name) | regex l_Service_File_Name=\"powershell[.\\s]|powershell_ise[.\\s]|pwsh[.\\s]|psexec[.\\s]\" | regex l_Service_File_Name=\"-nop[rofile\\s]+|-w[indowstyle]*\\s+hid[den]*|-noe[xit\\s]+|-enc[odedcommand\\s]+\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type Service_Account user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_powershell_executed_as_a_service_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows System logs with the Service name, Service File Name Service Start type, and Service Type from your endpoints.", "known_false_positives": "Creating a hidden powershell service is rare and could key off of those instances.", "references": ["https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf", "http://az4n6.blogspot.com/2017/", "https://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier"], "tags": {"analytic_story": ["Malicious Powershell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1569.002/atomic_red_team/windows-system.log"], "impact": 90, "kill_chain_phases": ["Privilege Escalation"], "message": "Identifies the abuse the Windows SC.exe to execute malicious powerShell as a service $Service_File_Name$ by $user$ on $dest$", "mitre_attack_id": ["T1569", "T1569.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "Service_File_Name", "Service_Type", "_time", "Service_Name", "Service_Start_Type", "Service_Account", "user"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["System Services", "Service Execution"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT41", "Silence", "FIN6", "APT32", "Honeybee", "Ke3chang"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_powershell_executed_as_a_service_filter"}]}, {"name": "System Process Running from Unexpected Location", "id": "28179107-099a-464a-94d3-08301e6c055f", "version": 3, "date": "2020-08-25", "author": "Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "An attacker tries might try to use different version of a system command without overriding original, or they might try to avoid some detection running the process from a different folder. This detection checks that a list of system processes run inside C:\\\\Windows\\System32 or C:\\\\Windows\\SysWOW64 The list of system processes has been extracted from https://github.com/splunk/security_content/blob/develop/lookups/is_windows_system_file.csv and the original detection https://github.com/splunk/security_content/blob/develop/detections/system_processes_run_from_unexpected_locations.yml", "search": " $ssa_input = | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), user=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=lower(ucast(map_get(input_event, \"process_path\"), \"string\", null)), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null);\n$cond_1 = | from $ssa_input | where process_name=\"arp.exe\" OR process_name=\"adaptertroubleshooter.exe\" OR process_name=\"applicationframehost.exe\" OR process_name=\"atbroker.exe\" OR process_name=\"authhost.exe\" OR process_name=\"autoworkplace.exe\" OR process_name=\"axinstui.exe\" OR process_name=\"backgroundtransferhost.exe\" OR process_name=\"bdehdcfg.exe\" OR process_name=\"bdeuisrv.exe\" OR process_name=\"bdeunlockwizard.exe\" OR process_name=\"bitlockerdeviceencryption.exe\" OR process_name=\"bitlockerwizard.exe\" OR process_name=\"bitlockerwizardelev.exe\" OR process_name=\"bytecodegenerator.exe\" OR process_name=\"camerasettingsuihost.exe\" OR process_name=\"castsrv.exe\" OR process_name=\"certenrollctrl.exe\" OR process_name=\"checknetisolation.exe\" OR process_name=\"clipup.exe\" OR process_name=\"cloudexperiencehostbroker.exe\" OR process_name=\"cloudnotifications.exe\" OR process_name=\"cloudstoragewizard.exe\" OR process_name=\"compmgmtlauncher.exe\" OR process_name=\"compattelrunner.exe\" OR process_name=\"computerdefaults.exe\" OR process_name=\"credentialuibroker.exe\" OR process_name=\"dfdwiz.exe\" OR process_name=\"dwwin.exe\" OR process_name=\"dataexchangehost.exe\" OR process_name=\"defrag.exe\" OR process_name=\"devicedisplayobjectprovider.exe\" OR process_name=\"deviceeject.exe\" OR process_name=\"deviceenroller.exe\" OR process_name=\"devicepairingwizard.exe\" OR process_name=\"deviceproperties.exe\" OR process_name=\"disksnapshot.exe\" OR process_name=\"dism.exe\" OR process_name=\"displayswitch.exe\" OR process_name=\"dmnotificationbroker.exe\" OR process_name=\"dmomacpmo.exe\" OR process_name=\"dpiscaling.exe\" OR process_name=\"dsmusertask.exe\" OR process_name=\"dxpserver.exe\" OR process_name=\"edpcleanup.exe\" OR process_name=\"eosnotify.exe\" OR process_name=\"eap3host.exe\" OR process_name=\"easpoliciesbrokerhost.exe\" OR process_name=\"easeofaccessdialog.exe\" OR process_name=\"ehstorauthn.exe\" OR process_name=\"fxscover.exe\" OR process_name=\"fxssvc.exe\" OR process_name=\"fxsunatd.exe\" OR process_name=\"filehistory.exe\" OR process_name=\"fondue.exe\" OR process_name=\"gamepanel.exe\" OR process_name=\"genvalobj.exe\" OR process_name=\"gettingstarted.exe\" OR process_name=\"hostname.exe\" OR process_name=\"icsentitlementhost.exe\" OR process_name=\"infdefaultinstall.exe\" OR process_name=\"installagent.exe\" OR process_name=\"languagecomponentsinstallercomhandler.exe\" OR process_name=\"launchtm.exe\" OR process_name=\"launchwinapp.exe\" OR process_name=\"legacynetuxhost.exe\" OR process_name=\"licensemanagershellext.exe\" OR process_name=\"licensingui.exe\" OR process_name=\"locationnotificationwindows.exe\" OR process_name=\"locationnotifications.exe\" OR process_name=\"locator.exe\" OR process_name=\"lockapphost.exe\" OR process_name=\"lockscreencontentserver.exe\" OR process_name=\"logonui.exe\" OR process_name=\"lsaiso.exe\" OR process_name=\"mdeserver.exe\" OR process_name=\"mdmagent.exe\" OR process_name=\"mdmappinstaller.exe\" OR process_name=\"mrinfo.exe\" OR process_name=\"mrt.exe\" OR process_name=\"mschedexe.exe\" OR process_name=\"magnify.exe\" OR process_name=\"mbaeparsertask.exe\" OR process_name=\"mdres.exe\" OR process_name=\"mdsched.exe\" OR process_name=\"migautoplay.exe\" OR process_name=\"mpsigstub.exe\" OR process_name=\"msspellcheckinghost.exe\" OR process_name=\"muiunattend.exe\" OR process_name=\"multidigimon.exe\" OR process_name=\"musnotification.exe\" OR process_name=\"musnotificationux.exe\" OR process_name=\"napstat.exe\" OR process_name=\"netstat.exe\" OR process_name=\"narrator.exe\" OR process_name=\"netcfgnotifyobjecthost.exe\" OR process_name=\"netevtfwdr.exe\" OR process_name=\"netproj.exe\" OR process_name=\"netplwiz.exe\" OR process_name=\"networkuxbroker.exe\";\n$cond_2 = | from $ssa_input | where process_name=\"openwith.exe\" OR process_name=\"optionalfeatures.exe\" OR process_name=\"pathping.exe\" OR process_name=\"ping.exe\" OR process_name=\"passwordonwakesettingflyout.exe\" OR process_name=\"pickerhost.exe\" OR process_name=\"pkgmgr.exe\" OR process_name=\"pnpunattend.exe\" OR process_name=\"pnputil.exe\" OR process_name=\"presentationhost.exe\" OR process_name=\"presentationsettings.exe\" OR process_name=\"printbrmui.exe\" OR process_name=\"printdialoghost.exe\" OR process_name=\"printdialoghost3d.exe\" OR process_name=\"printisolationhost.exe\" OR process_name=\"proximityuxhost.exe\" OR process_name=\"rdspnf.exe\" OR process_name=\"rmactivate.exe\" OR process_name=\"rmactivate_isv.exe\" OR process_name=\"rmactivate_ssp.exe\" OR process_name=\"rmactivate_ssp_isv.exe\" OR process_name=\"route.exe\" OR process_name=\"rdpsa.exe\" OR process_name=\"rdpsaproxy.exe\" OR process_name=\"rdpsauachelper.exe\" OR process_name=\"reagentc.exe\" OR process_name=\"recoverydrive.exe\" OR process_name=\"register-cimprovider.exe\" OR process_name=\"registeriepkeys.exe\" OR process_name=\"relpost.exe\" OR process_name=\"remoteposworker.exe\" OR process_name=\"rmclient.exe\" OR process_name=\"robocopy.exe\" OR process_name=\"rpcping.exe\" OR process_name=\"runlegacycplelevated.exe\" OR process_name=\"runtimebroker.exe\" OR process_name=\"sihclient.exe\" OR process_name=\"searchfilterhost.exe\" OR process_name=\"searchindexer.exe\" OR process_name=\"searchprotocolhost.exe\" OR process_name=\"secedit.exe\" OR process_name=\"sensordataservice.exe\" OR process_name=\"setieinstalleddate.exe\" OR process_name=\"settingsynchost.exe\" OR process_name=\"slidetoshutdown.exe\" OR process_name=\"smartscreensettings.exe\" OR process_name=\"sndvol.exe\" OR process_name=\"snippingtool.exe\" OR process_name=\"soundrecorder.exe\" OR process_name=\"spaceagent.exe\" OR process_name=\"sppextcomobj.exe\" OR process_name=\"srtasks.exe\" OR process_name=\"stikynot.exe\" OR process_name=\"synchost.exe\" OR process_name=\"sysreseterr.exe\" OR process_name=\"systempropertiesadvanced.exe\" OR process_name=\"systempropertiescomputername.exe\" OR process_name=\"systempropertiesdataexecutionprevention.exe\" OR process_name=\"systempropertieshardware.exe\" OR process_name=\"systempropertiesperformance.exe\" OR process_name=\"systempropertiesprotection.exe\" OR process_name=\"systempropertiesremote.exe\" OR process_name=\"systemsettingsadminflows.exe\" OR process_name=\"systemsettingsbroker.exe\" OR process_name=\"systemsettingsremovedevice.exe\" OR process_name=\"tcpsvcs.exe\" OR process_name=\"tracert.exe\" OR process_name=\"tstheme.exe\" OR process_name=\"tswbprxy.exe\" OR process_name=\"tapiunattend.exe\" OR process_name=\"taskmgr.exe\" OR process_name=\"thumbnailextractionhost.exe\" OR process_name=\"tokenbrokercookies.exe\" OR process_name=\"tpminit.exe\" OR process_name=\"tswpfwrp.exe\" OR process_name=\"ui0detect.exe\" OR process_name=\"upgraderesultsui.exe\" OR process_name=\"useraccountbroker.exe\" OR process_name=\"useraccountcontrolsettings.exe\" OR process_name=\"usoclient.exe\" OR process_name=\"utilman.exe\" OR process_name=\"vssvc.exe\" OR process_name=\"vaultcmd.exe\" OR process_name=\"vaultsysui.exe\" OR process_name=\"wfs.exe\" OR process_name=\"wmpdmc.exe\" OR process_name=\"wpdshextautoplay.exe\" OR process_name=\"wscollect.exe\" OR process_name=\"wsmanhttpconfig.exe\" OR process_name=\"wsreset.exe\" OR process_name=\"wudfhost.exe\" OR process_name=\"wwahost.exe\" OR process_name=\"wallpaperhost.exe\" OR process_name=\"webcache.exe\" OR process_name=\"werfault.exe\" OR process_name=\"werfaultsecure.exe\" OR process_name=\"winsat.exe\" OR process_name=\"windows.media.backgroundplayback.exe\" OR process_name=\"windowsactiondialog.exe\" OR process_name=\"windowsanytimeupgrade.exe\" OR process_name=\"windowsanytimeupgraderesults.exe\";\n$cond_3 = | from $ssa_input | where process_name=\"windowsanytimeupgradeui.exe\" OR process_name=\"windowsupdateelevatedinstaller.exe\" OR process_name=\"workfolders.exe\" OR process_name=\"wpcmon.exe\" OR process_name=\"acu.exe\" OR process_name=\"aitagent.exe\" OR process_name=\"aitstatic.exe\" OR process_name=\"alg.exe\" OR process_name=\"appidcertstorecheck.exe\" OR process_name=\"appidpolicyconverter.exe\" OR process_name=\"at.exe\" OR process_name=\"attrib.exe\" OR process_name=\"audiodg.exe\" OR process_name=\"auditpol.exe\" OR process_name=\"autochk.exe\" OR process_name=\"autoconv.exe\" OR process_name=\"autofmt.exe\" OR process_name=\"baaupdate.exe\" OR process_name=\"backgroundtaskhost.exe\" OR process_name=\"bcastdvr.exe\" OR process_name=\"bcdboot.exe\" OR process_name=\"bcdedit.exe\" OR process_name=\"bdechangepin.exe\" OR process_name=\"bdeunlock.exe\" OR process_name=\"bitsadmin.exe\" OR process_name=\"bootcfg.exe\" OR process_name=\"bootim.exe\" OR process_name=\"bootsect.exe\" OR process_name=\"bridgeunattend.exe\" OR process_name=\"browser_broker.exe\" OR process_name=\"bthudtask.exe\" OR process_name=\"cacls.exe\" OR process_name=\"calc.exe\" OR process_name=\"cdpreference.exe\" OR process_name=\"certreq.exe\" OR process_name=\"certutil.exe\" OR process_name=\"change.exe\" OR process_name=\"changepk.exe\" OR process_name=\"charmap.exe\" OR process_name=\"chglogon.exe\" OR process_name=\"chgport.exe\" OR process_name=\"chgusr.exe\" OR process_name=\"chkdsk.exe\" OR process_name=\"chkntfs.exe\" OR process_name=\"choice.exe\" OR process_name=\"cipher.exe\" OR process_name=\"cleanmgr.exe\" OR process_name=\"cliconfg.exe\" OR process_name=\"clip.exe\" OR process_name=\"cmd.exe\" OR process_name=\"cmdkey.exe\" OR process_name=\"cmdl32.exe\" OR process_name=\"cmmon32.exe\" OR process_name=\"cmstp.exe\" OR process_name=\"cofire.exe\" OR process_name=\"colorcpl.exe\" OR process_name=\"comp.exe\" OR process_name=\"compact.exe\" OR process_name=\"conhost.exe\" OR process_name=\"consent.exe\" OR process_name=\"control.exe\" OR process_name=\"convert.exe\" OR process_name=\"credwiz.exe\" OR process_name=\"cscript.exe\" OR process_name=\"csrss.exe\" OR process_name=\"ctfmon.exe\" OR process_name=\"cttune.exe\" OR process_name=\"cttunesvr.exe\" OR process_name=\"dashost.exe\" OR process_name=\"dccw.exe\" OR process_name=\"dcomcnfg.exe\" OR process_name=\"ddodiag.exe\" OR process_name=\"dfrgui.exe\" OR process_name=\"dialer.exe\" OR process_name=\"diantz.exe\" OR process_name=\"dinotify.exe\" OR process_name=\"diskpart.exe\" OR process_name=\"diskperf.exe\" OR process_name=\"diskraid.exe\" OR process_name=\"dispdiag.exe\" OR process_name=\"djoin.exe\" OR process_name=\"dllhost.exe\" OR process_name=\"dllhst3g.exe\" OR process_name=\"dmcertinst.exe\" OR process_name=\"dmcfghost.exe\" OR process_name=\"dmclient.exe\" OR process_name=\"dnscacheugc.exe\" OR process_name=\"doskey.exe\" OR process_name=\"dpapimig.exe\" OR process_name=\"dpnsvr.exe\" OR process_name=\"driverquery.exe\" OR process_name=\"drvcfg.exe\" OR process_name=\"drvinst.exe\" OR process_name=\"dsregcmd.exe\" OR process_name=\"dstokenclean.exe\" OR process_name=\"dvdplay.exe\" OR process_name=\"dvdupgrd.exe\" OR process_name=\"dwm.exe\" OR process_name=\"dxdiag.exe\" OR process_name=\"easinvoker.exe\" OR process_name=\"efsui.exe\";\n$cond_4 = | from $ssa_input | where process_name=\"embeddedapplauncher.exe\" OR process_name=\"esentutl.exe\" OR process_name=\"eudcedit.exe\" OR process_name=\"eventcreate.exe\" OR process_name=\"eventvwr.exe\" OR process_name=\"expand.exe\" OR process_name=\"extrac32.exe\" OR process_name=\"fc.exe\" OR process_name=\"fhmanagew.exe\" OR process_name=\"find.exe\" OR process_name=\"findstr.exe\" OR process_name=\"finger.exe\" OR process_name=\"fixmapi.exe\" OR process_name=\"fltmc.exe\" OR process_name=\"fodhelper.exe\" OR process_name=\"fontdrvhost.exe\" OR process_name=\"fontview.exe\" OR process_name=\"forfiles.exe\" OR process_name=\"fsavailux.exe\" OR process_name=\"fsquirt.exe\" OR process_name=\"fsutil.exe\" OR process_name=\"ftp.exe\" OR process_name=\"fvenotify.exe\" OR process_name=\"fveprompt.exe\" OR process_name=\"getmac.exe\" OR process_name=\"gpresult.exe\" OR process_name=\"gpscript.exe\" OR process_name=\"gpupdate.exe\" OR process_name=\"grpconv.exe\" OR process_name=\"hdwwiz.exe\" OR process_name=\"help.exe\" OR process_name=\"hwrcomp.exe\" OR process_name=\"hwrreg.exe\" OR process_name=\"icacls.exe\" OR process_name=\"icardagt.exe\" OR process_name=\"icsunattend.exe\" OR process_name=\"ie4uinit.exe\" OR process_name=\"ieunatt.exe\" OR process_name=\"ieetwcollector.exe\" OR process_name=\"iexpress.exe\" OR process_name=\"immersivetpmvscmgrsvr.exe\" OR process_name=\"ipconfig.exe\" OR process_name=\"irftp.exe\" OR process_name=\"iscsicli.exe\" OR process_name=\"iscsicpl.exe\" OR process_name=\"isoburn.exe\" OR process_name=\"klist.exe\" OR process_name=\"ksetup.exe\" OR process_name=\"ktmutil.exe\" OR process_name=\"label.exe\" OR process_name=\"licensingdiag.exe\" OR process_name=\"lodctr.exe\" OR process_name=\"logagent.exe\" OR process_name=\"logman.exe\" OR process_name=\"logoff.exe\" OR process_name=\"lpkinstall.exe\" OR process_name=\"lpksetup.exe\" OR process_name=\"lpremove.exe\" OR process_name=\"lsass.exe\" OR process_name=\"lsm.exe\" OR process_name=\"makecab.exe\" OR process_name=\"manage-bde.exe\" OR process_name=\"mblctr.exe\" OR process_name=\"mcbuilder.exe\" OR process_name=\"mctadmin.exe\" OR process_name=\"mfpmp.exe\" OR process_name=\"mmc.exe\" OR process_name=\"mobsync.exe\" OR process_name=\"mountvol.exe\" OR process_name=\"mpnotify.exe\" OR process_name=\"msconfig.exe\" OR process_name=\"msdt.exe\" OR process_name=\"msdtc.exe\" OR process_name=\"msfeedssync.exe\" OR process_name=\"msg.exe\" OR process_name=\"mshta.exe\" OR process_name=\"msiexec.exe\" OR process_name=\"msinfo32.exe\" OR process_name=\"mspaint.exe\" OR process_name=\"msra.exe\" OR process_name=\"mstsc.exe\" OR process_name=\"mtstocom.exe\" OR process_name=\"nbtstat.exe\" OR process_name=\"ndadmin.exe\" OR process_name=\"net.exe\" OR process_name=\"net1.exe\" OR process_name=\"netbtugc.exe\" OR process_name=\"netcfg.exe\" OR process_name=\"netiougc.exe\" OR process_name=\"netsh.exe\" OR process_name=\"newdev.exe\" OR process_name=\"nltest.exe\" OR process_name=\"notepad.exe\" OR process_name=\"nslookup.exe\" OR process_name=\"ntoskrnl.exe\" OR process_name=\"ntprint.exe\" OR process_name=\"ocsetup.exe\" OR process_name=\"odbcad32.exe\" OR process_name=\"odbcconf.exe\" OR process_name=\"omadmclient.exe\" OR process_name=\"omadmprc.exe\";\n$cond_5 = | from $ssa_input | where process_name=\"openfiles.exe\" OR process_name=\"osk.exe\" OR process_name=\"p2phost.exe\" OR process_name=\"pcalua.exe\" OR process_name=\"pcaui.exe\" OR process_name=\"pcawrk.exe\" OR process_name=\"pcwrun.exe\" OR process_name=\"perfmon.exe\" OR process_name=\"phoneactivate.exe\" OR process_name=\"plasrv.exe\" OR process_name=\"poqexec.exe\" OR process_name=\"powercfg.exe\" OR process_name=\"prevhost.exe\" OR process_name=\"print.exe\" OR process_name=\"printfilterpipelinesvc.exe\" OR process_name=\"printui.exe\" OR process_name=\"proquota.exe\" OR process_name=\"provtool.exe\" OR process_name=\"psr.exe\" OR process_name=\"pwlauncher.exe\" OR process_name=\"qappsrv.exe\" OR process_name=\"qprocess.exe\" OR process_name=\"query.exe\" OR process_name=\"quser.exe\" OR process_name=\"qwinsta.exe\" OR process_name=\"rasautou.exe\" OR process_name=\"rasdial.exe\" OR process_name=\"raserver.exe\" OR process_name=\"rasphone.exe\" OR process_name=\"rdpclip.exe\" OR process_name=\"rdpinput.exe\" OR process_name=\"rdrleakdiag.exe\" OR process_name=\"recdisc.exe\" OR process_name=\"recover.exe\" OR process_name=\"reg.exe\" OR process_name=\"regedt32.exe\" OR process_name=\"regini.exe\" OR process_name=\"regsvr32.exe\" OR process_name=\"rekeywiz.exe\" OR process_name=\"relog.exe\" OR process_name=\"repair-bde.exe\" OR process_name=\"replace.exe\" OR process_name=\"reset.exe\" OR process_name=\"resmon.exe\" OR process_name=\"rmttpmvscmgrsvr.exe\" OR process_name=\"rrinstaller.exe\" OR process_name=\"rstrui.exe\" OR process_name=\"runas.exe\" OR process_name=\"rundll32.exe\" OR process_name=\"runonce.exe\" OR process_name=\"rwinsta.exe\" OR process_name=\"sbunattend.exe\" OR process_name=\"sc.exe\" OR process_name=\"schtasks.exe\" OR process_name=\"sdbinst.exe\" OR process_name=\"sdchange.exe\" OR process_name=\"sdclt.exe\" OR process_name=\"sdiagnhost.exe\" OR process_name=\"secinit.exe\" OR process_name=\"services.exe\" OR process_name=\"sessionmsg.exe\" OR process_name=\"sethc.exe\" OR process_name=\"setspn.exe\" OR process_name=\"setupcl.exe\" OR process_name=\"setupugc.exe\" OR process_name=\"setx.exe\" OR process_name=\"sfc.exe\" OR process_name=\"shadow.exe\" OR process_name=\"shrpubw.exe\" OR process_name=\"shutdown.exe\" OR process_name=\"sigverif.exe\" OR process_name=\"sihost.exe\" OR process_name=\"slui.exe\" OR process_name=\"smss.exe\" OR process_name=\"snmptrap.exe\" OR process_name=\"sort.exe\" OR process_name=\"spinstall.exe\" OR process_name=\"spoolsv.exe\" OR process_name=\"sppsvc.exe\" OR process_name=\"spreview.exe\" OR process_name=\"srdelayed.exe\" OR process_name=\"subst.exe\" OR process_name=\"svchost.exe\" OR process_name=\"sxstrace.exe\" OR process_name=\"syskey.exe\" OR process_name=\"systeminfo.exe\" OR process_name=\"systemreset.exe\" OR process_name=\"systray.exe\" OR process_name=\"tabcal.exe\" OR process_name=\"takeown.exe\" OR process_name=\"taskeng.exe\" OR process_name=\"taskhost.exe\" OR process_name=\"taskhostw.exe\" OR process_name=\"taskkill.exe\" OR process_name=\"tasklist.exe\" OR process_name=\"taskmgr.exe\" OR process_name=\"tcmsetup.exe\" OR process_name=\"timeout.exe\" OR process_name=\"tpmvscmgr.exe\" OR process_name=\"tpmvscmgrsvr.exe\";\n$cond_6 = | from $ssa_input | where process_name=\"tracerpt.exe\" OR process_name=\"tscon.exe\" OR process_name=\"tsdiscon.exe\" OR process_name=\"tskill.exe\" OR process_name=\"typeperf.exe\" OR process_name=\"tzsync.exe\" OR process_name=\"tzutil.exe\" OR process_name=\"ucsvc.exe\" OR process_name=\"unlodctr.exe\" OR process_name=\"unregmp2.exe\" OR process_name=\"upnpcont.exe\" OR process_name=\"userinit.exe\" OR process_name=\"vds.exe\" OR process_name=\"vdsldr.exe\" OR process_name=\"verclsid.exe\" OR process_name=\"verifier.exe\" OR process_name=\"verifiergui.exe\" OR process_name=\"vmicsvc.exe\" OR process_name=\"vssadmin.exe\" OR process_name=\"w32tm.exe\" OR process_name=\"waitfor.exe\" OR process_name=\"wbadmin.exe\" OR process_name=\"wbengine.exe\" OR process_name=\"wecutil.exe\" OR process_name=\"wermgr.exe\" OR process_name=\"wevtutil.exe\" OR process_name=\"wextract.exe\" OR process_name=\"where.exe\" OR process_name=\"whoami.exe\" OR process_name=\"wiaacmgr.exe\" OR process_name=\"wiawow64.exe\" OR process_name=\"wifitask.exe\" OR process_name=\"wimserv.exe\" OR process_name=\"wininit.exe\" OR process_name=\"winload.exe\" OR process_name=\"winlogon.exe\" OR process_name=\"winresume.exe\" OR process_name=\"winrs.exe\" OR process_name=\"winrshost.exe\" OR process_name=\"winver.exe\" OR process_name=\"wisptis.exe\" OR process_name=\"wkspbroker.exe\" OR process_name=\"wksprt.exe\" OR process_name=\"wlanext.exe\" OR process_name=\"wlrmdr.exe\" OR process_name=\"wowreg32.exe\" OR process_name=\"wpnpinst.exe\" OR process_name=\"wpr.exe\" OR process_name=\"write.exe\" OR process_name=\"wscript.exe\" OR process_name=\"wsmprovhost.exe\" OR process_name=\"wsqmcons.exe\" OR process_name=\"wuapihost.exe\" OR process_name=\"wuapp.exe\" OR process_name=\"wuauclt.exe\" OR process_name=\"wusa.exe\" OR process_name=\"xcopy.exe\" OR process_name=\"xpsrchvw.exe\" OR process_name=\"xwizard.exe\";\n| from $cond_1 | union $cond_2 | union $cond_3 | union $cond_4 | union $cond_5 | union $cond_6 | where match_regex(process_path, /(?i)\\\\windows\\\\system32/)=false AND match_regex(process_path, /(?i)\\\\windows\\\\syswow64/)=false | eval start_time=timestamp, end_time=timestamp, entities=mvappend(device, user), body=create_map([\"event_id\", event_id, \"process_path\", process_path, \"process_name\", process_name]) | into write_ssa_detected_events();", "how_to_implement": "Collect endpoint data such as sysmon or 4688 events.", "known_false_positives": "None", "references": [], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Masquerading - Rename System Utilities"], "cis20": ["CIS 8"], "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036/system_process_running_unexpected_location/windows-security.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A system process $process_name$ with commandline $cmd_line$ spawn in non-default folder path in host $dest_device_id$", "mitre_attack_id": ["T1036"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["dest_device_id", "process_name", "_time", "dest_user_id", "process_path"], "risk_score": 56, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_process_running_from_unexpected_location_filter"}]}, {"name": "Suspicious SearchProtocolHost no Command Line Arguments", "id": "f52d2db8-31f9-4aa7-a176-25779effe55c", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies searchprotocolhost.exe with no command line arguments. It is unusual for searchprotocolhost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. searchprotocolhost.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=searchprotocolhost.exe by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(searchprotocolhost\\.exe.{0,4}$)\"  | `suspicious_searchprotocolhost_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives may be present in small environments. Tuning may be required based on parent process.", "references": ["https://github.com/fireeye/red_team_tool_countermeasures/blob/master/rules/PGF/supplemental/hxioc/SUSPICIOUS%20EXECUTION%20OF%20SEARCHPROTOCOLHOST%20(METHODOLOGY).ioc"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious searchprotocolhost.exe process with no command line arguments executed on $dest$ by $user$", "mitre_attack_id": ["T1055"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_searchprotocolhost_no_command_line_arguments_filter"}]}, {"name": "Elevated Group Discovery With Wmic", "id": "3f6bbf22-093e-4cb4-9641-83f47b8444b6", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for specific domain groups. Red Teams and adversaries alike use net.exe to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"wmic.exe\") (Processes.process=*/NAMESPACE:\\\\\\\\root\\\\directory\\\\ldap*) (Processes.process=\"*Domain Admins*\" OR Processes.process=\"*Enterprise Admins*\" OR Processes.process=\"*Schema Admins*\" OR Processes.process=\"*Account Operators*\" OR Processes.process=\"*Server Operators*\" OR Processes.process=\"*Protected Users*\" OR Processes.process=\"*Dns Admins*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `elevated_group_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-b--privileged-accounts-and-groups-in-active-directory", "https://adsecurity.org/?p=3658"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Elevated domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "elevated_group_discovery_with_wmic_filter"}]}, {"name": "GetWmiObject Ds Group with PowerShell Script Block", "id": "67740bd3-1506-469c-b91d-effc322cc6e5", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet used with specific parameters . The `DS_Group` parameter leverages WMI to query for all domain groups. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message=*Get-WmiObject* AND Message=*\"namespace root\\\\directory\\\\ldap\"* AND Message=*\"class ds_group\"*) | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getwmiobject_ds_group_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_group_with_powershell_script_block_filter"}]}, {"name": "Remote Process Instantiation via WinRM and PowerShell", "id": "ba24cda8-4716-11ec-8009-3e22fbd008af", "version": 1, "date": "2021-11-16", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with arguments utilized to start a process on a remote endpoint by abusing the WinRM protocol. Specifically, this search looks for the abuse of the `Invoke-Command` commandlet. Red Teams and adversaries alike may abuse WinRM and `powershell.exe` for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=\"*Invoke-Command*\" AND Processes.process=\"*-ComputerName*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_winrm_and_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may leverage WinRM and `Invoke-Command` to start a process on remote systems for system administration or automation use cases. However, this activity is usually limited to a small set of hosts or users.", "references": ["https://attack.mitre.org/techniques/T1021/006/", "https://pentestlab.blog/2018/05/15/lateral-movement-winrm/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.006/lateral_movement_psh/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $dest by abusing WinRM using PowerShell.exe", "mitre_attack_id": ["T1021", "T1021.006"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Windows Remote Management"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_winrm_and_powershell_filter"}]}, {"name": "Grant Permission Using Cacls Utility", "id": "c6da561a-cd29-11eb-ae65-acde48001122", "version": 3, "date": "2021-11-30", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies the use of `cacls.exe`, `icacls.exe` or `xcacls.exe` placing the grant permission on a file or directory. Adversaries perform this behavior to allow components of their files to run, however it allows responders to review or gaining access to adversary files on disk.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND match_regex(cmd_line, /(?i)grant/)=true AND (process_name=\"cacls.exe\" OR process_name=\"xcacls.exe\" OR process_name=\"icacls.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed icacls.exe may be used.", "known_false_positives": "System administrators may use cacls utilities but this is not a common practice. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "cis20": ["CIS 14", "CIS 16"], "confidence": 70, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1222.001/ssa_cacls/all_icalc.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A cacls process $process_name$ with commandline $cmd_line$ try to grant user a permission to a file or directory in host $dest_device_id$", "mitre_attack_id": ["T1222"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 35, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "grant_permission_using_cacls_utility_filter"}]}, {"name": "Disable Defender Spynet Reporting", "id": "898debf4-3021-11ec-ba7c-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the spynet reporting for its telemetry.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\Microsoft\\\\Windows Defender\\\\SpyNet*\" Registry.registry_value_name = SpynetReporting Registry.registry_value_data = 0x00000000 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_spynet_reporting_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_spynet_reporting_filter"}]}, {"name": "Get-ForestTrust with PowerShell Script Block", "id": "70fac80e-0bf1-11ec-9ba0-acde48001122", "version": 1, "date": "2021-09-02", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies Get-ForestTrust from PowerSploit in order to gather domain trust information. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message = \"*get-foresttrust*\" | stats count min(_time) as firstTime max(_time) as lastTime by  Message OpCode ComputerName User EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_foresttrust_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "UPDATE_KNOWN_FALSE_POSITIVES", "references": ["https://powersploit.readthedocs.io/en/latest/Recon/Get-ForestTrust/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 40, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious PowerShell Get-ForestTrust was identified on endpoint $ComputerName$ by user $User$.", "mitre_attack_id": ["T1482"], "observable": [{"name": "User", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "Path", "OpCode", "ComputerName", "User"], "risk_score": 12, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_foresttrust_with_powershell_script_block_filter"}]}, {"name": "First time seen command line argument", "id": "fc0edc95-ff2b-48b0-9f6f-63da3789fd23", "version": 4, "date": "2021-11-30", "author": "Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "This search looks for command-line arguments that use a `/c` parameter to execute a command that has not previously been seen. This is an implementation on SPL2 of the rule `First time seen command line argument` by @bpatel. 'The following analytic identifies first time seen command-line arguments on a single endpoint. The analytic looks for arguments instantiated by `cmd.exe /c` and the associated command-line. Adversaries automate or spawn multiple processes using this method, this analytic may assist with identifying the first time it's been found on this endpoint.'", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), cmd_line_norm=lower(cmd_line), cmd_line_norm=replace(cmd_line_norm, /[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/, \"GUID\"), cmd_line_norm=replace(cmd_line_norm, /(?<=\\s)+\\\\[^:]*(?=\\\\.*\\.\\w{3}(\\s|$)+)/, \"\\\\PATH\"), /* replaces \" \\\\Something\\\\Something\\\\command.ext\" => \"PATH\\\\command.ext\" */ cmd_line_norm=replace(cmd_line_norm, /\\w:\\\\[^:]*(?=\\\\.*\\.\\w{3}(\\s|$)+)/, \"\\\\PATH\"), /* replaces \"C:\\\\Something\\\\Something\\\\command.ext\" => \"PATH\\\\command.ext\" */ cmd_line_norm=replace(cmd_line_norm, /\\d+/, \"N\"), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where process_name=\"cmd.exe\" AND match_regex(ucast(cmd_line, \"string\", \"\"), /.* \\/[cC] .*/)=true | select process_name, cmd_line, cmd_line_norm, timestamp, dest_device_id, dest_user_id | first_time_event input_columns=[\"cmd_line_norm\"] | where first_time_cmd_line_norm | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Legitimate programs use command-line arguments to execute. Verify the command-line arguments to check what command/program is being executed. Filtering will be needed.", "references": [], "tags": {"analytic_story": ["Unusual Processes"], "cis20": ["CIS 3", "CIS 8"], "confidence": 60, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "impact": 50, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "A process $process_name$ ha been identified in the environment with a command-line $cmd_line$ not previously seen before on host $dest_device_id$", "mitre_attack_id": ["T1059", "T1202"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process_name", "_time", "dest_device_id", "dest_user_id", "process", "cmd_line"], "risk_score": 30, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Indirect Command Execution"], "mitre_attack_tactics": ["Execution", "Defense Evasion"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "first_time_seen_command_line_argument_filter"}]}, {"name": "Wscript Or Cscript Suspicious Child Process", "id": "1f35e1da-267b-11ec-90a9-acde48001122", "version": 1, "date": "2021-10-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious spawned process by wscript or cscript process. This technique was a common technique used by adversaries and malware to execute different LOLBIN, other script like powershell or create a suspended process to inject its code as a defense evasion. This TTP may detect some normal script that using several application tool that are in the list of the child process it detects but a good pivot and indicator that a script is may execute suspicious code.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"cscript.exe\", \"wscript.exe\") Processes.process_name IN (\"regsvr32.exe\", \"rundll32.exe\",\"winhlp32.exe\",\"certutil.exe\",\"msbuild.exe\",\"cmd.exe\",\"powershell*\",\"wmic.exe\",\"mshta.exe\") by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wscript_or_cscript_suspicious_child_process_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "user may create vbs or js script that use several tool as part of its execution.", "references": ["https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120"], "tags": {"analytic_story": ["FIN7", "Remcos", "Unusual Processes"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.005/vbs_wscript/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "wscript or cscript parent process spawned $process_name$ in $dest$", "mitre_attack_id": ["T1055", "T1543", "T1134.004", "T1134"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection", "Create or Modify System Process", "Parent PID Spoofing", "Access Token Manipulation"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation", "Persistence", "Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM", "no", "no", "Blue Mockingbird"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wscript_or_cscript_suspicious_child_process_filter"}]}, {"name": "Excessive Usage Of Net App", "id": "45e52536-ae42-11eb-b5c6-acde48001122", "version": 2, "date": "2021-05-06", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic identifies excessive usage of `net.exe` or `net1.exe` within a bucket of time (1 minute). This behavior was seen in a Monero incident where the adversary attempts to create many users, delete and disable users as part of its malicious behavior.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_net` by Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_net_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown. Filter as needed. Modify the time span as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Scope:Local", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Excessive usage of net1.exe or net.exe within 1m, with command line $process$ has been detected on $dest$ by $user$", "mitre_attack_id": ["T1531"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_name", "type": "Process Name", "role": ["Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 28, "security_domain": "endpoint", "mitre_attack_technique": ["Account Access Removal"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_usage_of_net_app_filter"}]}, {"name": "Suspicious Rundll32 dllregisterserver", "id": "8c00a385-9b86-4ac0-8932-c9ec3713b159", "version": 2, "date": "2021-02-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe using dllregisterserver on the command line to load a DLL. When a DLL is registered, the DllRegisterServer method entry point in the DLL is invoked. This is typically seen when a DLL is being registered on the system. Not every instance is considered malicious, but it will capture malicious use of it. During investigation, review the parent process and parrellel processes executing. Capture the DLL being loaded and inspect further. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*dllregisterserver* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_dllregisterserver_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "This is likely to produce false positives and will require some filtering. Tune the query by adding command line paths to known good DLLs, or filtering based on parent process names.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east", "https://github.com/pan-unit42/tweets/blob/master/2020-12-10-IOCs-from-Ursnif-infection-with-Delf-variant.txt", "https://www.crowdstrike.com/blog/duck-hunting-with-falcon-complete-qakbot-zip-based-campaign/", "https://msdn.microsoft.com/en-us/library/windows/desktop/ms682162(v=vs.85).aspx"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "$Processes.process_path.file_path$ process potentially loading malicious code", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_path.file_path", "type": "File Name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_rundll32_dllregisterserver_filter"}]}, {"name": "Samsam Test File Write", "id": "493a879d-519d-428f-8f57-a06a0fdc107e", "version": 1, "date": "2018-12-14", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for a file named \"test.txt\" written to the windows system directory tree, which is consistent with Samsam propagation.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_name) as file_name from datamodel=Endpoint.Filesystem where Filesystem.file_path=*\\\\windows\\\\system32\\\\test.txt by Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `samsam_test_file_write_filter`", "how_to_implement": "You must be ingesting data that records the file-system activity from your hosts to populate the Endpoint file-system data-model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "No false positives have been identified.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 20, "context": ["source:endpoint", {"stage": "Impact"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1486/sam_sam_note/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Delivery"], "message": "A samsam ransomware test file creation in $file_path$ in host $dest$", "mitre_attack_id": ["T1486"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.user", "Filesystem.dest", "Filesystem.file_name", "Filesystem.file_path"], "risk_score": 12, "security_domain": "endpoint", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "samsam_test_file_write_filter"}]}, {"name": "Non Firefox Process Access Firefox Profile Dir", "id": "e6fc13b0-1609-11ec-b533-acde48001122", "version": 1, "date": "2021-09-15", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect an anomaly event of non-firefox process accessing the files in  profile folder. This folder contains all the sqlite database of the firefox browser related to users login, history, cookies and etc. Most of the RAT, trojan spy as well as FIN7 jssloader try to parse the those sqlite database to collect information on the compromised host. This SACL Event (4663) need to be enabled to tthe firefox profile directory to be eable to use this. Since you monitoring this access to the folder a noise coming from firefox need to be filter and also sqlite db browser and explorer .exe to make this detection more stable.", "search": "`wineventlog_security` EventCode=4663 NOT (process_name IN (\"*\\\\firefox.exe\", \"*\\\\explorer.exe\", \"*sql*\")) Object_Name=\"*\\\\AppData\\\\Roaming\\\\Mozilla\\\\Firefox\\\\Profiles*\" | stats count min(_time) as firstTime max(_time) as lastTime by Object_Name Object_Type process_name Access_Mask Accesses process_id EventCode dest user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `non_firefox_process_access_firefox_profile_dir_filter`", "how_to_implement": "To successfully implement this search, you must ingest Windows Security Event logs and track event code 4663. For 4663, enable \"Audit Object Access\" in Group Policy. Then check the two boxes listed for both \"Success\" and \"Failure.\"", "known_false_positives": "other browser not listed related to firefox may catch by this rule.", "references": [], "tags": {"analytic_story": ["FIN7", "Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_sacl/security.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "a non firefox browser process $process_name$ accessing $Object_Name$", "mitre_attack_id": ["T1555", "T1555.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Object_Name", "Object_Type", "process_name", "Access_Mask", "Accesses", "process_id", "EventCode", "dest", "user"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Credentials from Password Stores", "Credentials from Web Browsers"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT39", "OilRig", "MuddyWater", "Leafminer", "APT33", "Turla", "Stealth Falcon", "Magic Hound", "Sandworm Team", "Inception", "Stealth Falcon", "OilRig", "Leafminer", "APT33", "APT3", "Kimsuky", "TA505", "Stolen Pencil", "MuddyWater", "APT37", "Patchwork", "Molerats"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "non_firefox_process_access_firefox_profile_dir_filter"}]}, {"name": "Unloading AMSI via Reflection", "id": "a21e3484-c94d-11eb-b55b-acde48001122", "version": 1, "date": "2021-06-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies the behavior of AMSI being tampered with. Implemented natively in many frameworks, the command will look similar to `SEtValuE($Null,(New-OBJEct COLlECtionS.GenerIC.HAshSEt{[StrINg]))}$ReF=[ReF].AsSeMbLY.GeTTyPe(\"System.Management.Automation.Amsi\"+\"Utils\")` taken from Powershell-Empire. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message=*system.management.automation.amsi* | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `unloading_amsi_via_reflection_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Potential for some third party applications to disable AMSI upon invocation. Filter as needed.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible AMSI Unloading via Reflection using PowerShell on $ComputerName$", "mitre_attack_id": ["T1562"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unloading_amsi_via_reflection_filter"}]}, {"name": "Detect Credential Dumping through LSASS access", "id": "2c365e57-4414-4540-8dc0-73ab10729996", "version": 3, "date": "2019-12-03", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for reading lsass memory consistent with credential dumping.", "search": "`sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) | stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_credential_dumping_through_lsass_access_filter` ", "how_to_implement": "This search needs Sysmon Logs and a sysmon configuration, which includes EventCode 10 with lsass.exe. This search uses an input macro named `sysmon`. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Sysmon logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "The activity may be legitimate. Other tools can access lsass for legitimate reasons, and it's possible this event could be generated in those cases. In these cases, false positives should be fairly obvious and you may need to tweak the search to eliminate noise.", "references": [], "tags": {"analytic_story": ["Credential Dumping", "Detect Zerologon Attack"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "The $source_image$ has attempted access to read $TargetImage$ was identified on endpoint $Computer$, this is indicative of credential dumping and should be investigated.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["PR.IP", "PR.AC", "DE.CM"], "observable": [{"name": "source_image", "type": "Other", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "TargetImage", "type": "Other", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "TargetImage", "GrantedAccess", "Computer", "SourceImage", "SourceProcessId", "TargetImage", "TargetProcessId"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_credential_dumping_through_lsass_access_filter"}]}, {"name": "CMD Carry Out String Command Parameter", "id": "54a6ed00-3256-11ec-b031-acde48001122", "version": 2, "date": "2021-12-13", "author": "Teoderick Contreras, Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies command-line arguments where `cmd.exe /c` is used to execute a program. `cmd /c` is used to run commands in MS-DOS and terminate after command or process completion. This technique is commonly seen in adversaries and malware to execute batch command using different shell like PowerShell or different process other than `cmd.exe`. This is a good hunting query for suspicious command-line made by a script or relative process execute it.", "search": "| tstats `security_content_summariesonly` min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` AND Processes.process=\"* /c *\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmd_carry_out_string_command_parameter_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be high based on legitimate scripted code in any environment. Filter as needed.", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IcedID", "Log4Shell CVE-2021-44228"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/cmd_carry_str_param/sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting spawn a new process.", "mitre_attack_id": ["T1059.003", "T1059"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process_id", "Processes.process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Command Shell", "Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["TA505", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "OilRig", "Lazarus Group", "Honeybee", "Cobalt Group", "FIN7", "APT41", "Soft Cell", "Turla", "Silence", "APT32", "APT39", "Darkhotel", "MuddyWater", "APT18", "APT38", "Dark Caracal", "Gorgon Group", "Dragonfly 2.0", "Rancor", "Ke3chang", "APT37", "Leviathan", "FIN8", "APT28", "Magic Hound", "Sowbug", "BRONZE BUTLER", "FIN10", "Threat Group-3390", "menuPass", "Gamaredon Group", "Suckfly", "Patchwork", "Threat Group-1314", "APT3", "admin@338", "APT1", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cmd_carry_out_string_command_parameter_filter"}]}, {"name": "Domain Account Discovery with Wmic", "id": "383572e0-04c5-11ec-bdcc-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for domain users. Red Teams and adversaries alike use wmic.exe to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=\"wmic.exe\" AND Processes.process = \"*/NAMESPACE:\\\\\\\\root\\\\directory\\\\ldap*\" AND Processes.process = \"*ds_user*\" AND Processes.process = \"*GET*\" AND Processes.process = \"*ds_samaccountname*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_account_discovery_with_wmic_filter"}]}, {"name": "WinEvent Scheduled Task Created Within Public Path", "id": "5d9c6eee-988c-11eb-8253-acde48001122", "version": 1, "date": "2021-04-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed from a user writeable file path.\\\nThe search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not.\\\nschtasks.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64`.\\\nThe following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory.\\\nUpon triage, identify the task scheduled source. Was it schtasks.exe or was it via TaskService. Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.", "search": "`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (\"*\\\\users\\\\public\\\\*\", \"*\\\\programdata\\\\*\", \"*\\\\temp\\\\*\", \"*\\\\Windows\\\\Tasks\\\\*\", \"*\\\\appdata\\\\*\") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_scheduled_task_created_within_public_path_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Security Event Logs with 4698 EventCode enabled. The Windows TA is also required.", "known_false_positives": "False positives are possible if legitimate applications are allowed to register tasks in public paths. Filter as needed based on paths that are used legitimately.", "references": ["https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/", "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4698", "https://redcanary.com/threat-detection-report/techniques/scheduled-task-job/", "https://docs.microsoft.com/en-us/windows/win32/taskschd/time-trigger-example--scripting-?redirectedfrom=MSDN", "https://app.any.run/tasks/e26f1b2e-befa-483b-91d2-e18636e2faf3/"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Ransomware", "Ryuk Ransomware", "IcedID", "Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Persistence", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/taskschedule/windows-security.log"], "impact": 70, "kill_chain_phases": ["Privilege Escalation"], "message": "A windows scheduled task was created (task name=$Task_Name$) on $dest$ by the following command: $Command$", "mitre_attack_id": ["T1053.005", "T1053"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Command", "type": "Command", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Task_Name", "Description", "Command"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winevent_scheduled_task_created_within_public_path_filter"}]}, {"name": "Scheduled Task Initiation on Remote Endpoint", "id": "95cf4608-4302-11ec-8194-3e22fbd008af", "version": 1, "date": "2021-11-11", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `schtasks.exe` with command-line arguments utilized to start a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=schtasks.exe OR Processes.original_file_name=schtasks.exe) (Processes.process=*/s* AND Processes.process=*/run*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_initiation_on_remote_endpoint_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may start scheduled tasks on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks", "https://attack.mitre.org/techniques/T1053/005/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A Windows Scheduled Task was ran on a remote endpoint from $dest", "mitre_attack_id": ["T1053", "T1053.005"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job", "Scheduled Task"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "scheduled_task_initiation_on_remote_endpoint_filter"}]}, {"name": "Powershell Disable Security Monitoring", "id": "c148a894-dd93-11eb-bf2a-acde48001122", "version": 2, "date": "2021-07-05", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identifies a modification in registry to disable the windows denfender real time behavior monitoring. This event or technique is commonly seen in RAT, bot, or Trojan to disable AV to evade detections.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=\"*set-mppreference*\" AND Processes.process IN (\"*disablerealtimemonitoring*\",\"*disableioavprotection*\",\"*disableintrusionpreventionsystem*\",\"*disablescriptscanning*\",\"*disableblockatfirstseen*\") by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_disable_security_monitoring_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives. However, tune based on scripts that may perform this action.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.001/T1562.001.md#atomic-test-15---tamper-with-windows-defender-atp-powershell"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/pwh_defender_disabling/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1562.001", "T1562"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_disable_security_monitoring_filter"}]}, {"name": "Credential Dumping via Symlink to Shadow Copy", "id": "c5eac648-fae0-4263-91a6-773df1f4c903", "version": 2, "date": "2021-09-16", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects the creation of a symlink to a shadow copy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `credential_dumping_via_symlink_to_shadow_copy_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.003/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to create symlink to a shadow copy to grab credentials.", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "credential_dumping_via_symlink_to_shadow_copy_filter"}]}, {"name": "Disable Security Logs Using MiniNt Registry", "id": "39ebdc68-25b9-11ec-aec7-acde48001122", "version": 1, "date": "2021-10-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious registry modification to disable security audit logs. This technique was shared by a researcher to disable Security logs of windows by adding this registry. The Windows will think it is WinPE and will not log any event to the Security Log", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*\\\\Control\\\\MiniNt\\\\*\" by Registry.dest Registry.user Registry.registry_value_name Registry.registry_key_name Registry.registry_path Registry.registry_value_data | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_security_logs_using_minint_registry_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "Unknown.", "references": ["https://twitter.com/0gtweet/status/1182516740955226112"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1112/minint_reg/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1112"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_security_logs_using_minint_registry_filter"}]}, {"name": "Active Setup Registry Autostart", "id": "f64579c0-203f-11ec-abcc-acde48001122", "version": 1, "date": "2021-09-28", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification of the active setup registry for persistence and privilege escalation. This technique was seen in several malware (poisonIvy), adware and APT to gain persistence to the compromised machine upon boot up. This TTP is a good indicator to further check the process id that do the modification since modification of this registry is not commonly done. check the legitimacy of the file and process involve in this rules to check if it is a valid setup installer that creating or modifying this registry.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_value_name = \"StubPath\" Registry.registry_key_name = \"*\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components*\" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `active_setup_registry_autostart_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "Active setup installer may add or modify this registry.", "references": ["https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Backdoor%3aWin32%2fPoisonivy.E", "https://attack.mitre.org/techniques/T1547/014/"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/t1547.014/active_setup_stubpath/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1547.014", "T1547"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "active_setup_registry_autostart_filter"}]}, {"name": "Single Letter Process On Endpoint", "id": "a4214f0b-e01c-41bc-8cc4-d2b71e3056b4", "version": 3, "date": "2020-12-08", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for process names that consist only of a single letter.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.dest, Processes.user, Processes.process, Processes.process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | eval process_name_length = len(process_name), endExe = if(substr(process_name, -4) == \".exe\", 1, 0) | search process_name_length=5 AND endExe=1 | table count, firstTime, lastTime, dest, user, process, process_name | `single_letter_process_on_endpoint_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Single-letter executables are not always malicious. Investigate this activity with your normal incident-response process.", "references": [], "tags": {"analytic_story": ["DHS Report TA18-074A"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 2"], "confidence": 90, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1204.002/single_letter_exe/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A suspicious process $process_name$ with single letter in host $dest$", "mitre_attack_id": ["T1204", "T1204.002"], "nist": ["ID.AM", "PR.DS"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.process", "Processes.process_name"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution", "Malicious File"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Whitefly", "Tropic Trooper", "Gamaredon Group", "Sharpshooter", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "RTM", "Inception", "BlackTech", "APT-C-36", "Machete", "admin@338", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "Cobalt Group", "DarkHydrus", "Gorgon Group", "Patchwork", "OilRig", "Dark Caracal", "MuddyWater", "Lazarus Group", "FIN7", "APT32", "Rancor", "APT37", "FIN8", "APT28", "Elderwood", "TA459", "APT29", "Leviathan", "menuPass", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "single_letter_process_on_endpoint_filter"}]}, {"name": "GetAdGroup with PowerShell Script Block", "id": "e4c73d68-794b-468d-b4d0-dac1772bbae7", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGroup` commandlet. The `Get-AdGroup` commandlet is used to return a list of all domain groups. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-ADGroup*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getadgroup_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getadgroup_with_powershell_script_block_filter"}]}, {"name": "Office Application Spawn Regsvr32 process", "id": "2d9fc90c-f11f-11eb-9300-acde48001122", "version": 2, "date": "2021-07-30", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this detection was designed to identifies suspicious spawned process of known MS office application due to macro or malicious code. this technique can be seen in so many malware like IcedID that used MS office as its weapon or attack vector to initially infect the machines.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = \"winword.exe\" OR Processes.parent_process_name = \"excel.exe\" OR Processes.parent_process_name = \"powerpnt.exe\" OR Processes.parent_process_name = \"outlook.exe\") `process_regsvr32` by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_application_spawn_regsvr32_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://www.joesandbox.com/analysis/380662/0/html"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/phish_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Office application spawning regsvr32.exe on $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_application_spawn_regsvr32_process_filter"}]}, {"name": "GetDomainComputer with PowerShell Script Block", "id": "f64da023-b988-4775-8d57-38e512beb56e", "version": 1, "date": "2021-09-02", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainComputer` commandlet. `GetDomainComputer` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain computers for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-DomainComputer*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getdomaincomputer_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use PowerView for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainComputer/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery with PowerView on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaincomputer_with_powershell_script_block_filter"}]}, {"name": "Schedule Task with HTTP Command Arguments", "id": "523c2684-a101-11eb-916b-acde48001122", "version": 1, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with an arguments \"HTTP\" string that are unique entry of malware or attack that uses lolbin to download other file or payload to the infected machine. The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'", "search": "`wineventlog_security` EventCode=4698 | xmlkv Message| search Arguments IN (\"*http*\") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden, Arguments | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schedule_task_with_http_command_arguments_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the task schedule (Exa. Security Log EventCode 4698) endpoints. Tune and filter known instances of Task schedule used in your environment.", "known_false_positives": "unknown", "references": ["https://app.any.run/tasks/92d7ef61-bfd7-4c92-bc15-322172b4ebec/"], "tags": {"analytic_story": ["Windows Persistence Techniques"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Execution"}, "Persistence", "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/tasksched/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A schedule task process commandline arguments $Arguments$ with http string on it in host $dest$", "mitre_attack_id": ["T1053"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "Arguments", "type": "Arguments", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Task_Name", "Command", "Author", "Enabled", "Hidden", "Arguments"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schedule_task_with_http_command_arguments_filter"}]}, {"name": "Suspicious MSBuild Rename", "id": "4006adac-5937-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies renamed instances of msbuild.exe executing. Msbuild.exe is natively found in C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 and C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319. During investigation, identify the code executed and what is executing a renamed instance of MSBuild.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msbuild` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_msbuild_rename_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of msbuild, triggering a false positive.", "references": ["https://lolbas-project.github.io/lolbas/Binaries/Msbuild/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1127.001/T1127.001.md", "https://github.com/infosecn1nja/MaliciousMacroMSBuild/"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution MSBuild", "Cobalt Strike", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127.001/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious renamed msbuild.exe binary ran on $dest$ by $user$", "mitre_attack_id": ["T1036", "T1127", "T1036.003", "T1127.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading", "Trusted Developer Utilities Proxy Execution", "Rename System Utilities", "MSBuild"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "no", "menuPass", "APT32", "Soft Cell", "PLATINUM", "Frankenstein"]}, "macros": [{"definition": "(Processes.process_name=msbuild.exe OR Processes.original_file_name=MSBuild.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_msbuild"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_msbuild_rename_filter"}]}, {"name": "Processes launching netsh", "id": "b89919ed-fe5f-492c-b139-95dbb162040e", "version": 4, "date": "2021-09-16", "author": "Michael Haag, Josef Kuepker, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for processes launching netsh.exe. Netsh is a command-line scripting utility that allows you to, either locally or remotely, display or modify the network configuration of a computer that is currently running. Netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed. In this search, we are looking for processes spawned by netsh.exe and executing commands via the command line.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) AS Processes.process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` by Processes.parent_process_name Processes.parent_process Processes.original_file_name Processes.process_name Processes.user Processes.dest |`drop_dm_object_name(\"Processes\")` |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`processes_launching_netsh_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Some VPN applications are known to launch netsh.exe. Outside of these instances, it is unusual for an executable to launch netsh.exe and run commands.", "references": [], "tags": {"analytic_story": ["Netsh Abuse", "Disabling Security Tools", "DHS Report TA18-074A"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.004/atomic_red_team/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "A process $process_name$ that tries to execute netsh commandline $process$ in host $dest$", "mitre_attack_id": ["T1562.004", "T1562"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.user", "Processes.dest"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify System Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Rocke", "Lazarus Group", "Kimsuky", "Dragonfly 2.0", "Carbanak", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=netsh.exe OR Processes.original_file_name=netsh.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_netsh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "processes_launching_netsh_filter"}]}, {"name": "Add or Set Windows Defender Exclusion", "id": "773b66fe-4dd9-11ec-8289-acde48001122", "version": 1, "date": "2021-11-25", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious process commandline related to windows defender exclusion feature. This command is abused by adversaries, malware author and red teams to bypassed Windows Defender Anti-Virus product by excluding  folder path, file path, process, extensions and etc. from its real time or schedule scan to execute their malicious code. This is a good indicator for defense evasion and to look further for events after this behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = \"*Add-MpPreference *\" OR Processes.process = \"*Set-MpPreference *\") AND Processes.process=\"*-exclusion*\" by Processes.dest Processes.user Processes.parent_process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `add_or_set_windows_defender_exclusion_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin or user may choose to use this windows features.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html", "https://app.any.run/tasks/cf1245de-06a7-4366-8209-8e3006f2bfe5/"], "tags": {"analytic_story": ["Remcos", "Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/defender_exclusion_sysmon/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "exclusion command $process$ executed on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "add_or_set_windows_defender_exclusion_filter"}]}, {"name": "Suspicious Driver Loaded Path", "id": "f880acd4-a8f1-11eb-a53b-acde48001122", "version": 1, "date": "2021-04-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect suspicious driver loaded paths. This technique is commonly used by malicious software like coin miners (xmrig) to register its malicious driver from notable directories where executable or drivers do not commonly exist. During triage, validate this driver is for legitimate business use. Review the metadata and certificate information. Unsigned drivers from non-standard paths is not normal, but occurs. In addition, review driver loads into `ntoskrnl.exe` for possible other drivers of interest. Long tail analyze drivers by path (outside of default, and in default) for further review.", "search": "`sysmon` EventCode=6 ImageLoaded = \"*.sys\" NOT (ImageLoaded IN(\"*\\\\WINDOWS\\\\inf\",\"*\\\\WINDOWS\\\\System32\\\\drivers\\\\*\", \"*\\\\WINDOWS\\\\System32\\\\DriverStore\\\\FileRepository\\\\*\")) |  stats  min(_time) as firstTime max(_time) as lastTime count by Computer ImageLoaded Hashes IMPHASH Signature Signed | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_driver_loaded_path_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the driver loaded and Signature from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Limited false positives will be present. Some applications do load drivers", "references": ["https://www.trendmicro.com/vinfo/hk/threat-encyclopedia/malware/trojan.ps1.powtran.a/", "https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious driver $ImageLoaded$ on $Computer$", "mitre_attack_id": ["T1543.003", "T1543"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "ImageLoaded", "type": "File Name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Computer", "ImageLoaded", "Hashes", "IMPHASH", "Signature", "Signed"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Service", "Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_driver_loaded_path_filter"}]}, {"name": "Wsmprovhost LOLBAS Execution Process Spawn", "id": "2eed004c-4c0d-11ec-93e8-3e22fbd008af", "version": 1, "date": "2021-11-22", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `Wsmprovhost.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Windows Remote Management (WinRm) protocol, the executed command is spawned as a child processs of `Wsmprovhost.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of Wsmprovhost.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wsmprovhost.exe) (Processes.process_name IN (\"Regsvcs.exe\", \"Ftp.exe\", \"OfflineScannerShell.exe\", \"Rasautou.exe\", \"Schtasks.exe\", \"Xwizard.exe\", \"Dllhost.exe\", \"Pnputil.exe\", \"Atbroker.exe\", \"Pcwrun.exe\", \"Ttdinject.exe\",\"Mshta.exe\", \"Bitsadmin.exe\", \"Certoc.exe\", \"Ieexec.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Runscripthelper.exe\", \"Forfiles.exe\", \"Msbuild.exe\", \"Register-cimprovider.exe\", \"Tttracer.exe\", \"Ie4uinit.exe\", \"Bash.exe\", \"Hh.exe\", \"SettingSyncHost.exe\", \"Cmstp.exe\", \"Mmc.exe\", \"Stordiag.exe\", \"Scriptrunner.exe\", \"Odbcconf.exe\", \"Extexport.exe\", \"Msdt.exe\", \"WorkFolders.exe\", \"Diskshadow.exe\", \"Mavinject.exe\", \"Regasm.exe\", \"Gpscript.exe\", \"Rundll32.exe\", \"Regsvr32.exe\", \"Msiexec.exe\", \"Wuauclt.exe\", \"Presentationhost.exe\", \"Wmic.exe\", \"Runonce.exe\", \"Syncappvpublishingserver.exe\", \"Verclsid.exe\", \"Infdefaultinstall.exe\", \"Explorer.exe\", \"Installutil.exe\", \"Netsh.exe\", \"Wab.exe\", \"Dnscmd.exe\", \"At.exe\", \"Pcalua.exe\", \"Msconfig.exe\")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `wsmprovhost_lolbas_execution_process_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may trigger this behavior, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1021/006/", "https://lolbas-project.github.io/", "https://pentestlab.blog/2018/05/15/lateral-movement-winrm/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.006/lateral_movement_lolbas/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "Wsmprovhost.exe spawned a LOLBAS process on $dest$.", "mitre_attack_id": ["T1021", "T1021.006"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Windows Remote Management"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wsmprovhost_lolbas_execution_process_spawn_filter"}]}, {"name": "Malicious InProcServer32 Modification", "id": "127c8d08-25ff-11ec-9223-acde48001122", "version": 1, "date": "2021-10-05", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies a process modifying the registry with a known malicious CLSID under InProcServer32. Most COM classes are registered with the operating system and are identified by a GUID that represents the Class Identifier (CLSID) within the registry (usually under HKLM\\\\Software\\\\Classes\\\\CLSID or HKCU\\\\Software\\\\Classes\\\\CLSID).  Behind the implementation of a COM class is the server (some binary) that is referenced within registry keys under the CLSID.  The LocalServer32 key represents a path to an executable (exe) implementation, and the InprocServer32 key represents a path to a dynamic link library (DLL) implementation (Bohops). During triage, review parallel processes for suspicious activity. Pivot on the process GUID to see the full timeline of events. Analyze the value and look for file modifications. Being this is looking for inprocserver32, a DLL found in the value will most likely be loaded by a parallel process.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time Processes.process_id Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)` | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\CLSID\\\\{89565275-A714-4a43-912E-978B935EDCCC}\\\\InProcServer32\\\\(Default)\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest Registry.process_guid Registry.user | `drop_dm_object_name(Registry)` | fields _time dest registry_path registry_key_name registry_value_name process_name process_path process process_guid user] | stats count min(_time) as firstTime max(_time) as lastTime by dest, process_name registry_path registry_key_name registry_value_name user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_inprocserver32_modification_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, filter as needed. In our test case, Remcos used regsvr32.exe to modify the registry. It may be required, dependent upon the EDR tool producing registry events, to remove (Default) from the command-line.", "references": ["https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/", "https://tria.ge/210929-ap75vsddan", "https://www.virustotal.com/gui/file/cb77b93150cb0f7fe65ce8a7e2a5781e727419451355a7736db84109fa215a89"], "tags": {"analytic_story": ["Suspicious Regsvr32 Activity", "Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "The $process_name$ was identified on endpoint $dest$ modifying the registry with a known malicious clsid under InProcServer32.", "mitre_attack_id": ["T1218.010", "T1112"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "process_name", "registry_path", "registry_key_name", "registry_value_name", "user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Regsvr32", "Modify Registry"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Blue Mockingbird", "Inception", "WIRTE", "Cobalt Group", "APT19", "Leviathan", "APT32", "Deep Panda", "Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_inprocserver32_modification_filter"}]}, {"name": "Multiple Disabled Users Failing To Authenticate From Host Using Kerberos", "id": "98f22d82-9d62-11eb-9fcf-acde48001122", "version": 1, "date": "2021-04-14", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies one source endpoint failing to authenticate with multiple disabled domain users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack against disabled users. Event 4768 is generated every time the Key Distribution Center issues a Kerberos Ticket Granting Ticket (TGT). Failure code `0x12` stands for `clients credentials have been revoked` (account disabled, expired or locked out).\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will only trigger on domain controllers, not on member servers or workstations.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.", "search": "`wineventlog_security` EventCode=4768 Account_Name!=\"*$\" Result_Code=0x12 | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_disabled_users_failing_to_authenticate_from_host_using_kerberos_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller and Kerberos events. The Advanced Security Audit policy setting `Audit Kerberos Authentication Service` within `Account Logon` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple disabled domain users is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners, multi-user systems missconfigured systems.", "references": ["https://attack.mitre.org/techniques/T1110/003/"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_disabled_users_kerberos/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential Kerberos based password spraying attack from $Client_Address$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "Client_Address", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Result_Code", "Account_Name", "Client_Address"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_disabled_users_failing_to_authenticate_from_host_using_kerberos_filter"}]}, {"name": "Domain Group Discovery With Wmic", "id": "a87736a6-95cd-4728-8689-3c64d5026b3e", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for domain groups. The arguments utilized in this command return a list of all domain groups. Red Teams and adversaries alike use wmic.exe to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"wmic.exe\") (Processes.process=*/NAMESPACE:\\\\\\\\root\\\\directory\\\\ldap* AND Processes.process=*ds_group* AND Processes.process=\"*GET ds_samaccountname*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_group_discovery_with_wmic_filter"}]}, {"name": "Get-DomainTrust with PowerShell", "id": "4fa7f846-054a-11ec-a836-acde48001122", "version": 1, "date": "2021-08-24", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies Get-DomainTrust from PowerView in order to gather domain trust information. Typically, this is utilized within a script being executed and used to enumerate the domain trust information. This grants the adversary an understanding of how large or small the domain is. During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=*get-domaintrust* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domaintrust_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives as this requires an active Administrator or adversary to bring in, import, and execute.", "references": ["http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 40, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious PowerShell Get-DomainTrust was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1482"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 12, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domaintrust_with_powershell_filter"}]}, {"name": "BCDEdit Failure Recovery Modification", "id": "809b31d2-5462-11eb-ae93-0242ac130002", "version": 1, "date": "2020-12-21", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for flags passed to bcdedit.exe modifications to the built-in Windows error recovery boot configurations. This is typically used by ransomware to prevent recovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=\"*recoveryenabled*\" (Processes.process=\"* no*\") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bcdedit_failure_recovery_modification_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. Tune based on parent process names.", "known_false_positives": "Administrators may modify the boot configuration.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1490/T1490.md#atomic-test-4---windows---disable-windows-recovery-console-repair"], "tags": {"analytic_story": ["Ryuk Ransomware", "Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Impact"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1490/atomic_red_team/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting disable the ability to recover the endpoint.", "mitre_attack_id": ["T1490"], "nist": ["PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "bcdedit_failure_recovery_modification_filter"}]}, {"name": "Extraction of Registry Hives", "id": "8bbb7d58-b360-11eb-ba21-acde48001122", "version": 2, "date": "2021-09-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of `reg.exe` exporting Windows Registry hives containing credentials. Adversaries may use this technique to export registry hives for offline credential access attacks. Typically found executed from a untrusted process or script. Upon execution, a file will be written to disk.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_reg` (Processes.process=*save* OR Processes.process=*export*) AND (Processes.process=\"*\\sam *\" OR Processes.process=\"*\\system *\" OR Processes.process=\"*\\security *\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `extraction_of_registry_hives_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "It is possible some agent based products will generate false positives. Filter as needed.", "references": ["https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.002/T1003.002.md"], "tags": {"analytic_story": ["DarkSide Ransomware", "Credential Dumping"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Credential Access", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.002/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Suspicious use of `reg.exe` exporting Windows Registry hives containing credentials executed on $dest$ by user $user$, with a parent process of $parent_process_id$", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process_id", "type": "Process", "role": ["Parent Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "(Processes.process_name=reg.exe OR Processes.original_file_name=reg.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_reg"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "extraction_of_registry_hives_filter"}]}, {"name": "Net Localgroup Discovery", "id": "54f5201e-155b-11ec-a6e2-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic will identify the use of localgroup discovery using `net localgroup`. During triage, review parallel processes and identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=net.exe OR Processes.process_name=net1.exe (Processes.process=\"*localgroup*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `net_localgroup_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be present. Tune as needed.", "references": ["https://attack.mitre.org/techniques/T1069/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md"], "tags": {"analytic_story": ["Active Directory Discovery", "Windows Discovery Techniques"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local group discovery on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "net_localgroup_discovery_filter"}]}, {"name": "Remote Process Instantiation via WinRM and Winrs", "id": "0dd296a2-4338-11ec-ba02-3e22fbd008af", "version": 1, "date": "2021-11-11", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `winrs.exe` with command-line arguments utilized to start a process on a remote endpoint. Red Teams and adversaries alike may abuse the WinRM protocol and this binary for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=winrs.exe OR Processes.original_file_name=winrs.exe) (Processes.process=\"*-r:*\" OR Processes.process=\"*-remote:*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_winrm_and_winrs_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may leverage WinRM and WinRs to start a process on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrs", "https://attack.mitre.org/techniques/T1021/006/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.006/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $dest", "mitre_attack_id": ["T1021", "T1021.006"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Windows Remote Management"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_winrm_and_winrs_filter"}]}, {"name": "ServicePrincipalNames Discovery with SetSPN", "id": "ae8b3efc-2d2e-11ec-8b57-acde48001122", "version": 1, "date": "2021-10-14", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `setspn.exe` usage related to querying the domain for Service Principle Names. typically, this is a precursor activity related to kerberoasting or the silver ticket attack. \\\nWhat is a ServicePrincipleName? \\\nA service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\\\nExample usage includes the following \\\n1. setspn -T offense -Q */* 1. setspn -T attackrange.local -F -Q MSSQLSvc/* 1. setspn -Q */* > allspns.txt 1. setspn -q \\\nValues \\\n1. -F = perform queries at the forest, rather than domain level 1. -T = perform query on the specified domain or forest (when -F is also used) 1. -Q = query for existence of SPN \\\nDuring triage, review parallel processes for further suspicious activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_setspn` (Processes.process=\"*-t*\" AND Processes.process=\"*-f*\") OR (Processes.process=\"*-q*\" AND Processes.process=\"**/**\") OR (Processes.process=\"*-q*\") OR (Processes.process=\"*-s*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `serviceprincipalnames_discovery_with_setspn_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be caused by Administrators resetting SPNs or querying for SPNs. Filter as needed.", "references": ["https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names", "https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/t1208-kerberoasting", "https://strontic.github.io/xcyclopedia/library/setspn.exe-5C184D581524245DAD7A0A02B51FD2C2.html", "https://attack.mitre.org/techniques/T1558/003/", "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx", "https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/", "https://blog.zsec.uk/paving-2-da-wholeset/", "https://msitpros.com/?p=3113", "https://adsecurity.org/?p=3466"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1558.003/atomic_red_team/windows-sysmon_setspn.log"], "impact": 80, "kill_chain_phases": ["Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to identify service principle names.", "mitre_attack_id": ["T1558.003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Kerberoasting"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "(Processes.process_name=setspn.exe OR Processes.original_file_name=setspn.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_setspn"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "serviceprincipalnames_discovery_with_setspn_filter"}]}, {"name": "Prevent Automatic Repair Mode using Bcdedit", "id": "7742aa92-c9d9-11eb-bbfc-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious bcdedit.exe execution to ignore all failures. This technique was used by ransomware to prevent the compromise machine automatically boot in repair mode.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"bcdedit.exe\" Processes.process = \"*bootstatuspolicy*\"  Processes.process = \"*ignoreallfailures*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `prevent_automatic_repair_mode_using_bcdedit_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed bcdedit.exe may be used.", "known_false_positives": "Administrators may modify the boot configuration ignore failure during testing and debugging.", "references": ["https://jsac.jpcert.or.jp/archive/2020/pdf/JSAC2020_1_tamada-yamazaki-nakatsuru_en.pdf"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Impact"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A suspicious process $process_name$ with process id $process_id$ contains commandline $process$ to ignore all bcdedit execution failure in host $dest$", "mitre_attack_id": ["T1490"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process_guid"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "prevent_automatic_repair_mode_using_bcdedit_filter"}]}, {"name": "Allow Network Discovery In Firewall", "id": "ccd6a38c-d40b-11eb-85a5-acde48001122", "version": 2, "date": "2021-06-23", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious modification to the firewall to allow network discovery on a machine. This technique was seen in couple of ransomware (revil, reddot) to discover other machine connected to the compromised host to encrypt more files.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= \"*firewall*\" Processes.process= \"*group=\\\"Network Discovery\\\"*\"  Processes.process=\"*enable*\" Processes.process=\"*Yes*\" by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_network_discovery_in_firewall_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "network admin may modify this firewall feature that may cause this rule to be triggered.", "references": ["https://kb.fortinet.com/kb/documentLink.do?externalID=FD52469", "https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1562.007", "T1562"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Cloud Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=netsh.exe OR Processes.original_file_name=netsh.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_netsh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "allow_network_discovery_in_firewall_filter"}]}, {"name": "Winword Spawning PowerShell", "id": "b2c950b8-9be2-11eb-8658-acde48001122", "version": 2, "date": "2021-04-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies Microsoft Word spawning PowerShell. Typically, this is not common behavior and not default with winword.exe. Winword.exe will generally be found in the following path `C:\\Program Files\\Microsoft Office\\root\\Office16` (version will vary). PowerShell spawning from winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command executed will most likely be encoded and captured via another detection. During triage, review parallel processes and identify any files that may have been written.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"winword.exe\" `process_powershell` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `winword_spawning_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, but if any are present, filter as needed.", "references": ["https://redcanary.com/threat-detection-report/techniques/powershell/", "https://attack.mitre.org/techniques/T1566/001/", "https://app.any.run/tasks/b79fa381-f35c-4b3e-8d02-507e7ee7342f/", "https://app.any.run/tasks/181ac90b-0898-4631-8701-b778a30610ad/"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "$parent_process_name$ on $dest$ by $user$ launched the following powershell process: $process_name$ which is very common in spearphishing attacks", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winword_spawning_powershell_filter"}]}, {"name": "Enumerate Users Local Group Using Telegram", "id": "fcd74532-ae54-11eb-a5ab-acde48001122", "version": 1, "date": "2021-05-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious Telegram process enumerating all network users in a local group. This technique was seen in a Monero infected honeypot to mapped all the users on the compromised system. EventCode 4798 is generated when a process enumerates a user's security-enabled local groups on a computer or device.", "search": "`wineventlog_security` EventCode=4798  Process_Name = \"*\\\\telegram.exe\" | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Process_Name  Process_ID Account_Name Account_Domain Logon_ID Security_ID Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `enumerate_users_local_group_using_telegram_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Task Schedule (Exa. Security Log EventCode 4798) endpoints. Tune and filter known instances of process like logonUI used in your environment.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4798"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/minergate/windows-security.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "The Telegram application has been identified enumerating local groups on $ComputerName$ by $user$.", "mitre_attack_id": ["T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "ComputerName", "EventCode", "Process_Name", "Process_ID", "Account_Name", "Account_Domain", "Logon_ID", "Security_ID", "Message"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "enumerate_users_local_group_using_telegram_filter"}]}, {"name": "More than usual number of LOLBAS applications in short time period", "id": "59c0dd70-169c-4900-9a1f-bfcf13302f93", "version": 2, "date": "2020-08-25", "author": "Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "Attacker activity may compromise executing several LOLBAS applications in conjunction to accomplish their objectives. We are looking for more than usual LOLBAS applications over a window of time, by building profiles per machine.", "search": " | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | where process_name==\"regsvcs.exe\" OR process_name==\"ftp.exe\" OR process_name==\"dfsvc.exe\" OR process_name==\"rasautou.exe\" OR process_name==\"schtasks.exe\" OR process_name==\"xwizard.exe\" OR process_name==\"findstr.exe\" OR process_name==\"esentutl.exe\" OR process_name==\"cscript.exe\" OR process_name==\"reg.exe\" OR process_name==\"csc.exe\" OR process_name==\"atbroker.exe\" OR process_name==\"print.exe\" OR process_name==\"pcwrun.exe\" OR process_name==\"vbc.exe\" OR process_name==\"rpcping.exe\" OR process_name==\"wsreset.exe\" OR process_name==\"ilasm.exe\" OR process_name==\"certutil.exe\" OR process_name==\"replace.exe\" OR process_name==\"mshta.exe\" OR process_name==\"bitsadmin.exe\" OR process_name==\"wscript.exe\" OR process_name==\"ieexec.exe\" OR process_name==\"cmd.exe\" OR process_name==\"microsoft.workflow.compiler.exe\" OR process_name==\"runscripthelper.exe\" OR process_name==\"makecab.exe\" OR process_name==\"forfiles.exe\" OR process_name==\"desktopimgdownldr.exe\" OR process_name==\"control.exe\" OR process_name==\"msbuild.exe\" OR process_name==\"register-cimprovider.exe\" OR process_name==\"tttracer.exe\" OR process_name==\"ie4uinit.exe\" OR process_name==\"sc.exe\" OR process_name==\"bash.exe\" OR process_name==\"hh.exe\" OR process_name==\"cmstp.exe\" OR process_name==\"mmc.exe\" OR process_name==\"jsc.exe\" OR process_name==\"scriptrunner.exe\" OR process_name==\"odbcconf.exe\" OR process_name==\"extexport.exe\" OR process_name==\"msdt.exe\" OR process_name==\"diskshadow.exe\" OR process_name==\"extrac32.exe\" OR process_name==\"eventvwr.exe\" OR process_name==\"mavinject.exe\" OR process_name==\"regasm.exe\" OR process_name==\"gpscript.exe\" OR process_name==\"rundll32.exe\" OR process_name==\"regsvr32.exe\" OR process_name==\"regedit.exe\" OR process_name==\"msiexec.exe\" OR process_name==\"gfxdownloadwrapper.exe\" OR process_name==\"presentationhost.exe\" OR process_name==\"regini.exe\" OR process_name==\"wmic.exe\" OR process_name==\"runonce.exe\" OR process_name==\"syncappvpublishingserver.exe\" OR process_name==\"verclsid.exe\" OR process_name==\"psr.exe\" OR process_name==\"infdefaultinstall.exe\" OR process_name==\"explorer.exe\" OR process_name==\"expand.exe\" OR process_name==\"installutil.exe\" OR process_name==\"netsh.exe\" OR process_name==\"wab.exe\" OR process_name==\"dnscmd.exe\" OR process_name==\"at.exe\" OR process_name==\"pcalua.exe\" OR process_name==\"cmdkey.exe\" OR process_name==\"msconfig.exe\" | stats count(process_name) as lolbas_counter by device,span(timestamp, 300s) | eval lolbas_counter=lolbas_counter*1.0 | rename window_end as timestamp | adaptive_threshold algorithm=\"quantile\" value=\"lolbas_counter\" entity=\"device\" window=2419200000L | where label AND quantile>0.99 | eval start_time = window_start, end_time = timestamp, entities = mvappend(device), body=create_map([\"lolbas_counter\", lolbas_counter, \"quantile\", quantile, \"device\", device]) | into write_ssa_detected_events();", "how_to_implement": "Collect endpoint data such as sysmon or 4688 events.", "known_false_positives": "Some administrative tasks may involve multiple use of LOLBAS applications in a short period of time. This might trigger false positives at the beginning when it hasn't collected yet enough data to construct the baseline.\n", "references": ["https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries"], "tags": {"analytic_story": ["Unusual Processes"], "cis20": ["CIS 8"], "confidence": 50, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A system process $process_name$ with commandline $cmd_line$ spawn iin short period of time in host $dest_device_id$", "mitre_attack_id": ["T1059", "T1053"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "processname", "role": ["Others"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["dest_device_id", "_time", "process_name"], "risk_score": 25, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "more_than_usual_number_of_lolbas_applications_in_short_time_period_filter"}]}, {"name": "Network Connection Discovery With Netstat", "id": "2cf5cc25-f39a-436d-a790-4857e5995ede", "version": 1, "date": "2021-09-10", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `netstat.exe` with command-line arguments utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use netstat.exe for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"netstat.exe\") (Processes.process=*-a*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_netstat_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1049/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1049/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1049"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Connections Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Tropic Trooper", "APT41", "APT38", "Soft Cell", "APT32", "APT1", "OilRig", "APT3", "menuPass", "Threat Group-3390", "Poseidon Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "network_connection_discovery_with_netstat_filter"}]}, {"name": "WBAdmin Delete System Backups", "id": "cd5aed7e-5cea-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for flags passed to wbadmin.exe (Windows Backup Administrator Tool) that delete backup files. This is typically used by ransomware to prevent recovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wbadmin.exe Processes.process=\"*delete*\" AND (Processes.process=\"*catalog*\" OR Processes.process=\"*systemstatebackup*\") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `wbadmin_delete_system_backups_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. Tune based on parent process names.", "known_false_positives": "Administrators may modify the boot configuration.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1490/T1490.md", "https://thedfirreport.com/2020/10/08/ryuks-return/", "https://attack.mitre.org/techniques/T1490/", "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wbadmin"], "tags": {"analytic_story": ["Ryuk Ransomware", "Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1490/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "System backups deletion on $dest$", "mitre_attack_id": ["T1490"], "nist": ["PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wbadmin_delete_system_backups_filter"}]}, {"name": "Impacket Lateral Movement Commandline Parameters", "id": "8ce07472-496f-11ec-ab3b-3e22fbd008af", "version": 1, "date": "2021-11-19", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the presence of suspicious commandline parameters typically present when using Impacket tools. Impacket is a collection of python classes meant to be used with Microsoft network protocols. There are multiple scripts that leverage impacket libraries like `wmiexec.py`, `smbexec.py`, `dcomexec.py` and `atexec.py` used to execute commands on remote endpoints. By default, these scripts leverage administrative shares and hardcoded parameters that can be used as a signature to detect its use. Red Teams and adversaries alike may leverage Impackets tools for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = \"*/c* \\\\\\\\127.0.0.1\\\\*\" OR Processes.process= \"*/c* 2>&1\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `impacket_lateral_movement_commandline_parameters_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Although uncommon, Administrators may leverage Impackets tools to start a process on remote systems for system administration or automation use cases.", "references": ["https://attack.mitre.org/techniques/T1021/002/", "https://attack.mitre.org/techniques/T1021/003/", "https://attack.mitre.org/techniques/T1047/", "https://attack.mitre.org/techniques/T1053/", "https://attack.mitre.org/techniques/T1053/005", "https://github.com/SecureAuthCorp/impacket", "https://vk9-sec.com/impacket-remote-code-execution-rce-on-windows-from-linux/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.003/impacket/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "Suspicious command line parameters on $dest may represent a lateral movement attack with Impackets tools", "mitre_attack_id": ["T1021", "T1021.002", "T1021.003", "T1047", "T1543.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "SMB/Windows Admin Shares", "Distributed Component Object Model", "Windows Management Instrumentation", "Windows Service"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement", "Lateral Movement", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT32", "Orangeworm", "FIN8", "APT3", "Lazarus Group", "Threat Group-1314", "Turla", "Deep Panda", "Ke3chang", "no", "Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "impacket_lateral_movement_commandline_parameters_filter"}]}, {"name": "Detect Rundll32 Application Control Bypass - syssetup", "id": "71b9bf37-cde1-45fb-b899-1b0aa6fa1183", "version": 2, "date": "2021-02-04", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe loading syssetup.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*syssetup* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___syssetup_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use syssetup.dll, triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://lolbas-project.github.io/lolbas/Libraries/Syssetup/", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ loading syssetup.dll by calling the LaunchINFSection function on the command line was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rundll32_application_control_bypass___syssetup_filter"}]}, {"name": "GetNetTcpconnection with PowerShell Script Block", "id": "091712ff-b02a-4d43-82ed-34765515d95d", "version": 1, "date": "2021-09-10", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-NetTcpconnection ` commandlet. This commandlet is used to return a listing of network connections on a compromised system. Red Teams and adversaries alike may use this commandlet for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-NetTcpconnection*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getnettcpconnection_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1049/", "https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-nettcpconnection?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1049/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1049"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Connections Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Tropic Trooper", "APT41", "APT38", "Soft Cell", "APT32", "APT1", "OilRig", "APT3", "menuPass", "Threat Group-3390", "Poseidon Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getnettcpconnection_with_powershell_script_block_filter"}]}, {"name": "PowerShell Get LocalGroup Discovery", "id": "b71adfcc-155b-11ec-9413-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic identifies the use of `get-localgroup` being used with PowerShell to identify local groups on the endpoint. During triage, review parallel processes and identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe) (Processes.process=\"*get-localgroup*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `powershell_get_localgroup_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be present. Tune as needed.", "references": ["https://attack.mitre.org/techniques/T1069/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local group discovery on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_get_localgroup_discovery_filter"}]}, {"name": "Disable Show Hidden Files", "id": "6f3ccfa2-91fe-11eb-8f9b-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic is to identify a modification in the Windows registry to prevent users from seeing all the files with hidden attributes. This event or techniques are known on some worm and trojan spy malware that will drop hidden files on the infected machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where (Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\Hidden\" OR Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\HideFileExt\" Registry.registry_value_data = \"0x00000001\") OR (Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowSuperHidden\" Registry.registry_value_data = \"0x00000000\") by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_show_hidden_files_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Disabled 'Show Hidden Files' on $dest$", "mitre_attack_id": ["T1564.001", "T1562.001", "T1564", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_nam"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Hidden Files and Directories", "Disable or Modify Tools", "Hide Artifacts", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Rocke", "APT32", "Tropic Trooper", "APT28", "Lazarus Group", "Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_show_hidden_files_filter"}]}, {"name": "Detect Renamed 7-Zip", "id": "4057291a-b8cf-11eb-95fe-acde48001122", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies renamed 7-Zip usage using Sysmon. At this stage of an attack, review parallel processes and file modifications for data that is staged or potentially have been exfiltrated. This analytic utilizes the OriginalFileName to capture the renamed process. During triage, validate this is the legitimate version of `7zip` by reviewing the PE metadata. In addition, review parallel processes for further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.original_file_name=7z*.exe AND Processes.process_name!=7z*.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_7_zip_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited false positives, however this analytic will need to be modified for each environment if Sysmon is not used.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1560.001/T1560.001.md"], "tags": {"analytic_story": ["Collection and Staging"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1560.001/archive_utility/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exfiltration"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$ on $dest$ by $user$.", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 27, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_renamed_7_zip_filter"}]}, {"name": "Disable Logs Using WevtUtil", "id": "236e7c8e-c9d9-11eb-a824-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect execution of wevtutil.exe to disable logs. This technique was seen in several ransomware to disable the event logs to evade alerts and detections.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"wevtutil.exe\" Processes.process = \"*sl*\" Processes.process = \"*/e:false*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disable_logs_using_wevtutil_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "network operator may disable audit event logs for debugging purposes.", "references": ["https://www.bleepingcomputer.com/news/security/new-ransom-x-ransomware-used-in-texas-txdot-cyberattack/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": [{"Source": "Endpoint"}, {"Stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "WevtUtil.exe used to disable Event Logging on $dest", "mitre_attack_id": ["T1070", "T1070.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process_guid"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Clear Windows Event Logs"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_logs_using_wevtutil_filter"}]}, {"name": "MS Scripting Process Loading WMI Module", "id": "2eba3d36-14a6-11ec-a682-acde48001122", "version": 1, "date": "2021-09-13", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious MS scripting process such as wscript.exe or cscript.exe that loading wmi module to process wmi query. This behavior was seen in FIN7 implant where it uses javascript to execute wmi query to parse host information that will send to its C2 server. this anomaly detections is a good initial step to hunt further a suspicious wmi query or wmi related events to the host that may give you good information regarding process that are commonly using wmi query or modules or might be an attacker using this technique.", "search": "`sysmon` EventCode =7 Image IN (\"*\\\\wscript.exe\", \"*\\\\cscript.exe\") ImageLoaded IN (\"*\\\\fastprox.dll\", \"*\\\\wbemdisp.dll\", \"*\\\\wbemprox.dll\", \"*\\\\wbemsvc.dll\" , \"*\\\\wmiutils.dll\", \"*\\\\wbemcomn.dll\") | stats min(_time) as firstTime max(_time) as lastTime count by Image EventCode process_name ProcessId ProcessGuid Computer ImageLoaded | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ms_scripting_process_loading_wmi_module_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "automation scripting language may used by network operator to do ldap query.", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/"], "tags": {"analytic_story": ["FIN7"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_js_2/sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "$process_name$ loading wmi modules $ImageLoaded$ in $dest$", "mitre_attack_id": ["T1059", "T1059.007"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "EventCode", "process_name", "ProcessId", "ProcessGuid", "Computer", "ImageLoaded"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "JavaScript/JScript"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT32", "FIN7", "Cobalt Group", "Molerats", "TA505", "Silence", "Leafminer"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ms_scripting_process_loading_wmi_module_filter"}]}, {"name": "Excessive Attempt To Disable Services", "id": "8fa2a0f0-acd9-11eb-8994-acde48001122", "version": 1, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic will identify suspicious series of command-line to disable several services. This technique is seen where the adversary attempts to disable security app services or other malware services to complete the objective on the compromised system.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where   Processes.process_name = \"sc.exe\" AND Processes.process=\"*config*\" OR Processes.process=\"*Disabled*\" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user _time span=1m | where count >=5 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_attempt_to_disable_services_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed sc.exe may be used.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An excessive amount of $process_name$ was executed on $dest$ attempting to disable services.", "mitre_attack_id": ["T1489"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_id", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Lazarus Group"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_attempt_to_disable_services_filter"}]}, {"name": "Creation of Shadow Copy with wmic and powershell", "id": "2ed8b538-d284-449a-be1d-82ad1dbd186b", "version": 3, "date": "2021-09-16", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects the use of wmic and Powershell to create a shadow copy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` OR `process_powershell` Processes.process=*shadowcopy* Processes.process=*create* by Processes.user Processes.process_name Processes.original_file_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `creation_of_shadow_copy_with_wmic_and_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Legtimate administrator usage of wmic to create a shadow copy.", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.003/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to create a shadow copy to perform offline password cracking.", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "creation_of_shadow_copy_with_wmic_and_powershell_filter"}]}, {"name": "WMI Permanent Event Subscription - Sysmon", "id": "ad05aae6-3b2a-4f73-af97-57bd26cee3b9", "version": 3, "date": "2020-12-08", "author": "Rico Valdez, Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "This analytic looks for the creation of WMI permanent event subscriptions. The following analytic identifies the use of WMI Event Subscription to establish persistence or perform privilege escalation.  WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges. This analytic is restricted by commonly added process execution and a path. If the volume is low enough, remove the values and flag on any new subscriptions.\\\nAll event subscriptions have three components \\\n1. Filter - WQL Query for the events we want. EventID = 19 \\\n1. Consumer - An action to take upon triggering the filter. EventID = 20 \\\n1. Binding - Registers a filter to a consumer. EventID = 21 \\\nMonitor for the creation of new WMI EventFilter, EventConsumer, and FilterToConsumerBinding. It may be pertinent to review all 3 to identify the flow of execution. In addition, EventCode 4104 may assist with any other PowerShell script usage that registered the subscription.", "search": "`sysmon` EventCode=21 | rename host as dest | table _time, dest, user, Operation, EventType, Query, Consumer, Filter | `wmi_permanent_event_subscription___sysmon_filter`", "how_to_implement": "To successfully implement this search, you must be collecting Sysmon data using Sysmon version 6.1 or greater and have Sysmon configured to generate alerts for WMI activity (eventID= 19, 20, 21). In addition, you must have at least version 6.0.4 of the Sysmon TA installed to properly parse the fields.", "known_false_positives": "Although unlikely, administrators may use event subscriptions for legitimate purposes.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1546.003/T1546.003.md", "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/", "https://github.com/trustedsec/SysmonCommunityGuide/blob/master/WMI-events.md", "https://in.security/an-intro-into-abusing-and-identifying-wmi-event-subscriptions-for-persistence/"], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.003/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ on $host$ executed the following suspicious WMI query: $Query$.  Filter: $filter$. Consumer: $Consumer$.  EventCode: $EventCode$", "mitre_attack_id": ["T1546.003", "T1546"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "host", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "host", "user", "Operation", "EventType", "Query", "Consumer", "Filter"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation Event Subscription", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["APT33", "Blue Mockingbird", "Turla", "Leviathan", "APT29", "no"]}, "macros": [{"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmi_permanent_event_subscription___sysmon_filter"}]}, {"name": "WinEvent Windows Task Scheduler Event Action Started", "id": "b3632472-310b-11ec-9aab-acde48001122", "version": 1, "date": "2021-10-19", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic assists with identifying suspicious tasks that have been registered and ran in Windows using EventID 200 (action run) and 201 (action completed). It is recommended to filter based on ActionName by specifying specific paths not used in your environment. After some basic tuning, this may be effective in capturing evasive ways to register tasks on Windows. Review parallel events related to tasks being scheduled. EventID 106 will generate when a new task is generated, however, that does not mean it ran. Capture any files on disk and analyze.", "search": "`wineventlog_task_scheduler` EventCode IN (\"200\",\"201\") | rename ComputerName as dest | stats count min(_time) as firstTime max(_time) as lastTime by Message dest EventCode category | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_windows_task_scheduler_event_action_started_filter`", "how_to_implement": "Task Scheduler logs are required to be collected. Enable logging with inputs.conf by adding a stanza for [WinEventLog://Microsoft-Windows-TaskScheduler/Operational] and renderXml=false. Note, not translating it in XML may require a proper extraction of specific items in the Message.", "known_false_positives": "False positives will be present. Filter based on ActionName paths or specify keywords of interest.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1053.005/T1053.005.md", "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IcedID", "Windows Persistence Techniques"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/windows_taskschedule/windows-taskschedule.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "A Scheduled Task was scheduled and ran on $dest$.", "mitre_attack_id": ["T1053.005"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "TaskName", "ActionName", "EventID", "dest", "ProcessID"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "source=\"WinEventLog:Microsoft-Windows-TaskScheduler/Operational\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_task_scheduler"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winevent_windows_task_scheduler_event_action_started_filter"}]}, {"name": "Network Connection Discovery With Net", "id": "640337e5-6e41-4b7f-af06-9d9eab5e1e2d", "version": 1, "date": "2021-09-10", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` with command-line arguments utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use net.exe for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"net.exe\" OR Processes.process_name=\"net1.exe\") (Processes.process=*use*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1049/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1049/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1049"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Connections Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Tropic Trooper", "APT41", "APT38", "Soft Cell", "APT32", "APT1", "OilRig", "APT3", "menuPass", "Threat Group-3390", "Poseidon Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "network_connection_discovery_with_net_filter"}]}, {"name": "Permission Modification using Takeown App", "id": "fa7ca5c6-c9d8-11eb-bce9-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a modification of file or directory permission using takeown.exe windows app. This technique was seen in some ransomware that take the ownership of a folder or files to encrypt or delete it.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"takeown.exe\" Processes.process = \"*/f*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `permission_modification_using_takeown_app_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "takeown.exe is a normal windows application that may used by network operator.", "references": ["https://research.nccgroup.com/2020/06/23/wastedlocker-a-new-ransomware-variant-developed-by-the-evil-corp-group/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A suspicious of execution of $process_name$ with process id $process_id$ and commandline $process$ to modify permission of directory or files in host $dest$", "mitre_attack_id": ["T1222"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process_guid"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "permission_modification_using_takeown_app_filter"}]}, {"name": "Suspicious microsoft workflow compiler usage", "id": "9bbc62e8-55d8-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies microsoft.workflow.compiler.exe usage. microsoft.workflow.compiler.exe is natively found in C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 and is rarely utilized. When investigating, identify the executed code on disk and review. It is not a commonly used process by many applications.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_microsoftworkflowcompiler` by Processes.dest Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_microsoft_workflow_compiler_usage_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, limited instances have been identified coming from native Microsoft utilities similar to SCCM.", "references": ["https://lolbas-project.github.io/lolbas/Binaries/Msbuild/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/T1218.md#atomic-test-6---microsoftworkflowcompilerexe-payload-execution"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious microsoft.workflow.compiler.exe process ran on $dest$ by $user$", "mitre_attack_id": ["T1127"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Trusted Developer Utilities Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "(Processes.process_name=microsoft.workflow.compiler.exe OR Processes.original_file_name=Microsoft.Workflow.Compiler.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_microsoftworkflowcompiler"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_microsoft_workflow_compiler_usage_filter"}]}, {"name": "Windows InstallUtil Uninstall Option with Network", "id": "1a52c836-43ef-11ec-a36c-acde48001122", "version": 1, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Windows InstallUtil.exe binary making a remote network connection. This technique may be used to download and execute code while bypassing application control using the `/u` (uninstall) switch. \\\nInstallUtil uses the functions install and uninstall within the System.Configuration.Install namespace to process .net assembly. Install function requires admin privileges, however, uninstall function can be run as an unprivileged user.\\\nWhen `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \\\nIf used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \\\nDuring triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (\"*/u*\", \"*uninstall*\") by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_guid [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port | `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name original_file_name process_path process process_guid connection_to_CNC dest_port | `windows_installutil_uninstall_option_with_network_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Ports` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present as InstallUtil is not typically used to download remote files. Filter as needed based on Developers requirements.", "references": ["https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_12", "https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/md/Installutil.exe.md", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md"], "tags": {"analytic_story": ["Signed Binary Proxy Execution InstallUtil"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.004/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ performing an uninstall.", "mitre_attack_id": ["T1218.004", "T1218"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id", "Ports.process_guid", "Ports.dest", "Ports.dest_port"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["InstallUtil", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=installutil.exe OR Processes.original_file_name=InstallUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_installutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_installutil_uninstall_option_with_network_filter"}]}, {"name": "Office Document Spawned Child Process To Download", "id": "6fed27d2-9ec7-11eb-8fe4-aa665a019aa3", "version": 3, "date": "2021-09-20", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect potential malicious office document executing lolbin child process to download payload or other malware. Since most of the attacker abused the capability of office document to execute living on land application to blend it to the normal noise in the infected machine to cover its track.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") Processes.process IN (\"*http:*\",\"*https:*\") NOT (Processes.original_file_name IN(\"firefox.exe\", \"chrome.exe\",\"iexplore.exe\",\"msedge.exe\"))  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_spawned_child_process_to_download_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances office application and browser may be used.", "known_false_positives": "Default browser not in the filter list.", "references": ["https://app.any.run/tasks/92d7ef61-bfd7-4c92-bc15-322172b4ebec/#"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/datasets2/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Office document spawning suspicious child process on $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_document_spawned_child_process_to_download_filter"}]}, {"name": "Windows Service Created With Suspicious Service Path", "id": "429141be-8311-11eb-adb6-acde48001122", "version": 2, "date": "2021-11-22", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytc uses Windows Event Id 7045, `New Service Was Installed`, to identify the creation of a Windows Service where the service binary path path is located in a non-common Service folder in Windows. Red Teams and adversaries alike may create malicious Services for lateral movement or remote code execution as well as persistence and execution. The Clop ransomware has also been seen in the wild abusing Windows services.", "search": " `wineventlog_system` EventCode=7045  Service_File_Name = \"*\\.exe\" NOT (Service_File_Name IN (\"C:\\\\Windows\\\\*\", \"C:\\\\Program File*\", \"C:\\\\Programdata\\\\*\", \"%systemroot%\\\\*\")) | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_created_with_suspicious_service_path_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Service name, Service File Name Service Start type, and Service Type from your endpoints.", "known_false_positives": "Legitimate applications may install services with uncommon services paths.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware", "Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-system.log"], "impact": 70, "kill_chain_phases": ["Privilege Escalation", "Lateral Movement"], "message": "A service $Service_File_Name$ was created from a non-standard path using $Service_Name$", "mitre_attack_id": ["T1569", "T1569.002"], "observable": [{"name": "Service_File_Name", "type": "Other", "role": ["Other"]}, {"name": "Service_Name", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "Service_File_Name", "Service_Type", "_time", "Service_Name", "Service_Start_Type"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["System Services", "Service Execution"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT41", "Silence", "FIN6", "APT32", "Honeybee", "Ke3chang"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_service_created_with_suspicious_service_path_filter"}]}, {"name": "Sdclt UAC Bypass", "id": "d71efbf6-da63-11eb-8c6e-acde48001122", "version": 1, "date": "2021-07-01", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious sdclt.exe registry modification. This technique is commonly seen when attacker try to bypassed UAC by using sdclt.exe application by modifying some registry that sdclt.exe tries to open or query with payload file path on it to be executed.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where (Registry.registry_path= \"*\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\control.exe*\" OR Registry.registry_path= \"*\\\\exefile\\\\shell\\\\runas\\\\command\\\\*\") (Registry.registry_value_name = \"(Default)\" OR Registry.registry_value_name = \"IsolatedCommand\") by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sdclt_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited to no false positives are expected.", "references": ["https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/", "https://github.com/hfiref0x/UACME", "https://www.cyborgsecurity.com/cyborg_labs/threat-hunt-deep-dives-user-account-control-bypass-via-registry-modification/"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/uac_bypass/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious modification of registry $registry_path$ with possible payload path $registry_value_name$ in $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sdclt_uac_bypass_filter"}]}, {"name": "Registry Keys for Creating SHIM Databases", "id": "f5f6af30-7aa7-4295-bfe9-07fe87c01bbb", "version": 3, "date": "2020-11-26", "author": "Bhavin Patel, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for registry activity associated with application compatibility shims, which can be leveraged by attackers for various nefarious purposes.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=*CurrentVersion\\\\AppCompatFlags\\\\Custom* OR Registry.registry_path=*CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB* by Registry.dest Registry.user | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `registry_keys_for_creating_shim_databases_filter`", "how_to_implement": "To successfully implement this search, you must populate the Change_Analysis data model. This is typically populated via endpoint detection and response product, such as Carbon Black or other endpoint data sources such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "There are many legitimate applications that leverage shim databases for compatibility purposes for legacy applications", "references": [], "tags": {"analytic_story": ["Suspicious Windows Registry Activities", "Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["source:endpoint", {"stage": "Privilege Escalation"}, "Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A registry activity in $registry_path$ related to shim modication in host $dest$", "mitre_attack_id": ["T1546.011", "T1546"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.dest", "Registry.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Application Shimming", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["FIN7", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "registry_keys_for_creating_shim_databases_filter"}]}, {"name": "Powershell Get LocalGroup Discovery with Script Block Logging", "id": "d7c6ad22-155c-11ec-bb64-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies PowerShell cmdlet - `get-localgroup` being ran. Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message = \"*get-localgroup*\" | stats count min(_time) as firstTime max(_time) as lastTime by Message OpCode ComputerName User EventCode| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_get_localgroup_discovery_with_script_block_logging_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives may be present. Tune as needed.", "references": ["https://www.splunk.com/en_us/blog/security/powershell-detections-threat-research-release-august-2021.html", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local group discovery on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_get_localgroup_discovery_with_script_block_logging_filter"}]}, {"name": "Drop IcedID License dat", "id": "b7a045fc-f14a-11eb-8e79-acde48001122", "version": 1, "date": "2021-07-30", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This search is to detect dropping a suspicious file named as \"license.dat\" in %appdata%. This behavior seen in latest IcedID malware that contain the actual core bot that will be injected in other process to do banking stealing.", "search": "`sysmon` EventCode= 11  TargetFilename = \"*\\\\license.dat\" AND (TargetFilename=\"*\\\\appdata\\\\*\" OR TargetFilename=\"*\\\\programdata\\\\*\") |stats count min(_time) as firstTime max(_time) as lastTime by TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_icedid_license_dat_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.cisecurity.org/white-papers/security-primer-icedid/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/simulated_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "process $SourceImage$ create a file $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1204", "T1204.002"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution", "Malicious File"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Whitefly", "Tropic Trooper", "Gamaredon Group", "Sharpshooter", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "RTM", "Inception", "BlackTech", "APT-C-36", "Machete", "admin@338", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "Cobalt Group", "DarkHydrus", "Gorgon Group", "Patchwork", "OilRig", "Dark Caracal", "MuddyWater", "Lazarus Group", "FIN7", "APT32", "Rancor", "APT37", "FIN8", "APT28", "Elderwood", "TA459", "APT29", "Leviathan", "menuPass", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "drop_icedid_license_dat_filter"}]}, {"name": "Process Writing DynamicWrapperX", "id": "b0a078e4-2601-11ec-9aec-acde48001122", "version": 1, "date": "2021-10-05", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "DynamicWrapperX is an ActiveX component that can be used in a script to call Windows API functions, but it requires the dynwrapx.dll to be installed and registered. With that, a binary writing dynwrapx.dll to disk and registering it into the registry is highly suspect. Why is it needed? In most malicious instances, it will be written to disk at a non-standard location. During triage, review parallel processes and pivot on the process_guid. Review the registry for any suspicious modifications meant to load dynwrapx.dll. Identify any suspicious module loads of dynwrapx.dll. This will identify the process that will invoke vbs/wscript/cscript.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time Processes.process_id Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)` | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=\"dynwrapx.dll\" by _time Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid Filesystem.user | `drop_dm_object_name(Filesystem)` | fields _time process_guid file_path file_name file_create_time user dest process_name] | stats count min(_time) as firstTime max(_time) as lastTime by dest process_name process_guid file_name file_path file_create_time user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_writing_dynamicwrapperx_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Filesystem` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, however it is possible to filter by Processes.process_name and specific processes (ex. wscript.exe). Filter as needed. This may need modification based on EDR telemetry and how it brings in registry data. For example, removal of (Default).", "references": ["https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/", "https://www.script-coding.com/dynwrapx_eng.html", "https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/", "https://tria.ge/210929-ap75vsddan", "https://www.virustotal.com/gui/file/cb77b93150cb0f7fe65ce8a7e2a5781e727419451355a7736db84109fa215a89"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $process_name$ was identified on endpoint $dest$ downloading the DynamicWrapperX dll.", "mitre_attack_id": ["T1059", "T1559.001"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "process_name", "process_guid", "file_name", "file_path", "file_create_time user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Component Object Model"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Gamaredon Group", "MuddyWater"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "process_writing_dynamicwrapperx_filter"}]}, {"name": "Mmc LOLBAS Execution Process Spawn", "id": "f6601940-4c74-11ec-b9b7-3e22fbd008af", "version": 1, "date": "2021-11-23", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `mmc.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the DCOM protocol and the MMC20 COM object, the executed command is spawned as a child processs of `mmc.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of mmc.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=mmc.exe) (Processes.process_name IN (\"Regsvcs.exe\", \"Ftp.exe\", \"OfflineScannerShell.exe\", \"Rasautou.exe\", \"Schtasks.exe\", \"Xwizard.exe\", \"Dllhost.exe\", \"Pnputil.exe\", \"Atbroker.exe\", \"Pcwrun.exe\", \"Ttdinject.exe\",\"Mshta.exe\", \"Bitsadmin.exe\", \"Certoc.exe\", \"Ieexec.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Runscripthelper.exe\", \"Forfiles.exe\", \"Msbuild.exe\", \"Register-cimprovider.exe\", \"Tttracer.exe\", \"Ie4uinit.exe\", \"Bash.exe\", \"Hh.exe\", \"SettingSyncHost.exe\", \"Cmstp.exe\", \"Mmc.exe\", \"Stordiag.exe\", \"Scriptrunner.exe\", \"Odbcconf.exe\", \"Extexport.exe\", \"Msdt.exe\", \"WorkFolders.exe\", \"Diskshadow.exe\", \"Mavinject.exe\", \"Regasm.exe\", \"Gpscript.exe\", \"Rundll32.exe\", \"Regsvr32.exe\", \"Msiexec.exe\", \"Wuauclt.exe\", \"Presentationhost.exe\", \"Wmic.exe\", \"Runonce.exe\", \"Syncappvpublishingserver.exe\", \"Verclsid.exe\", \"Infdefaultinstall.exe\", \"Explorer.exe\", \"Installutil.exe\", \"Netsh.exe\", \"Wab.exe\", \"Dnscmd.exe\", \"At.exe\", \"Pcalua.exe\", \"Msconfig.exe\")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mmc_lolbas_execution_process_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may trigger this behavior, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1021/003/", "https://www.cybereason.com/blog/dcom-lateral-movement-techniques", "https://lolbas-project.github.io/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.003/lateral_movement_lolbas/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Privilege Escalation"], "message": "Mmc.exe spawned a LOLBAS process on $dest", "mitre_attack_id": ["T1021", "T1021.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Distributed Component Object Model"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "mmc_lolbas_execution_process_spawn_filter"}]}, {"name": "WMIC XSL Execution via URL", "id": "787e9dd0-4328-11ec-a029-acde48001122", "version": 1, "date": "2021-11-11", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `wmic.exe` loading a remote XSL (eXtensible Stylesheet Language) script. This originally was identified by Casey Smith, dubbed Squiblytwo, as an application control bypass. Many adversaries will utilize this technique to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32 \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch. Upon identifying a suspicious execution, review for confirmed network connnection and script download.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process IN (\"*http://*\", \"*https://*\") Processes.process=\"*/format:*\" by Processes.parent_process_name Processes.original_file_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmic_xsl_execution_via_url_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives are limited as legitimate applications typically do not download files or xsl using WMIC. Filter as needed.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1220/T1220.md", "https://web.archive.org/web/20190814201250/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1220/T1220.md#atomic-test-4---wmic-bypass-using-remote-xsl-file"], "tags": {"analytic_story": ["Suspicious WMI Use"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1220/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ utilizing wmic to download a remote XSL script.", "mitre_attack_id": ["T1220"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["XSL Script Processing"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Cobalt Group"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmic_xsl_execution_via_url_filter"}]}, {"name": "Services LOLBAS Execution Process Spawn", "id": "ba9e1954-4c04-11ec-8b74-3e22fbd008af", "version": 1, "date": "2021-11-22", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `services.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Service Control Manager and creating a remote malicious service, the executed command is spawned as a child process of `services.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of services.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=services.exe) (Processes.process_name IN (\"Regsvcs.exe\", \"Ftp.exe\", \"OfflineScannerShell.exe\", \"Rasautou.exe\", \"Schtasks.exe\", \"Xwizard.exe\", \"Dllhost.exe\", \"Pnputil.exe\", \"Atbroker.exe\", \"Pcwrun.exe\", \"Ttdinject.exe\",\"Mshta.exe\", \"Bitsadmin.exe\", \"Certoc.exe\", \"Ieexec.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Runscripthelper.exe\", \"Forfiles.exe\", \"Msbuild.exe\", \"Register-cimprovider.exe\", \"Tttracer.exe\", \"Ie4uinit.exe\", \"Bash.exe\", \"Hh.exe\", \"SettingSyncHost.exe\", \"Cmstp.exe\", \"Mmc.exe\", \"Stordiag.exe\", \"Scriptrunner.exe\", \"Odbcconf.exe\", \"Extexport.exe\", \"Msdt.exe\", \"WorkFolders.exe\", \"Diskshadow.exe\", \"Mavinject.exe\", \"Regasm.exe\", \"Gpscript.exe\", \"Rundll32.exe\", \"Regsvr32.exe\", \"Msiexec.exe\", \"Wuauclt.exe\", \"Presentationhost.exe\", \"Wmic.exe\", \"Runonce.exe\", \"Syncappvpublishingserver.exe\", \"Verclsid.exe\", \"Infdefaultinstall.exe\", \"Explorer.exe\", \"Installutil.exe\", \"Netsh.exe\", \"Wab.exe\", \"Dnscmd.exe\", \"At.exe\", \"Pcalua.exe\", \"Msconfig.exe\")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `services_lolbas_execution_process_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may trigger this behavior, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1543/003/", "https://pentestlab.blog/2020/07/21/lateral-movement-services/", "https://lolbas-project.github.io/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/lateral_movement_lolbas/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "Services.exe spawned a LOLBAS process on $dest", "mitre_attack_id": ["T1543", "T1543.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "services_lolbas_execution_process_spawn_filter"}]}, {"name": "Allow Operation with Consent Admin", "id": "7de17d7a-c9d8-11eb-a812-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies a potential privilege escalation attempt to perform malicious task. This registry modification is designed to allow the `Consent Admin` to perform an operation that requires elevation without consent or credentials. We also found this in some attacker to gain privilege escalation to the compromise machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System*\" Registry.registry_value_name = ConsentPromptBehaviorAdmin Registry.registry_value_data = \"0x00000000\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `allow_operation_with_consent_admin_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpsb/341747f5-6b5d-4d30-85fc-fa1cc04038d4", "https://www.trendmicro.com/vinfo/no/threat-encyclopedia/malware/Ransom.Win32.MRDEC.MRA/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "Suspicious registry modification was performed on endpoint $dest$ by user $user$. This behavior is indicative of privilege escalation.", "mitre_attack_id": ["T1548"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "allow_operation_with_consent_admin_filter"}]}, {"name": "Process Creating LNK file in Suspicious Location", "id": "5d814af1-1041-47b5-a9ac-d754e82e9a26", "version": 5, "date": "2021-08-26", "author": "Jose Hernandez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for a process launching an `*.lnk` file under `C:\\User*` or `*\\Local\\Temp\\*`. This is common behavior used by various spear phishing tools.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=\"*.lnk\" AND (Filesystem.file_path=\"C:\\\\User\\\\*\" OR Filesystem.file_path=\"*\\\\Temp\\\\*\") by _time span=1h Filesystem.process_guid Filesystem.file_name Filesystem.file_path Filesystem.file_hash Filesystem.user | `drop_dm_object_name(Filesystem)` | rename process_guid as lnk_guid | join lnk_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=* by _time span=1h Processes.parent_process_guid Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process | `drop_dm_object_name(Processes)` | rename parent_process_guid as lnk_guid | fields _time lnk_guid process_id dest process_name process_path process] | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime, lastTime, lnk_guid, process_id, user, dest, file_name, file_path, process_name, process, process_path, file_hash | `process_creating_lnk_file_in_suspicious_location_filter`", "how_to_implement": "You must be ingesting data that records filesystem and process activity from your hosts to populate the Endpoint data model. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or endpoint data sources, such as Sysmon.", "known_false_positives": "This detection should yield little or no false positive results. It is uncommon for LNK files to be executed from temporary or user directories.", "references": ["https://attack.mitre.org/techniques/T1566/001/", "https://www.trendmicro.com/en_us/research/17/e/rising-trend-attackers-using-lnk-files-download-malware.html"], "tags": {"analytic_story": ["Spearphishing Attachments"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 7", "CIS 8"], "confidence": 90, "context": ["source:endpoint", {"stage": "Initial Access"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.002/lnk_file_temp_folder/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Installation", "Actions on Objectives"], "message": "A process $process_name$ that launching .lnk file in $file_path$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.002"], "nist": ["ID.AM", "PR.DS"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_name", "Filesystem.file_path", "Filesystem.process_id", "Filesystem.file_name", "Filesystem.file_path", "Filesystem.file_hash", "Filesystem.user"], "risk_score": 63, "security_domain": "network", "mitre_attack_technique": ["Phishing", "Spearphishing Link"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Windshift", "Molerats", "Mofang", "BlackTech", "Machete", "Kimsuky", "TA505", "Stolen Pencil", "APT39", "FIN4", "APT32", "Night Dragon", "Turla", "APT28", "Cobalt Group", "Dragonfly 2.0", "OilRig", "APT33", "Elderwood", "Leviathan", "Magic Hound", "Patchwork", "APT29", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "process_creating_lnk_file_in_suspicious_location_filter"}]}, {"name": "GetWmiObject DS User with PowerShell Script Block", "id": "fabd364e-04f3-11ec-b34b-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet. The `DS_User` class parameter leverages WMI to query for all domain users. Red Teams and adversaries may leverage this commandlet to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message = \"*get-wmiobject*\" Message = \"*ds_user*\" Message = \"*-namespace*\" Message = \"*root\\\\directory\\\\ldap*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_user_with_powershell_script_block_filter`", "how_to_implement": "he following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://www.blackhillsinfosec.com/red-blue-purple/", "https://docs.microsoft.com/en-us/windows/win32/wmisdk/describing-the-ldap-namespace"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ for user enumeration", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_user_with_powershell_script_block_filter"}]}, {"name": "USN Journal Deletion", "id": "b6e0ff70-b122-4227-9368-4cf322ab43c3", "version": 2, "date": "2018-12-03", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | search process=\"*deletejournal*\" AND process=\"*usn*\" | `usn_journal_deletion_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 6", "CIS 8", "CIS 10"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "Possible USN journal deletion on $dest$", "mitre_attack_id": ["T1070"], "nist": ["DE.CM", "PR.PT", "DE.AE", "DE.DP", "PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process", "Processes.process_name", "Processes.user", "Processes.parent_process_name", "Processes.dest"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "usn_journal_deletion_filter"}]}, {"name": "Modification Of Wallpaper", "id": "accb0712-c381-11eb-8e5b-acde48001122", "version": 1, "date": "2021-06-02", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies suspicious modification of registry to deface or change the wallpaper of a compromised machines as part of its payload. This technique was commonly seen in ransomware like REVIL where it create a bitmap file contain a note that the machine was compromised and make it as a wallpaper.", "search": "`sysmon` EventCode =13  (TargetObject= \"*\\\\Control Panel\\\\Desktop\\\\Wallpaper\" AND Image != \"*\\\\explorer.exe\") OR (TargetObject= \"*\\\\Control Panel\\\\Desktop\\\\Wallpaper\" AND Details = \"*\\\\temp\\\\*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Image TargetObject Details  Computer process_guid process_id user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `modification_of_wallpaper_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Image, TargetObject registry key, registry Details from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "3rd party tool may used to changed the wallpaper of the machine", "references": ["https://krebsonsecurity.com/2021/05/a-closer-look-at-the-darkside-ransomware-gang/", "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware", "BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf1/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "Wallpaper modification on $dest$", "mitre_attack_id": ["T1491"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Image", "TargetObject", "Details", "Computer", "process_guid", "process_id", "user_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Defacement"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "modification_of_wallpaper_filter"}]}, {"name": "WevtUtil Usage To Clear Logs", "id": "5438113c-cdd9-11eb-93b8-acde48001122", "version": 2, "date": "2021-06-15", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The wevtutil.exe application is the windows event log utility. This searches for wevtutil.exe with parameters for clearing the application, security, setup, powershell, sysmon, or system event logs.", "search": "| from read_ssa_enriched_events() | where \"Endpoint_Processes\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"% cl %\") AND (match_regex(cmd_line, /(?i)security/)=true OR match_regex(cmd_line, /(?i)system/)=true OR match_regex(cmd_line, /(?i)sysmon/)=true OR match_regex(cmd_line, /(?i)application/)=true OR match_regex(cmd_line, /(?i)setup/)=true OR match_regex(cmd_line, /(?i)powershell/)=true) AND process_name=\"wevtutil.exe\" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | eval body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "The wevtutil.exe application is a legitimate Windows event log utility. Administrators may use it to manage Windows event logs.", "references": ["https://www.splunk.com/en_us/blog/security/detecting-clop-ransomware.html"], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware", "Clop Ransomware"], "cis20": ["CIS 8", "CIS 13"], "confidence": 90, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/ssa_wevtutil/clear_evt.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A wevtutil process $process_name$ with commandline $cmd_line$ to clear event logs in host $dest_device_id$", "mitre_attack_id": ["T1070", "T1070.001"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process"], "risk_score": 63, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Clear Windows Event Logs"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wevtutil_usage_to_clear_logs_filter"}]}, {"name": "Create local admin accounts using net exe", "id": "b89919ed-fe5f-492c-b139-151bb162040e", "version": 6, "date": "2021-09-08", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for the creation of local administrator accounts using net.exe .", "search": "| tstats `security_content_summariesonly` count values(Processes.user) as user values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=net.exe OR Processes.process_name=net1.exe) AND Processes.process=*/add* AND (Processes.process=*administrators* OR Processes.process=*administratoren* OR Processes.process=*administrateurs* OR Processes.process=*administrador* OR Processes.process=*amministratori* OR Processes.process=*administratorer*) by Processes.process Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `create_local_admin_accounts_using_net_exe_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Administrators often leverage net.exe to create admin accounts.", "references": [], "tags": {"analytic_story": ["DHS Report TA18-074A"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.001/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to add a user to the local Administrators group.", "mitre_attack_id": ["T1136.001", "T1136"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Local Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["APT39", "APT41", "Dragonfly 2.0", "Leafminer", "APT3", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "create_local_admin_accounts_using_net_exe_filter"}]}, {"name": "Resize Shadowstorage Volume", "id": "dbc30554-d27e-11eb-9e5e-acde48001122", "version": 3, "date": "2021-11-30", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies the resizing of shadowstorage using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%resize%\") AND like(cmd_line, \"%shadowstorage%\") AND like(cmd_line, \"%maxsize%\") AND process_name=\"vssadmin.exe\" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "System administrators may resize the shadowstorage for valid purposes. Filter as needed.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware", "Ransomware"], "cis20": ["CIS 10", "CIS 13"], "confidence": 80, "context": ["Source:Endpoint", "stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/windows-security.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to create a shadow copy to perform offline password cracking.", "mitre_attack_id": ["T1489"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 64, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Lazarus Group"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "resize_shadowstorage_volume_filter"}]}, {"name": "Detect Regsvcs with Network Connection", "id": "e3e7a1c0-f2b9-445c-8493-f30a63522d1a", "version": 1, "date": "2021-02-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies Regsvcs.exe with a network connection to a public IP address, exluding private IP space. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. By contacting a remote command and control server, the adversary will have the ability to escalate privileges and complete the objectives. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. Review the reputation of the remote IP or domain and block as needed. regsvcs.exe and regasm.exe are natively found in C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe.", "search": "`sysmon` EventID=3 dest_ip!=10.0.0.0/12 dest_ip!=172.16.0.0/12 dest_ip!=192.168.0.0/16 process_name=regsvcs.exe | rename Computer as dest | stats count min(_time) as firstTime max(_time) as lastTime by dest, User, process_name, src_ip, dest_host, dest_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regsvcs_with_network_connection_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Although unlikely, limited instances of regsvcs.exe may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $process_name$ contacting a remote destination was identified on endpoint $Computer$ by user $user$. This behavior is not normal for $process_name$.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "dest_ip", "process_name", "Computer", "User", "src_ip", "dest_host"], "risk_score": 80, "security_domain": "Endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regsvcs_with_network_connection_filter"}]}, {"name": "SLUI RunAs Elevated", "id": "8d124810-b3e4-11eb-96c7-acde48001122", "version": 1, "date": "2021-05-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Microsoft Software Licensing User Interface Tool, `slui.exe`, elevating access using the `-verb runas` function. This particular bypass utilizes a registry key/value. Identified by two sources, the registry keys are `HKCU\\Software\\Classes\\exefile\\shell` and `HKCU\\Software\\Classes\\launcher.Systemsettings\\Shell\\open\\command`. To simulate this behavior, multiple POC are available. The analytic identifies the use of `runas` by `slui.exe`.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=slui.exe (Processes.process=*-verb* Processes.process=*runas*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `slui_runas_elevated_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited false positives should be present as this is not commonly used by legitimate applications.", "references": ["https://www.exploit-db.com/exploits/46998", "https://medium.com/@mattharr0ey/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b", "https://gist.github.com/r00t-3xp10it/0c92cd554d3156fd74f6c25660ccc466", "https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_sluihijack/", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html"], "tags": {"analytic_story": ["DarkSide Ransomware", "Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Privilege Escalation"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/slui/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A slui process $process_name$ with elevated commandline $process$ in host $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "slui_runas_elevated_filter"}]}, {"name": "ServicePrincipalNames Discovery with PowerShell", "id": "13243068-2d38-11ec-8908-acde48001122", "version": 1, "date": "2021-10-14", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `powershell.exe` usage, using Script Block Logging EventCode 4104, related to querying the domain for Service Principle Names. typically, this is a precursor activity related to kerberoasting or the silver ticket attack. \\\nWhat is a ServicePrincipleName? \\\nA service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\\\nThe following analytic identifies the use of KerberosRequestorSecurityToken class within the script block. Using .NET System.IdentityModel.Tokens.KerberosRequestorSecurityToken class in PowerShell is the equivelant of using setspn.exe. \\\nDuring triage, review parallel processes for further suspicious activity.", "search": "`powershell` EventCode=4104 Message=\"*KerberosRequestorSecurityToken*\" | stats count min(_time) as firstTime max(_time) as lastTime by Message OpCode ComputerName User EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `serviceprincipalnames_discovery_with_powershell_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives should be limited, however filter as needed.", "references": ["https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names", "https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8", "https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/t1208-kerberoasting", "https://strontic.github.io/xcyclopedia/library/setspn.exe-5C184D581524245DAD7A0A02B51FD2C2.html", "https://attack.mitre.org/techniques/T1558/003/", "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx", "https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/", "https://blog.zsec.uk/paving-2-da-wholeset/", "https://msitpros.com/?p=3113", "https://adsecurity.org/?p=3466", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1558.003/atomic_red_team/windows-powershell_kerberos.log"], "impact": 80, "kill_chain_phases": ["Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to identify service principle names.", "mitre_attack_id": ["T1558.003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Kerberoasting"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "serviceprincipalnames_discovery_with_powershell_filter"}]}, {"name": "Detect Regasm Spawning a Process", "id": "72170ec5-f7d2-42f5-aefb-2b8be6aad15f", "version": 1, "date": "2021-02-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies regasm.exe spawning a process. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. Spawning of a child process is rare from either process and should be investigated further. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. regsvcs.exe and regasm.exe are natively found in C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=regasm.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regasm_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Although unlikely, limited instances of regasm.exe or regsvcs.exe may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/", "https://lolbas-project.github.io/lolbas/Binaries/Regasm/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ spawning a child process, typically not normal behavior for $parent_process_name$.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regasm_spawning_a_process_filter"}]}, {"name": "MS Scripting Process Loading Ldap Module", "id": "0b0c40dc-14a6-11ec-b267-acde48001122", "version": 1, "date": "2021-09-13", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious MS scripting process such as wscript.exe or cscript.exe that loading ldap module to process ldap query. This behavior was seen in FIN7 implant where it uses javascript to execute ldap query to parse host information that will send to its C2 server. this anomaly detections is a good initial step to hunt further a suspicious ldap query or ldap related events to the host that may give you good information regarding ldap or AD information processing or might be a attacker.", "search": "`sysmon` EventCode =7 Image IN (\"*\\\\wscript.exe\", \"*\\\\cscript.exe\") ImageLoaded IN (\"*\\\\Wldap32.dll\", \"*\\\\adsldp.dll\", \"*\\\\adsldpc.dll\") | stats min(_time) as firstTime max(_time) as lastTime count by Image EventCode process_name ProcessId ProcessGuid Computer ImageLoaded | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ms_scripting_process_loading_ldap_module_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "automation scripting language may used by network operator to do ldap query.", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/"], "tags": {"analytic_story": ["FIN7"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_js_2/sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "$process_name$ loading ldap modules $ImageLoaded$ in $dest$", "mitre_attack_id": ["T1059", "T1059.007"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "EventCode", "process_name", "ProcessId", "ProcessGuid", "Computer", "ImageLoaded"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "JavaScript/JScript"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT32", "FIN7", "Cobalt Group", "Molerats", "TA505", "Silence", "Leafminer"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ms_scripting_process_loading_ldap_module_filter"}]}, {"name": "High Process Termination Frequency", "id": "17cd75b2-8666-11eb-9ab4-acde48001122", "version": 1, "date": "2021-03-16", "author": "Teoderick Contreras", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytics are designed to indentify a high frequency of process termination on a machine which is a common behavior of ransomware malware before encrypting files. This technique is designed to avoid an exception error while accessing (docs, images, database and etc..) in the infected machine for encryption.", "search": "`sysmon` EventCode=5 |bin _time span=3s |stats values(Image) as proc_terminated min(_time) as firstTime max(_time) as lastTime  count by Computer EventCode ProcessID | where count >= 15 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `high_process_termination_frequency_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Image (process full path of terminated process) from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user tool that can terminate multiple process.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "High frequency process termination (more than 15 processes within 3s) detected on host $Computer$", "mitre_attack_id": ["T1486"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "proc_terminated", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "Image", "Computer", "_time", "ProcessID"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "high_process_termination_frequency_filter"}]}, {"name": "Enable RDP In Other Port Number", "id": "99495452-b899-11eb-96dc-acde48001122", "version": 1, "date": "2021-05-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a modification to registry to enable rdp to a machine with different port number. This technique was seen in some atttacker tries to do lateral movement and remote access to a compromised machine to gain control of it.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp*\" Registry.registry_value_name = \"PortNumber\" by Registry.dest Registry.user Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `enable_rdp_in_other_port_number_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.mvps.net/docs/how-to-secure-remote-desktop-rdp/"], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/casper/datasets1/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "RDP was moved to a non-standard port on $dest$ by $user$.", "mitre_attack_id": ["T1021"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.dest", "Registry.user", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services"], "mitre_attack_tactics": ["Lateral Movement"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "enable_rdp_in_other_port_number_filter"}]}, {"name": "Allow Inbound Traffic In Firewall Rule", "id": "a5d85486-b89c-11eb-8267-acde48001122", "version": 1, "date": "2021-05-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies suspicious PowerShell command to allow inbound traffic inbound to a specific local port within the public profile. This technique was seen in some attacker want to have a remote access to a machine by allowing the traffic in firewall rule.", "search": "`powershell` EventCode=4104 Message = \"*firewall*\" Message = \"*Inbound*\" Message = \"*Allow*\"  Message = \"*-LocalPort*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_inbound_traffic_in_firewall_rule_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the powershell logs  from your endpoints. make sure you enable needed registry to monitor this event.", "known_false_positives": "administrator may allow inbound traffic in certain network or machine.", "references": ["https://docs.microsoft.com/en-us/powershell/module/netsecurity/new-netfirewallrule?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/casper/datasets1/windows-powershell.log"], "impact": 10, "kill_chain_phases": ["Exploitation"], "message": "Suspicious firewall modification detected on endpoint $ComputerName$ by user $user$.", "mitre_attack_id": ["T1021.001", "T1021"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 3, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Desktop Protocol", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "TEMP.Veles", "Leviathan", "APT39", "Stolen Pencil", "Cobalt Group", "Dragonfly 2.0", "FIN8", "APT3", "OilRig", "menuPass", "FIN10", "Patchwork", "FIN6", "Lazarus Group", "APT1", "Axiom", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "allow_inbound_traffic_in_firewall_rule_filter"}]}, {"name": "Possible Browser Pass View Parameter", "id": "8ba484e8-4b97-11ec-b19a-acde48001122", "version": 1, "date": "2021-11-22", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious process contains a commandline parameter related to web browser credential dumper. This technique was used by Remcos RAT malware where it use the techique of Nirsoft webbrowserpassview.exe application to dump web browser credentials. Remcos use the \"/stext\" commandline to dump the credential in text format. This Hunting query is good indicator to look further for possible remcos infection within the network or possible compromised host. Since the detections is only base on the parameter command and the possible path where it will drop the text credential information, It may catch normal tools that having same command and behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process  IN (\"*/stext *\", \"*/shtml *\", \"*/LoadPasswordsIE*\", \"*/LoadPasswordsFirefox*\", \"*/LoadPasswordsChrome*\", \"*/LoadPasswordsOpera*\", \"*/LoadPasswordsSafari*\" , \"*/UseOperaPasswordFile*\", \"*/OperaPasswordFile*\",\"*/stab*\", \"*/scomma*\", \"*/stabular*\", \"*/shtml*\", \"*/sverhtml*\", \"*/sxml*\", \"*/skeepass*\" ) AND Processes.process IN (\"*\\\\temp\\\\*\", \"*\\\\users\\\\public\\\\*\", \"*\\\\programdata\\\\*\") by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `possible_browser_pass_view_parameter_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "False positive is quite limited. Filter is needed", "references": ["https://www.nirsoft.net/utils/web_browser_password.html", "https://app.any.run/tasks/df0baf9f-8baf-4c32-a452-16562ecb19be/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 40, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1555/web_browser_pass_view/sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "suspicious process $process_name$ contains commandline $process$ on $dest$", "mitre_attack_id": ["T1555.003", "T1555"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 16, "security_domain": "endpoint", "mitre_attack_technique": ["Credentials from Web Browsers", "Credentials from Password Stores"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Magic Hound", "Sandworm Team", "Inception", "Stealth Falcon", "OilRig", "Leafminer", "APT33", "APT3", "Kimsuky", "TA505", "Stolen Pencil", "MuddyWater", "APT37", "Patchwork", "Molerats", "APT39", "OilRig", "MuddyWater", "Leafminer", "APT33", "Turla", "Stealth Falcon"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "possible_browser_pass_view_parameter_filter"}]}, {"name": "Detect mshta inline hta execution", "id": "a0873b32-5b68-11eb-ae93-0242ac130002", "version": 6, "date": "2021-09-16", "author": "Bhavin Patel, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies \"mshta.exe\" execution with inline protocol handlers. \"JavaScript\", \"VBScript\", and \"About\" are the only supported options when invoking HTA content directly on the command-line. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process \"mshta.exe\" and its parent process.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_mshta` (Processes.process=*vbscript* OR Processes.process=*javascript* OR Processes.process=*about*) by Processes.user Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mshta_inline_hta_execution_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may exhibit this behavior, triggering a false positive.", "references": ["https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/", "https://docs.microsoft.com/en-us/windows/win32/search/-search-3x-wds-extidx-prot-implementing"], "tags": {"analytic_story": ["Suspicious MSHTA Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ executing with inline HTA, indicative of defense evasion.", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=mshta.exe OR Processes.original_file_name=MSHTA.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_mshta"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_mshta_inline_hta_execution_filter"}]}, {"name": "Common Ransomware Extensions", "id": "a9e5c5db-db11-43ca-86a8-c852d1b2c0ec", "version": 4, "date": "2020-11-09", "author": "David Dorsey, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The search looks for file modifications with extensions commonly used by Ransomware", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`| rex field=file_name \"(?<file_extension>\\.[^\\.]+)$\" | `ransomware_extensions` | `common_ransomware_extensions_filter`", "how_to_implement": "You must be ingesting data that records the filesystem activity from your hosts to populate the Endpoint file-system data model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.\\\nThis search produces fields (`query`,`query_length`,`count`) that are not yet supported by ES Incident Review and therefore cannot be viewed when a notable event is raised. These fields contribute additional context to the notable. To see the additional metadata, add the following fields, if not already present, to Incident Review - Event Attributes (Configure > Incident Management > Incident Review Settings > Add New Entry):\\\\n1. **Label:** Name, **Field:** Name\\\n1. \\\n1. **Label:** File Extension, **Field:** file_extension\\\nDetailed documentation on how to create a new field within Incident Review may be found here: `https://docs.splunk.com/Documentation/ES/5.3.0/Admin/Customizenotables#Add_a_field_to_the_notable_event_details`", "known_false_positives": "It is possible for a legitimate file with these extensions to be created. If this is a true ransomware attack, there will be a large number of files created with these extensions.", "references": [], "tags": {"Consequence": "Data Destruction", "analytic_story": ["SamSam Ransomware", "Ryuk Ransomware", "Ransomware", "Clop Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1485/ransomware_extensions/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "A file - $file_name$ was written to disk on endpoint $dest$ by user $user$, this is indicative of a known ransomware file extension and should be reviewed immediately.", "mitre_attack_id": ["T1485"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.user", "Filesystem.dest", "Filesystem.file_path", "Filesystem.file_name"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "lookup update=true ransomware_extensions_lookup Extensions AS file_extension OUTPUT Name | search Name !=False", "description": "This macro limits the output to files that have extensions associated with ransomware", "name": "ransomware_extensions", "lookups": [{"default_match": "false", "description": "A list of file extensions that are associated with ransomware", "filename": "ransomware_extensions.csv", "match_type": "WILDCARD(Extensions)", "min_matches": 1, "name": "ransomware_extensions_lookup", "case_sensitive_match": "false", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/ransomware_extensions.csv"}]}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "common_ransomware_extensions_filter"}]}, {"name": "Powershell Execute COM Object", "id": "65711630-f9bf-11eb-8d72-acde48001122", "version": 1, "date": "2021-08-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a COM CLSID execution through powershell. This technique was seen in several adversaries and malware like ransomware conti where it has a feature to execute command using COM Object. This technique may use by network operator at some cases but a good indicator if some application want to gain privilege escalation or bypass uac.", "search": "`powershell` EventCode=4104 Message = \"*CreateInstance([type]::GetTypeFromCLSID*\" OR Message = \"*CreateInstance([Type]::GetTypeFromProgID*\"| stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_execute_com_object_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "network operrator may use this command.", "references": ["https://threadreaderapp.com/thread/1423361119926816776.html"], "tags": {"analytic_story": ["Malicious PowerShell", "Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/conti/conti_leak/windows-powershell.log"], "impact": 10, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains COM CLSID command in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1546.015", "T1546"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 5, "security_domain": "endpoint", "mitre_attack_technique": ["Component Object Model Hijacking", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["APT28", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_execute_com_object_filter"}]}, {"name": "Rundll32 Control RunDLL World Writable Directory", "id": "1adffe86-10c3-11ec-8ce6-acde48001122", "version": 1, "date": "2021-09-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies rundll32.exe with `control_rundll` within the command-line, loading a .cpl or another file type from windows\\temp, programdata, or appdata. Developed in relation to CVE-2021-40444. Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. This is written to be a bit more broad by not including .cpl. The paths are specified, add more as needed. During triage, review parallel processes to identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE) Processes.process=*Control_RunDLL* AND Processes.process IN (\"*\\\\appdata\\\\*\", \"*\\\\windows\\\\temp\\\\*\", \"*\\\\programdata\\\\*\")  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_control_rundll_world_writable_directory_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "This may be tuned, or a new one related, by adding .cpl to command-line. However, it's important to look for both. Tune/filter as needed.", "references": ["https://strontic.github.io/xcyclopedia/library/rundll32.exe-111474C61232202B5B588D2B512CBB25.html", "https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://attack.mitre.org/techniques/T1218/011/", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.002/T1218.002.yaml"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.002/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to load a suspicious file from disk.", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_control_rundll_world_writable_directory_filter"}]}, {"name": "Detect Renamed WinRAR", "id": "1b7bfb2c-b8e6-11eb-99ac-acde48001122", "version": 3, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analtyic identifies renamed instances of `WinRAR.exe`. In most cases, it is not common for WinRAR to be used renamed, however it is common to be installed by a third party application and executed from a non-standard path. During triage, validate additional metadata from the binary that this is `WinRAR`. Review parallel processes and file modifications.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.original_file_name=WinRAR.exe (Processes.process_name!=rar.exe OR Processes.process_name!=winrar.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_winrar_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Unknown. It is possible third party applications use renamed instances of WinRAR.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1560.001/T1560.001.md"], "tags": {"analytic_story": ["Collection and Staging"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1560.001/archive_utility/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation", "Exfiltration"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$ on $dest$ by $user$.", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 27, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_renamed_winrar_filter"}]}, {"name": "Get-ForestTrust with PowerShell", "id": "584f4884-0bf1-11ec-a5ec-acde48001122", "version": 1, "date": "2021-09-02", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies Get-ForestTrust from PowerSploit in order to gather domain trust information. Typically, this is utilized within a script being executed and used to enumerate the domain trust information. This grants the adversary an understanding of how large or small the domain is. During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe Processes.process=*get-foresttrust* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_foresttrust_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives as this requires an active Administrator or adversary to bring in, import, and execute.", "references": ["https://powersploit.readthedocs.io/en/latest/Recon/Get-ForestTrust/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 40, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious PowerShell Get-ForestTrust was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1482"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 12, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_foresttrust_with_powershell_filter"}]}, {"name": "Anomalous usage of Archive Tools", "id": "63614a58-10e2-4c6c-ae81-ea1113681439", "version": 1, "date": "2021-11-22", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "The following detection identifies the usage of archive tools from the command line.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event,\"_time\"), \"string\", null)), process=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), parent_process=ucast(map_get(input_event, \"parent_process\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where process_name IS NOT NULL AND parent_process_name IS NOT NULL | where like(process_name, \"7z%\") OR process_name=\"WinRAR.exe\" OR like(process_name, \"winzip%\") | where like(parent_process_name, \"%cmd.exe\") OR like(parent_process_name, \"%powershell.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "False positives can be ligitmate usage of archive tools from the command line.", "references": ["https://attack.mitre.org/techniques/T1560/001/"], "tags": {"analytic_story": ["Cobalt Strike", "NOBELIUM Group"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1560.001/archive_tools/windows-security.log"], "impact": 70, "kill_chain_phases": ["Actions on Objective"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$. This behavior is indicative of suspicious loading of 7zip.", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "anomalous_usage_of_archive_tools_filter"}]}, {"name": "GetWmiObject DS User with PowerShell", "id": "22d3b118-04df-11ec-8fa3-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain users. The `Get-WmiObject` commandlet combined with the `-class ds_user` parameter can be used to return the full list of users in a Windows domain. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*get-wmiobject*\" AND Processes.process = \"*ds_user*\" AND Processes.process = \"*root\\\\directory\\\\ldap*\" AND Processes.process = \"*-namespace*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_user_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://jpcertcc.github.io/ToolAnalysisResultSheet/details/dsquery.htm"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_user_with_powershell_filter"}]}, {"name": "Start Up During Safe Mode Boot", "id": "c6149154-c9d8-11eb-9da7-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a modification or registry add to the safeboot registry as an autostart mechanism. This technique was seen in some ransomware to automatically execute its code upon a safe mode boot.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*\\\\System\\\\CurrentControlSet\\\\Control\\\\SafeBoot\\\\Minimal\\*\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `start_up_during_safe_mode_boot_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "updated windows application needed in safe boot may used this registry", "references": ["https://malware.news/t/threat-analysis-unit-tau-threat-intelligence-notification-snatch-ransomware/36365"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "Safeboot registry $registry_path$ was added or modified with a new value $registry_value_name$ on $dest$", "mitre_attack_id": ["T1547.001", "T1547"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Registry Run Keys / Startup Folder", "Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Rocke", "Tropic Trooper", "Gamaredon Group", "Sharpshooter", "Molerats", "Silence", "RTM", "Inception", "APT41", "Machete", "Kimsuky", "APT33", "APT39", "APT32", "APT18", "Turla", "Dark Caracal", "Cobalt Group", "Honeybee", "Threat Group-3390", "Dragonfly 2.0", "Gorgon Group", "Ke3chang", "APT19", "Leviathan", "MuddyWater", "APT37", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "FIN7", "Patchwork", "FIN6", "Lazarus Group", "Putter Panda", "APT29", "Darkhotel", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "start_up_during_safe_mode_boot_filter"}]}, {"name": "Suspicious mshta spawn", "id": "4d33a488-5b5f-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies wmiprvse.exe spawning mshta.exe. This behavior is indicative of a DCOM object being utilized to spawn mshta from wmiprvse.exe or svchost.exe. In this instance, adversaries may use LethalHTA that will spawn mshta.exe from svchost.exe.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=svchost.exe OR Processes.parent_process_name=wmiprvse.exe) AND `process_mshta` by Processes.dest Processes.parent_process Processes.user Processes.original_file_name| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_mshta_spawn_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may exhibit this behavior, triggering a false positive.", "references": ["https://codewhitesec.blogspot.com/2018/07/lethalhta.html", "https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/"], "tags": {"analytic_story": ["Suspicious MSHTA Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "mshta.exe spawned by wmiprvse.exe on $dest$", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=mshta.exe OR Processes.original_file_name=MSHTA.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_mshta"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_mshta_spawn_filter"}]}, {"name": "Detect Mimikatz With PowerShell Script Block Logging", "id": "8148c29c-c952-11eb-9255-acde48001122", "version": 1, "date": "2021-06-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \\\nThis analytic identifies common Mimikatz functions that may be identified in the script block, including `mimikatz`. This will catch the most basic use cases for Pass the Ticket, Pass the Hash and `-DumprCreds`. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message IN (*mimikatz*, *-dumpcr*, *sekurlsa::pth*, *kerberos::ptt*, *kerberos::golden*) | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_mimikatz_with_powershell_script_block_logging_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives should be limited as the commands being identifies are quite specific to EventCode 4104 and Mimikatz. Filter as needed.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "The following behavior was identified and typically related to MimiKatz being loaded within the context of PowerShell on $ComputerName$ by $User$.", "mitre_attack_id": ["T1003"], "observable": [{"name": "User", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_mimikatz_with_powershell_script_block_logging_filter"}]}, {"name": "BCDEdit Failure Recovery Modification", "id": "76d79d6e-25bb-40f6-b3b2-e0a6b7e5ea13", "version": 1, "date": "2021-12-07", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This search looks for flags passed to bcdedit.exe modifications to the built-in Windows error recovery boot configurations. This is typically used by ransomware to prevent recovery.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"bcdedit.exe\" AND (like (cmd_line, \"%recoveryenabled%\") AND like (cmd_line, \"%no%\")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint_Processess` datamodel.", "known_false_positives": "Administrators may modify the boot configuration.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1490/T1490.md#atomic-test-4---windows---disable-windows-recovery-console-repair"], "tags": {"analytic_story": ["Ryuk Ransomware", "Ransomware"], "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Impact"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1490/atomic_red_team/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting disable the ability to recover the endpoint.", "mitre_attack_id": ["T1490"], "nist": ["PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 80, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "bcdedit_failure_recovery_modification_filter"}]}, {"name": "Domain Controller Discovery with Wmic", "id": "64c7adaa-48ee-483c-b0d6-7175bc65e6cc", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to discover remote systems. The arguments utilized in this command line return a list of all domain controllers in a Windows domain. Red Teams and adversaries alike use *.exe to identify remote systems for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"wmic.exe\") (Processes.process=\"\" OR Processes.process=\"*DomainControllerAddress*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_controller_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain controller discovery on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_controller_discovery_with_wmic_filter"}]}, {"name": "Disabling Defender Services", "id": "911eacdc-317f-11ec-ad30-acde48001122", "version": 1, "date": "2021-10-20", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\System\\\\CurrentControlSet\\\\Services\\\\*\" AND (Registry.registry_path IN(\"*WdBoot*\", \"*WdFilter*\", \"*WdNisDrv*\", \"*WdNisSvc*\", \"*WinDefend*\", \"*SecurityHealthService*\"))  AND Registry.registry_value_name = Start Registry.registry_value_data = 0x00000004 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disabling_defender_services_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon2.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_defender_services_filter"}]}, {"name": "Windows DisableAntiSpyware Registry", "id": "23150a40-9301-4195-b802-5bb4f43067fb", "version": 2, "date": "2021-03-02", "author": "Rod Soto, Jose Hernandez, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for the Registry Key DisableAntiSpyware set to disable. This is consistent with Ryuk infections across a fleet of endpoints. This particular behavior is typically executed when an ransomware actor gains access to an endpoint and beings to perform execution. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_value_name=\"DisableAntiSpyware\" AND Registry.registry_value_data=\"0x00000001\" by Registry.dest Registry.user Registry.registry_path Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `windows_disableantispyware_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node.", "known_false_positives": "It is unusual to turn this feature off a Windows system since it is a default security control, although it is not rare for some policies to disable it. Although no false positives have been identified, use the provided filter macro to tune the search.", "references": ["https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/"], "tags": {"analytic_story": ["Ryuk Ransomware", "Windows Defense Evasion Tactics"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Delivery"], "message": "Windows DisableAntiSpyware registry key set to 'disabled' on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest", "Registry.user", "Registry.registry_path"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_disableantispyware_registry_filter"}]}, {"name": "Non Chrome Process Accessing Chrome Default Dir", "id": "81263de4-160a-11ec-944f-acde48001122", "version": 1, "date": "2021-09-15", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect an anomaly event of non-chrome process accessing the files in chrome user default folder. This folder contains all the sqlite database of the chrome browser related to users login, history, cookies and etc. Most of the RAT, trojan spy as well as FIN7 jssloader try to parse the those sqlite database to collect information on the compromised host. This SACL Event (4663) need to be enabled to tthe firefox profile directory to be eable to use this. Since you monitoring this access to the folder a noise coming from firefox need to be filter and also sqlite db browser and explorer .exe to make this detection more stable.", "search": "`wineventlog_security` EventCode=4663 NOT (process_name IN (\"*\\\\chrome.exe\", \"*\\\\explorer.exe\", \"*sql*\")) Object_Name=\"*\\\\Google\\\\Chrome\\\\User Data\\\\Default*\" | stats count min(_time) as firstTime max(_time) as lastTime by Object_Name Object_Type process_name Access_Mask Accesses process_id EventCode dest user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `non_chrome_process_accessing_chrome_default_dir_filter`", "how_to_implement": "To successfully implement this search, you must ingest Windows Security Event logs and track event code 4663. For 4663, enable \"Audit Object Access\" in Group Policy. Then check the two boxes listed for both \"Success\" and \"Failure.\"", "known_false_positives": "other browser not listed related to firefox may catch by this rule.", "references": [], "tags": {"analytic_story": ["FIN7", "Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_sacl/security2.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "a non firefox browser process $process_name$ accessing $Object_Name$", "mitre_attack_id": ["T1555", "T1555.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Object_Name", "Object_Type", "process_name", "Access_Mask", "Accesses", "process_id", "EventCode", "dest", "user"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Credentials from Password Stores", "Credentials from Web Browsers"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT39", "OilRig", "MuddyWater", "Leafminer", "APT33", "Turla", "Stealth Falcon", "Magic Hound", "Sandworm Team", "Inception", "Stealth Falcon", "OilRig", "Leafminer", "APT33", "APT3", "Kimsuky", "TA505", "Stolen Pencil", "MuddyWater", "APT37", "Patchwork", "Molerats"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "non_chrome_process_accessing_chrome_default_dir_filter"}]}, {"name": "SchCache Change By App Connect And Create ADSI Object", "id": "991eb510-0fc6-11ec-82d3-acde48001122", "version": 1, "date": "2021-09-07", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic is to detect an application try to connect and create ADSI Object to do LDAP query. Every time an application connects to the directory and attempts to create an ADSI object, the Active Directory Schema is checked for changes. If it has changed since the last connection, the schema is downloaded and stored in a cache on the local computer either in %LOCALAPPDATA%\\Microsoft\\Windows\\SchCache or %systemroot%\\SchCache. We found this a good anomaly use case to detect suspicious application like blackmatter ransomware that use ADS object api to execute ldap query. having a good list of ldap or normal AD query tool used within the network is a good start to reduce the noise.", "search": "`sysmon` EventCode=11  TargetFilename = \"*\\\\Windows\\\\SchCache\\\\*\" TargetFilename = \"*.sch*\" NOT (Image IN (\"*\\\\Windows\\\\system32\\\\mmc.exe\")) |stats count min(_time) as firstTime max(_time) as lastTime by Image TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schcache_change_by_app_connect_and_create_adsi_object_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "normal application like mmc.exe and other ldap query tool may trigger this detections.", "references": ["https://docs.microsoft.com/en-us/windows/win32/adsi/adsi-and-uac", "https://news.sophos.com/en-us/2021/08/09/blackmatter-ransomware-emerges-from-the-shadow-of-darkside/"], "tags": {"analytic_story": ["blackMatter ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/blackmatter_schcache/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "process $Image$ create a file $TargetFilename$ in host $Computer$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "TargetFilename", "EventCode", "process_id", "process_name", "Computer"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schcache_change_by_app_connect_and_create_adsi_object_filter"}]}, {"name": "Get DomainPolicy with Powershell", "id": "b8f9947e-065a-11ec-aafb-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` executing the `Get-DomainPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*Get-DomainPolicy*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainpolicy_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainPolicy/", "https://attack.mitre.org/techniques/T1201/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1201"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domainpolicy_with_powershell_filter"}]}, {"name": "CSC Net On The Fly Compilation", "id": "ea73128a-43ab-11ec-9753-acde48001122", "version": 1, "date": "2021-11-12", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "this analytic is to detect a suspicious compile before delivery approach of .net compiler csc.exe. This technique was seen in several adversaries, malware and even in red teams to take advantage the csc.exe .net compiler tool to compile on the fly a malicious .net code to evade detection from security product. This is a good hunting query to check further the file or process created after this event and check the file path that passed to csc.exe which is the .net code. Aside from that, powershell is capable of using this compiler in executing .net code in a powershell script so filter on that case is needed.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_csc` Processes.process = \"*/noconfig*\" Processes.process = \"*/fullpaths*\" Processes.process = \"*@*\" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `csc_net_on_the_fly_compilation_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "A network operator or systems administrator may utilize an automated powershell script taht execute .net code that may generate false positive. filter is needed.", "references": ["https://app.any.run/tasks/ad4c3cda-41f2-4401-8dba-56cc2d245488/", "https://tccontre.blogspot.com/2019/06/maicious-macro-that-compile-c-code-as.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/vilsel/sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "csc.exe with commandline $process$ to compile .net code on $dest$ by $user$", "mitre_attack_id": ["T1027.004", "T1027"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Compile After Delivery", "Obfuscated Files or Information"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Rocke", "MuddyWater", "Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=csc.exe OR Processes.original_file_name=csc.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_csc"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "csc_net_on_the_fly_compilation_filter"}]}, {"name": "Domain Account Discovery With Net App", "id": "98f6a534-04c2-11ec-96b2-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to query for domain users. Red Teams and adversaries alike may use net.exe to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process = \"* user*\" AND Processes.process = \"*/do*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_net_app_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://docs.microsoft.com/en-us/defender-for-identity/playbook-domain-dominance", "https://attack.mitre.org/techniques/T1087/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_account_discovery_with_net_app_filter"}]}, {"name": "Revil Common Exec Parameter", "id": "85facebe-c382-11eb-9c3e-acde48001122", "version": 2, "date": "2021-06-02", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies suspicious commandline parameter that are commonly used by REVIL ransomware to encrypts the compromise machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = \"* -nolan *\" OR Processes.process = \"* -nolocal *\" OR Processes.process = \"* -fast *\" OR Processes.process = \"* -full *\" by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `revil_common_exec_parameter_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "third party tool may have same command line parameters as revil ransomware.", "references": ["https://krebsonsecurity.com/2021/05/a-closer-look-at-the-darkside-ransomware-gang/", "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf1/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "A process $process_name$ with commandline $process$ related to revil ransomware in host $dest$", "mitre_attack_id": ["T1204"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process_guid"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "revil_common_exec_parameter_filter"}]}, {"name": "IcedID Exfiltrated Archived File Creation", "id": "0db4da70-f14b-11eb-8043-acde48001122", "version": 1, "date": "2021-07-30", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious file creation namely passff.tar and cookie.tar. This files are possible archived of stolen browser information like history and cookies in a compromised machine with IcedID.", "search": "`sysmon` EventCode= 11  (TargetFilename = \"*\\\\passff.tar\" OR TargetFilename = \"*\\\\cookie.tar\") |stats count min(_time) as firstTime max(_time) as lastTime by TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icedid_exfiltrated_archived_file_creation_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.cisecurity.org/white-papers/security-primer-icedid/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/simulated_icedid/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "process $SourceImage$ create a file $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "TargetFilename", "EventCode", "process_id", "process_name", "Computer"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "icedid_exfiltrated_archived_file_creation_filter"}]}, {"name": "Print Spooler Adding A Printer Driver", "id": "313681a2-da8e-11eb-adad-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies new printer drivers being load by utilizing the Windows PrintService operational logs, EventCode 316. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. \\\nWithin the proof of concept code, the following event will occur - \"Printer driver 1234 for Windows x64 Version-3 was added or updated. Files:- UNIDRV.DLL, kernelbase.dll, evil.dll. No user action is required.\" \\\nDuring triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events and review the source of where the exploitation began.", "search": "`printservice` EventCode=316 category = \"Adding a printer driver\" Message = \"*kernelbase.dll,*\" Message = \"*UNIDRV.DLL,*\" Message = \"*.DLL.*\" | stats  count min(_time) as firstTime max(_time) as lastTime by OpCode EventCode ComputerName Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `print_spooler_adding_a_printer_driver_filter`", "how_to_implement": "You will need to ensure PrintService Admin and Operational logs are being logged to Splunk from critical or all systems.", "known_false_positives": "Unknown. This may require filtering.", "references": ["https://twitter.com/MalwareJake/status/1410421445608476679?s=20", "https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "cve": ["CVE-2021-34527", "CVE-2021-1675"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-printservice_operational.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Suspicious print driver was loaded on endpoint $ComputerName$.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "OpCode", "EventCode", "ComputerName", "Message"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "source=\"wineventlog:microsoft-windows-printservice/operational\" OR sourcetype=\"WinEventLog:Microsoft-Windows-PrintService/Admin\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "printservice"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "print_spooler_adding_a_printer_driver_filter"}]}, {"name": "GetWmiObject Ds Computer with PowerShell Script Block", "id": "29b99201-723c-4118-847a-db2b3d3fb8ea", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet. The `DS_Computer` class parameter leverages WMI to query for all domain computers. Red Teams and adversaries may leverage this commandlet to enumerate domain computers for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message=*Get-WmiObject* AND Message=*\"namespace root\\\\directory\\\\ldap\"* AND Message=*\"class ds_computer\"*) | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getwmiobject_ds_computer_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_computer_with_powershell_script_block_filter"}]}, {"name": "Get ADUserResultantPasswordPolicy with Powershell", "id": "8b5ef342-065a-11ec-b0fc-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` executing the Get ADUserResultantPasswordPolicy commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*Get-ADUserResultantPasswordPolicy*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduserresultantpasswordpolicy_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://attack.mitre.org/techniques/T1201/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduserresultantpasswordpolicy?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1201"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_aduserresultantpasswordpolicy_with_powershell_filter"}]}, {"name": "Allow File And Printing Sharing In Firewall", "id": "ce27646e-d411-11eb-8a00-acde48001122", "version": 2, "date": "2021-06-23", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious modification of firewall to allow file and printer sharing. This technique was seen in ransomware to be able to discover more machine connected to the compromised host to encrypt more files", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= \"*firewall*\" Processes.process= \"*group=\\\"File and Printer Sharing\\\"*\"  Processes.process=\"*enable=Yes*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_file_and_printing_sharing_in_firewall_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "network admin may modify this firewall feature that may cause this rule to be triggered.", "references": ["https://kb.fortinet.com/kb/documentLink.do?externalID=FD52469", "https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1562.007", "T1562"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Cloud Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=netsh.exe OR Processes.original_file_name=netsh.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_netsh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "allow_file_and_printing_sharing_in_firewall_filter"}]}, {"name": "Nishang PowershellTCPOneLine", "id": "1a382c6c-7c2e-11eb-ac69-acde48001122", "version": 2, "date": "2021-03-03", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This query detects the Nishang Invoke-PowerShellTCPOneLine utility that spawns a call back to a remote command and control server. This is a powershell oneliner. In addition, this will capture on the command-line additional utilities used by Nishang. Triage the endpoint and identify any parallel processes that look suspicious. Review the reputation of the remote IP or domain contacted by the powershell process.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=*Net.Sockets.TCPClient* AND Processes.process=*System.Text.ASCIIEncoding*) by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `nishang_powershelltcponeline_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives may be present. Filter as needed based on initial analysis.", "references": ["https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1", "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/", "https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/", "https://blog.rapid7.com/2021/03/03/rapid7s-insightidr-enables-detection-and-response-to-microsoft-exchange-0-day/"], "tags": {"analytic_story": ["HAFNIUM Group"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Command and Control"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible Nishang Invoke-PowerShellTCPOneLine behavior on $dest$", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "nishang_powershelltcponeline_filter"}]}, {"name": "GetAdGroup with PowerShell", "id": "872e3063-0fc4-4e68-b2f3-f2b99184a708", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. The `Get-AdGroup` commandlnet is used to return a list of all groups available in a Windows Domain. Red Teams and adversaries alike may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-AdGroup*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getadgroup_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getadgroup_with_powershell_filter"}]}, {"name": "Suspicious Rundll32 Rename", "id": "7360137f-abad-473e-8189-acbdaa34d114", "version": 3, "date": "2021-02-04", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies renamed instances of rundll32.exe executing. rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. During investigation, validate it is the legitimate rundll32.exe executing and what script content it is loading. This query relies on the original filename or internal name from the PE meta data. Expand the query as needed by looking for specific command line arguments outlined in other analytics.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_rename_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of rundll32, triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Suspicious renamed rundll32.exe binary ran on $dest$ by $user$", "mitre_attack_id": ["T1218", "T1036", "T1218.011", "T1036.003"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Masquerading", "Rundll32", "Rename System Utilities"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28", "menuPass", "APT32", "Soft Cell", "PLATINUM"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_rundll32_rename_filter"}]}, {"name": "Remote System Discovery with Wmic", "id": "d82eced3-b1dc-42ab-859e-a2fc98827359", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to discover remote systems. The arguments utilized in this command return a list of all the systems registered in the domain. Red Teams and adversaries alike may leverage WMI and wmic.exe to identify remote systems for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"wmic.exe\") (Processes.process=*/NAMESPACE:\\\\\\\\root\\\\directory\\\\ldap* AND Processes.process=*ds_computer* AND Processes.process=\"*GET ds_samaccountname*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmic"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_system_discovery_with_wmic_filter"}]}, {"name": "UAC Bypass MMC Load Unsigned Dll", "id": "7f04349c-e30d-11eb-bc7f-acde48001122", "version": 1, "date": "2021-07-12", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious loaded unsigned dll by MMC.exe application. This technique is commonly seen in attacker that tries to bypassed UAC feature or gain privilege escalation. This is done by modifying some CLSID registry that will trigger the mmc.exe to load the dll path", "search": "`sysmon` EventCode=7  ImageLoaded = \"*.dll\" Image = \"*\\\\mmc.exe\" Signed=false Company != \"Microsoft Corporation\" | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded Signed ProcessId OriginalFileName Computer EventCode Company | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uac_bypass_mmc_load_unsigned_dll_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and imageloaded executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown. all of the dll loaded by mmc.exe is microsoft signed dll.", "references": ["https://offsec.almond.consulting/UAC-bypass-dotnet.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/uac_bypass/windows-sysmon2.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious unsigned $ImageLoaded$ loaded by $Image$ on endpoint $Computer$ with EventCode $EventCode$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "ImageLoaded", "Signed", "ProcessId", "OriginalFileName", "Computer", "EventCode", "Company"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "uac_bypass_mmc_load_unsigned_dll_filter"}]}, {"name": "High Frequency Copy Of Files In Network Share", "id": "40925f12-4709-11ec-bb43-acde48001122", "version": 1, "date": "2021-11-16", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious high frequency copying/moving of files in network share as part of information sabotage. This anomaly event can be a good indicator of insider trying to sabotage data by transfering classified or internal files within network share to exfitrate it after or to lure evidence of insider attack to other user. This behavior may catch several noise if network share is a common place for classified or internal document processing.", "search": "`wineventlog_security` EventCode=5145 Relative_Target_Name IN (\"*.doc\",\"*.docx\",\"*.xls\",\"*.xlsx\",\"*.ppt\",\"*.pptx\",\"*.log\",\"*.txt\",\"*.db\",\"*.7z\",\"*.zip\",\"*.rar\",\"*.tar\",\"*.gz\",\"*.jpg\",\"*.gif\",\"*.png\",\"*.bmp\",\"*.pdf\",\"*.rtf\",\"*.key\") Object_Type=File Share_Name IN (\"\\\\\\\\*\\\\C$\",\"\\\\\\\\*\\\\IPC$\",\"\\\\\\\\*\\\\admin$\") Access_Mask= \"0x2\" |  bucket _time span=5m | stats values(Relative_Target_Name) as valRelativeTargetName, values(Share_Name) as valShareName, values(Object_Type) as valObjectType, values(Access_Mask) as valAccessmask, values(src_port) as valSrcPort, values(Source_Address) as valSrcAddress count as numShareName by dest, _time, EventCode, user | eventstats avg(numShareName) as avgShareName, stdev(numShareName) as stdShareName, count as numSlots by dest, _time, EventCode, user |  eval upperThreshold=(avgShareName + stdShareName *3) |  eval isOutlier=if(avgShareName > 20 and avgShareName >= upperThreshold, 1, 0) |  search isOutlier=1 | `high_frequency_copy_of_files_in_network_share_filter`", "how_to_implement": "o successfully implement this search, you need to be ingesting Windows Security Event Logs with 5145 EventCode enabled. The Windows TA is also required. Also enable the object Audit access success/failure in your group policy.", "known_false_positives": "this behavior may seen in normal transfer of file within network if network share is common place for sharing documents.", "references": ["https://attack.mitre.org/techniques/T1537/"], "tags": {"analytic_story": ["Information Sabotage"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1537/high_copy_files_in_net_share/security.log"], "impact": 30, "kill_chain_phases": ["Exfiltration"], "message": "high frequency copy of document in network share $Share_Name$ from $Source_Address$ by $user$", "mitre_attack_id": ["T1537"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Share_Name", "Relative_Target_Name", "Object_Type", "Access_Mask", "user", "src_port", "Source_Address"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Transfer Data to Cloud Account"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "high_frequency_copy_of_files_in_network_share_filter"}]}, {"name": "Malicious PowerShell Process - Encoded Command", "id": "c4db14d9-7909-48b4-a054-aa14d89dbb19", "version": 6, "date": "2021-10-05", "author": "David Dorsey, Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of the EncodedCommand PowerShell parameter. This is typically used by Administrators to run complex scripts, but commonly used by adversaries to hide their code. \\\nThe analytic identifies all variations of EncodedCommand, as PowerShell allows the ability to shorten the parameter. For example enc, enco, encod and so forth. In addition, through our research it was identified that PowerShell will interpret different command switch types beyond the hyphen. We have added endash, emdash, horizontal bar, and forward slash. \\\nDuring triage, review parallel events to determine legitimacy. Tune as needed based on admin scripts in use. \\\nAlternatively, may use regex per matching here https://regexr.com/662ov.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,\"(?i)[\\-|\\/|\u2013|\u2014|\u2015]e(nc*o*d*e*d*c*o*m*m*a*n*d*)*\\s+[^-]\") | `malicious_powershell_process___encoded_command_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "System administrators may use this option, but it's not common.", "references": ["https://regexr.com/662ov", "https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1059.001_PowerShell/OutPowerShellCommandLineParameter.ps1", "https://ss64.com/ps/powershell.html", "https://twitter.com/M_haggis/status/1440758396534214658?s=20"], "tags": {"analytic_story": ["Malicious PowerShell", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 7", "CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1027/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "Powershell.exe running potentially malicious encodede commands on $dest$", "mitre_attack_id": ["T1027"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.user", "Processes.parent_process_name", "Processes.dest", "Processes.process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Obfuscated Files or Information"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_powershell_process___encoded_command_filter"}]}, {"name": "Disabling NoRun Windows App", "id": "de81bc46-9213-11eb-adc9-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identify modification of registry to disable run application in window start menu. this application is known to be a helpful shortcut to windows OS user to run known application and also to execute some reg or batch script. This technique is used malware to make cleaning of its infection more harder by preventing known application run easily through run shortcut.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoRun\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_norun_windows_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry", "https://blog.malwarebytes.com/detections/pum-optional-norun/"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows registry was modified to disable run application in window start menu on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_norun_windows_app_filter"}]}, {"name": "System Info Gathering Using Dxdiag Application", "id": "f92d74f2-4921-11ec-b685-acde48001122", "version": 1, "date": "2021-11-19", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious dxdiag.exe process commandline can collect system info of the target host. This technique was seen in remcos, adversaries and other malware to collect information as part of recon or collection phase of attack. Even this behavior is rarely seen in a corporate network this commandline can be used by network administrator to audit host machine specification. Better to check what it did after it pipes out the result to a file for further processing.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_dxdiag` AND Processes.process = \"* /t *\" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_info_gathering_using_dxdiag_application_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Filesystem` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "this commandline can be used by network administrator to audit host machine specification.filter is needed.", "references": ["https://app.any.run/tasks/df0baf9f-8baf-4c32-a452-16562ecb19be/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/t1592/host_info_dxdiag/sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "dxdiag.exe process with commandline $process$ on $dest$", "mitre_attack_id": ["T1592"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=dxdiag.exe OR Processes.original_file_name=dxdiag.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_dxdiag"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_info_gathering_using_dxdiag_application_filter"}]}, {"name": "Disable Windows App Hotkeys", "id": "1490f224-ad8b-11eb-8c4f-acde48001122", "version": 1, "date": "2021-05-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic detects a suspicious registry modification to disable Windows hotkey (shortcut keys) for native Windows applications. This technique is commonly used to disable certain or several Windows applications like `taskmgr.exe` and `cmd.exe`. This technique is used to impair the analyst in analyzing and removing the attacker implant in compromised systems.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\*\" AND Registry.registry_value_name = \"HotKey Disabled\" AND Registry.registry_key_name = \"Debugger\" by Registry.dest Registry.user Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `disable_windows_app_hotkeys_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as CarbonBlack or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/hotkey_disabled_hidden_user/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Disabled 'Windows App Hotkeys' on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_name", "Registry.dest Registry.user"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_windows_app_hotkeys_filter"}]}, {"name": "Screensaver Event Trigger Execution", "id": "58cea3ec-1f6d-11ec-8560-acde48001122", "version": 1, "date": "2021-09-27", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is developed to detect possible event trigger execution through screensaver registry entry modification for persistence or privilege escalation. This technique was seen in several APT and malware where they put the malicious payload path to the SCRNSAVE.EXE registry key to redirect the execution to their malicious payload path. This TTP is a good indicator that some attacker may modify this entry for their persistence and privilege escalation.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=\"*\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE*\") by Registry.dest Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `screensaver_event_trigger_execution_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://attack.mitre.org/techniques/T1546/002/", "https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/privilege-escalation/untitled-3/screensaver"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.002/scrnsave_reg/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1546", "T1546.002"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Event Triggered Execution", "Screensaver"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "screensaver_event_trigger_execution_filter"}]}, {"name": "Batch File Write to System32", "id": "503d17cb-9eab-4cf8-a20e-01d5c6987ae3", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for a batch file (.bat) written to the Windows system directory tree.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*  by _time span=1h Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (\"*\\\\system32\\\\*\", \"*\\\\syswow64\\\\*\") Filesystem.file_name=\"*.bat\" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name  | `batch_file_write_to_system32_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "It is possible for this search to generate a notable event for a batch file write to a path that includes the string \"system32\", but is not the actual Windows system directory. As such, you should confirm the path of the batch file identified by the search. In addition, a false positive may be generated by an administrator copying a legitimate batch file in this directory tree. You should confirm that the activity is legitimate and modify the search to add exclusions, as necessary.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1204.002/batch_file_in_system32/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Delivery"], "message": "A file - $file_name$ was written to system32 has occurred on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1204", "T1204.002"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.dest", "Filesystem.file_name", "Filesystem.user", "Filesystem.file_path", "Processes.process_id", "Processes.process_name", "Processes.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution", "Malicious File"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Whitefly", "Tropic Trooper", "Gamaredon Group", "Sharpshooter", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "RTM", "Inception", "BlackTech", "APT-C-36", "Machete", "admin@338", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "Cobalt Group", "DarkHydrus", "Gorgon Group", "Patchwork", "OilRig", "Dark Caracal", "MuddyWater", "Lazarus Group", "FIN7", "APT32", "Rancor", "APT37", "FIN8", "APT28", "Elderwood", "TA459", "APT29", "Leviathan", "menuPass", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "batch_file_write_to_system32_filter"}]}, {"name": "GetDomainGroup with PowerShell Script Block", "id": "09725404-a44f-4ed3-9efa-8ed5d69e4c53", "version": 1, "date": "2021-08-26", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainGroup` commandlet. `Get-DomainGroup` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. As the name suggests, `Get-DomainGroup` is used to query domain groups. Red Teams and adversaries may leverage this function to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-DomainGroup*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getdomaingroup_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerView functions for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainGroup/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration using PowerView on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaingroup_with_powershell_script_block_filter"}]}, {"name": "Detect RClone Command-Line Usage", "id": "32e0baea-b3f1-11eb-a2ce-acde48001122", "version": 2, "date": "2021-11-29", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies commonly used command-line arguments used by `rclone.exe` to initiate a file transfer. Some arguments were negated as they are specific to the configuration used by adversaries. In particular, an adversary may list the files or directories of the remote file share using `ls` or `lsd`, which is not indicative of malicious behavior. During triage, at this stage of a ransomware event, exfiltration is about to occur or has already. Isolate the endpoint and continue investigating by review file modifications and parallel processes.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rclone` Processes.process IN (\"*copy*\", \"*mega*\", \"*pcloud*\", \"*ftp*\", \"*--config*\", \"*--progress*\", \"*--no-check-certificate*\", \"*--ignore-existing*\", \"*--auto-confirm*\", \"*--transfers*\", \"*--multi-thread-streams*\")  by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |  `security_content_ctime(lastTime)` | `detect_rclone_command_line_usage_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited as this is restricted to the Rclone process name. Filter or tune the analytic as needed.", "references": ["https://redcanary.com/blog/rclone-mega-extortion/", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html", "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/", "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/"], "tags": {"analytic_story": ["DarkSide Ransomware", "Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1020/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exfiltration"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to connect to a remote cloud service to move files or folders.", "mitre_attack_id": ["T1020"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.original_file_name"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Automated Exfiltration"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["Tropic Trooper", "Frankenstein", "Honeybee"]}, "macros": [{"definition": "(Processes.original_file_name=rclone.exe OR Processes.process_name=rclone.exe)", "description": "Matches the process with its original file name.", "name": "process_rclone"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rclone_command_line_usage_filter"}]}, {"name": "Spoolsv Suspicious Process Access", "id": "799b606e-da81-11eb-93f8-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies a suspicious behavior related to PrintNightmare, or CVE-2021-34527 previously (CVE-2021-1675),  to gain privilege escalation on the vulnerable machine. This exploit attacks a critical Windows Print Spooler Vulnerability to elevate privilege. This detection is to look for suspicious process access made by the spoolsv.exe that may related to the attack.", "search": "`sysmon` EventCode=10 SourceImage = \"*\\\\spoolsv.exe\" CallTrace = \"*\\\\Windows\\\\system32\\\\spool\\\\DRIVERS\\\\x64\\\\*\" TargetImage IN (\"*\\\\rundll32.exe\", \"*\\\\spoolsv.exe\") GrantedAccess = 0x1fffff | stats  count min(_time) as firstTime max(_time) as lastTime by Computer SourceImage TargetImage GrantedAccess CallTrace  EventCode ProcessID| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_suspicious_process_access_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with process access event where SourceImage, TargetImage, GrantedAccess and CallTrace executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances of spoolsv.exe.", "known_false_positives": "Unknown. Filter as needed.", "references": ["https://github.com/cube0x0/impacket/commit/73b9466c17761384ece11e1028ec6689abad6818", "https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Local"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "$SourceImage$ was GrantedAccess open access to $TargetImage$ on endpoint $Computer$. This behavior is suspicious and related to PrintNightmare.", "mitre_attack_id": ["T1068"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "ProcessID", "type": "Process", "role": ["Parent Process"]}, {"name": "TargetImage", "type": "Process Name", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "SourceImage", "TargetImage", "GrantedAccess", "CallTrace", "EventCode"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spoolsv_suspicious_process_access_filter"}]}, {"name": "Get ADUser with PowerShell", "id": "0b6ee3f4-04e3-11ec-a87d-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to enumerate domain users. The `Get-AdUser' commandlet returns a list of all domain users. Red Teams and adversaries alike may use this commandlet to identify remote systems for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*Get-ADUser*\" AND Processes.process = \"*-filter*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduser_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://www.blackhillsinfosec.com/red-blue-purple/", "https://attack.mitre.org/techniques/T1087/002/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_aduser_with_powershell_filter"}]}, {"name": "Powershell Enable SMB1Protocol Feature", "id": "afed80b2-d34b-11eb-a952-acde48001122", "version": 1, "date": "2021-06-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious enabling of smb1protocol through \"powershell.exe\". This technique was seen in some ransomware (like reddot) where it enable smb share to do the lateral movement and encrypt other files within the compromise network system.", "search": "`powershell` EventCode=4104 Message = \"*Enable-WindowsOptionalFeature*\" Message = \"*SMB1Protocol*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_enable_smb1protocol_feature_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the powershell logs  from your endpoints. make sure you enable needed registry to monitor this event.", "known_false_positives": "network operator may enable or disable this windows feature.", "references": ["https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Malicious PowerShell", "Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-powershell.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1027", "T1027.005"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "security_domain": "endpoint", "mitre_attack_technique": ["Obfuscated Files or Information", "Indicator Removal from Tools"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28", "Soft Cell", "TEMP.Veles", "Patchwork", "APT3", "Turla", "OilRig", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_enable_smb1protocol_feature_filter"}]}, {"name": "Dump LSASS via procdump", "id": "3742ebfe-64c2-11eb-ae93-0242ac130002", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Detect procdump.exe dumping the lsass process. This query looks for both -mm and -ma usage. -mm will produce a mini dump file and -ma will write a dump file with all process memory. Both are highly suspect and should be reviewed. This query does not monitor for the internal name (original_file_name=procdump) of the PE or look for procdump64.exe. Modify the query as needed.\\\nDuring triage, confirm this is procdump.exe executing. If it is the first time a Sysinternals utility has been ran, it is possible there will be a -accepteula on the command line. Review other endpoint data sources for cross process (injection) into lsass.exe.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_procdump` (Processes.process=*-ma* OR Processes.process=*-mm*) Processes.process=*lsass* by Processes.user Processes.process_name Processes.process Processes.original_file_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dump_lsass_via_procdump_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "None identified.", "references": ["https://attack.mitre.org/techniques/T1003/001/", "https://docs.microsoft.com/en-us/sysinternals/downloads/procdump", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md#atomic-test-2---dump-lsassexe-memory-using-procdump"], "tags": {"analytic_story": ["Credential Dumping", "HAFNIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified attempting to dump lsass.exe on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "(Processes.process_name=procdump.exe OR Processes.process_name=procdump64.exe OR Processes.original_file_name=procdump)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_procdump"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dump_lsass_via_procdump_filter"}]}, {"name": "PowerShell 4104 Hunting", "id": "d6f2b006-0041-11ec-8885-acde48001122", "version": 1, "date": "2021-08-18", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": [], "description": "The following Hunting analytic assists with identifying suspicious PowerShell execution using Script Block Logging, or EventCode 4104. This analytic is not meant to be ran hourly, but occasionally to identify malicious or suspicious PowerShell. This analytic is a combination of work completed by Alex Teixeira and Splunk Threat Research Team.", "search": "`powershell` EventCode=4104 | eval DoIt = if(match(Message,\"(?i)(\\$doit)\"), \"4\", 0) | eval enccom=if(match(Message,\"[A-Za-z0-9+\\/]{44,}([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)\") OR match(Message, \"(?i)[-]e(nc*o*d*e*d*c*o*m*m*a*n*d*)*\\s+[^-]\"),4,0) | eval suspcmdlet=if(match(Message, \"(?i)Add-Exfiltration|Add-Persistence|Add-RegBackdoor|Add-ScrnSaveBackdoor|Check-VM|Do-Exfiltration|Enabled-DuplicateToken|Exploit-Jboss|Find-Fruit|Find-GPOLocation|Find-TrustedDocuments|Get-ApplicationHost|Get-ChromeDump|Get-ClipboardContents|Get-FoxDump|Get-GPPPassword|Get-IndexedItem|Get-Keystrokes|LSASecret|Get-PassHash|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-RickAstley|Get-Screenshot|Get-SecurityPackages|Get-ServiceFilePermission|Get-ServicePermission|Get-ServiceUnquoted|Get-SiteListPassword|Get-System|Get-TimedScreenshot|Get-UnattendedInstallFile|Get-Unconstrained|Get-VaultCredential|Get-VulnAutoRun|Get-VulnSchTask|Gupt-Backdoor|HTTP-Login|Install-SSP|Install-ServiceBinary|Invoke-ACLScanner|Invoke-ADSBackdoor|Invoke-ARPScan|Invoke-AllChecks|Invoke-BackdoorLNK|Invoke-BypassUAC|Invoke-CredentialInjection|Invoke-DCSync|Invoke-DllInjection|Invoke-DowngradeAccount|Invoke-EgressCheck|Invoke-Inveigh|Invoke-InveighRelay|Invoke-Mimikittenz|Invoke-NetRipper|Invoke-NinjaCopy|Invoke-PSInject|Invoke-Paranoia|Invoke-PortScan|Invoke-PoshRat|Invoke-PostExfil|Invoke-PowerDump|Invoke-PowerShellTCP|Invoke-PsExec|Invoke-PsUaCme|Invoke-ReflectivePEInjection|Invoke-ReverseDNSLookup|Invoke-RunAs|Invoke-SMBScanner|Invoke-SSHCommand|Invoke-Service|Invoke-Shellcode|Invoke-Tater|Invoke-ThunderStruck|Invoke-Token|Invoke-UserHunter|Invoke-VoiceTroll|Invoke-WScriptBypassUAC|Invoke-WinEnum|MailRaider|New-HoneyHash|Out-Minidump|Port-Scan|PowerBreach|PowerUp|PowerView|Remove-Update|Set-MacAttribute|Set-Wallpaper|Show-TargetScreen|Start-CaptureServer|VolumeShadowCopyTools|NEEEEWWW|(Computer|User)Property|CachedRDPConnection|get-net\\S+|invoke-\\S+hunter|Install-Service|get-\\S+(credent|password)|remoteps|Kerberos.*(policy|ticket)|netfirewall|Uninstall-Windows|Verb\\s+Runas|AmsiBypass|nishang|Invoke-Interceptor|EXEonRemote|NetworkRelay|PowerShelludp|PowerShellIcmp|CreateShortcut|copy-vss|invoke-dll|invoke-mass|out-shortcut|Invoke-ShellCommand\"),1,0) | eval base64 = if(match(lower(Message),\"frombase64\"), \"4\", 0) | eval empire=if(match(lower(Message),\"system.net.webclient\") AND match(lower(Message), \"frombase64string\") ,5,0) | eval mimikatz=if(match(lower(Message),\"mimikatz\") OR match(lower(Message), \"-dumpcr\") OR match(lower(Message), \"SEKURLSA::Pth\") OR match(lower(Message), \"kerberos::ptt\") OR match(lower(Message), \"kerberos::golden\") ,5,0) | eval iex = if(match(lower(Message),\"iex\"), \"2\", 0) | eval webclient=if(match(lower(Message),\"http\") OR match(lower(Message),\"web(client|request)\") OR match(lower(Message),\"socket\") OR match(lower(Message),\"download(file|string)\") OR match(lower(Message),\"bitstransfer\") OR match(lower(Message),\"internetexplorer.application\") OR match(lower(Message),\"xmlhttp\"),5,0) | eval get = if(match(lower(Message),\"get-\"), \"1\", 0) | eval rundll32 = if(match(lower(Message),\"rundll32\"), \"4\", 0) | eval suspkeywrd=if(match(Message, \"(?i)(bitstransfer|mimik|metasp|AssemblyBuilderAccess|Reflection\\.Assembly|shellcode|injection|cnvert|shell\\.application|start-process|Rc4ByteStream|System\\.Security\\.Cryptography|lsass\\.exe|localadmin|LastLoggedOn|hijack|BackupPrivilege|ngrok|comsvcs|backdoor|brute.?force|Port.?Scan|Exfiltration|exploit|DisableRealtimeMonitoring|beacon)\"),1,0) | eval syswow64 = if(match(lower(Message),\"syswow64\"), \"3\", 0) | eval httplocal = if(match(lower(Message),\"http://127.0.0.1\"), \"4\", 0) | eval reflection = if(match(lower(Message),\"reflection\"), \"1\", 0) | eval invokewmi=if(match(lower(Message), \"(?i)(wmiobject|WMIMethod|RemoteWMI|PowerShellWmi|wmicommand)\"),5,0) | eval downgrade=if(match(Message, \"(?i)([-]ve*r*s*i*o*n*\\s+2)\") OR match(lower(Message),\"powershell -version\"),3,0) | eval compressed=if(match(Message, \"(?i)GZipStream|::Decompress|IO.Compression|write-zip|(expand|compress)-Archive\"),5,0) | eval invokecmd = if(match(lower(Message),\"invoke-command\"), \"4\", 0) | addtotals fieldname=Score DoIt, enccom, suspcmdlet, suspkeywrd, compressed, downgrade, mimikatz, iex, empire, rundll32, webclient, syswow64, httplocal, reflection, invokewmi, invokecmd, base64, get | stats values(Score) by DoIt, enccom, compressed, downgrade, iex, mimikatz, rundll32, empire, webclient, syswow64, httplocal, reflection, invokewmi, invokecmd, base64, get, suspcmdlet, suspkeywrd | `powershell_4104_hunting_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Limited false positives. May filter as needed.", "references": ["https://github.com/inodee/threathunting-spl/blob/master/hunt-queries/powershell_qualifiers.md", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell", "https://github.com/marcurdy/dfir-toolset/blob/master/Powershell%20Blueteam.txt", "https://devblogs.microsoft.com/powershell/powershell-the-blue-team/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging?view=powershell-5.1", "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html", "https://hurricanelabs.com/splunk-tutorials/how-to-use-powershell-transcription-logs-in-splunk/"], "tags": {"analytic_story": ["Malicious PowerShell"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": [], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ executing suspicious commands.", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_4104_hunting_filter"}]}, {"name": "Sqlite Module In Temp Folder", "id": "0f216a38-f45f-11eb-b09c-acde48001122", "version": 1, "date": "2021-08-03", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious file creation of sqlite3.dll in %temp% folder. This behavior was seen in IcedID malware where it download sqlite module to parse browser database like for chrome or firefox to stole browser information related to bank, credit card or credentials.", "search": "`sysmon` EventCode=11 (TargetFilename = \"*\\\\sqlite32.dll\" OR TargetFilename = \"*\\\\sqlite64.dll\") (TargetFilename = \"*\\\\temp\\\\*\") |stats count min(_time) as firstTime max(_time) as lastTime by process_name TargetFilename EventCode ProcessId Image | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sqlite_module_in_temp_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.cisecurity.org/white-papers/security-primer-icedid/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/simulated_icedid/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "process $SourceImage$ create a file $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1005"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "TargetFilename", "EventCode", "ProcessId", "Image"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Data from Local System"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["Gamaredon Group", "APT39", "Frankenstein", "Inception", "Kimsuky", "Soft Cell", "Turla", "menuPass", "Dark Caracal", "Dragonfly 2.0", "Honeybee", "APT37", "APT28", "APT3", "BRONZE BUTLER", "Patchwork", "Stealth Falcon", "Lazarus Group", "Dust Storm", "Threat Group-3390", "APT1", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sqlite_module_in_temp_folder_filter"}]}, {"name": "Detect HTML Help Renamed", "id": "62fed254-513b-460e-953d-79771493a9f3", "version": 3, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies a renamed instance of hh.exe (HTML Help) executing a Compiled HTML Help (CHM). This particular technique will load Windows script code from a compiled help file. CHM files may contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The \"htm\" and \"html\" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Validate it is the legitimate version of hh.exe by reviewing the PE metadata. hh.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_hh` by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_renamed_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely a renamed instance of hh.exe will be used legitimately, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.001/T1218.001.md", "https://lolbas-project.github.io/lolbas/Binaries/Hh/"], "tags": {"analytic_story": ["Suspicious Compiled HTML Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$.", "mitre_attack_id": ["T1218", "T1218.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Compiled HTML File"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "Silence", "Lazarus Group", "Dark Caracal", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=hh.exe OR Processes.original_file_name=HH.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_hh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_html_help_renamed_filter"}]}, {"name": "Icacls Deny Command", "id": "cf8d753e-a8fe-11eb-8f58-acde48001122", "version": 1, "date": "2021-04-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies a potential adversary that changes the security permission of a specific file or directory. This technique is commonly seen in APT tradecraft or coinminer scripts. This behavior is meant to evade detection and prevent access to their component files.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"icacls.exe\" OR Processes.process_name = \"cacls.exe\" OR Processes.process_name = \"xcacls.exe\" AND Processes.process = \"*/deny*\" by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icacls_deny_command_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed icacls.exe may be used.", "known_false_positives": "Unknown. It is possible some administrative scripts use ICacls. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "Process name $process_name$ with deny argument executed by $user$ to change security permission of a specific file or directory on host $dest$", "mitre_attack_id": ["T1222"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "icacls_deny_command_filter"}]}, {"name": "Download Files Using Telegram", "id": "58194e28-ae5e-11eb-8912-acde48001122", "version": 1, "date": "2021-05-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic will identify a suspicious download by the Telegram application on a Windows system. This behavior was identified on a honeypot where the adversary gained access, installed Telegram and followed through with downloading different network scanners (port, bruteforcer, masscan) to the system and later used to mapped the whole network and further move laterally.", "search": "`sysmon` EventCode= 15 process_name = \"telegram.exe\" TargetFilename = \"*:Zone.Identifier\" |stats count min(_time) as firstTime max(_time) as lastTime by Computer EventCode Image process_id TargetFilename Hash | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `download_files_using_telegram_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and TargetFilename from your endpoints or Events that monitor filestream events which is happened when process download something. (EventCode 15) If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "normal download of file in telegram app. (if it was a common app in network)", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/minergate/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious files were downloaded with the Telegram application on $dest$ by $user$.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Computer", "EventCode", "Image", "process_id", "TargetFilename", "Hash"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "download_files_using_telegram_filter"}]}, {"name": "7zip CommandLine To SMB Share Path", "id": "01d29b48-ff6f-11eb-b81e-acde48001122", "version": 1, "date": "2021-08-17", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious 7z process with commandline pointing to SMB network share. This technique was seen in CONTI LEAK tools where it use 7z to archive a sensitive files and place it in network share tmp folder. This search is a good hunting query that may give analyst a hint why specific user try to archive a file pointing to SMB user which is un usual.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name =\"7z.exe\" OR Processes.process_name = \"7za.exe\" OR Processes.original_file_name = \"7z.exe\" OR Processes.original_file_name =  \"7za.exe\") AND (Processes.process=\"*\\\\C$\\\\*\" OR Processes.process=\"*\\\\Admin$\\\\*\" OR Processes.process=\"*\\\\IPC$\\\\*\") by Processes.original_file_name Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.parent_process_id Processes.process_id  Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `7zip_commandline_to_smb_share_path_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed 7z.exe may be used.", "known_false_positives": "unknown", "references": ["https://threadreaderapp.com/thread/1423361119926816776.html"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/conti/conti_leak/windows-sysmon_7z.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "archive process $process_name$ with suspicious cmdline $process$ in host $dest$", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "7zip_commandline_to_smb_share_path_filter"}]}, {"name": "Excel Spawning Windows Script Host", "id": "57fe880a-9be3-11eb-9bf3-acde48001122", "version": 1, "date": "2021-04-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies Microsoft Excel spawning Windows Script Host - `cscript.exe` or `wscript.exe`. Typically, this is not common behavior and not default with Excel.exe. Excel.exe will generally be found in the following path `C:\\Program Files\\Microsoft Office\\root\\Office16` (version will vary). `cscript.exe` or `wscript.exe` default location is `c:\\windows\\system32\\` or c:windows\\syswow64`. `cscript.exe` or `wscript.exe` spawning from Excel.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line executed will most likely be obfuscated and captured via another detection. During triage, review parallel processes and identify any files that may have been written. Review the reputation of the remote destination and block accordingly.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"excel.exe\" Processes.process_name IN (\"cscript.exe\", \"wscript.exe\")  by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `excel_spawning_windows_script_host_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "False positives should be limited, but if any are present, filter as needed. In some instances, `cscript.exe` is used for legitimate business practices.", "references": ["https://app.any.run/tasks/8ecfbc29-03d0-421c-a5bf-3905d29192a2/", "https://attack.mitre.org/techniques/T1566/001/"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$, indicating potential suspicious macro execution.", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "process_id", "parent_process_name", "dest", "user", "parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excel_spawning_windows_script_host_filter"}]}, {"name": "Change Default File Association", "id": "462d17d8-1f71-11ec-ad07-acde48001122", "version": 1, "date": "2021-09-27", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is developed to detect suspicious registry modification to change the default file association of windows to malicious payload. This techninique was seen in some APT where it modify the default process to run file association, like .txt to notepad.exe. Instead notepad.exe it will point to a Script or other payload that will load malicious command to the compromised host.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =\"*\\\\shell\\\\open\\\\command\\\\*\" Registry.registry_path = \"*HKCR\\\\*\" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `change_default_file_association_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/privilege-escalation/untitled-3/accessibility-features"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.001/txtfile_reg/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1546.001", "T1546"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Change Default File Association", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["Kimsuky", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "change_default_file_association_filter"}]}, {"name": "Recon AVProduct Through Pwh or WMI", "id": "28077620-c9f6-11eb-8785-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell script execution via EventCode 4104 performing checks to identify anti-virus products installed on the endpoint. This technique is commonly found in malware and APT events where the adversary will map all running security applications or services. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 (Message = \"*SELECT*\" OR Message = \"*WMIC*\") AND (Message = \"*AntiVirusProduct*\" OR Message = \"*AntiSpywareProduct*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recon_avproduct_through_pwh_or_wmi_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "network administrator may used this command for checking purposes", "references": ["https://news.sophos.com/en-us/2020/05/12/maze-ransomware-1-year-counting/", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Ransomware", "Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Reconnaissance"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 70, "kill_chain_phases": ["Reconnaissance"], "message": "A suspicious powershell script contains AV recon command in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1592"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "recon_avproduct_through_pwh_or_wmi_filter"}]}, {"name": "Office Application Drop Executable", "id": "73ce70c4-146d-11ec-9184-acde48001122", "version": 1, "date": "2021-09-13", "author": "Teoderick Contreras, Michael Haag Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious MS office application that drop or create executables or script in the host. This behavior is commonly seen in spear phishing office attachment where it drop malicious files or script to compromised the host. It might be some normal macro may drop script or tools as part of automation but still this behavior is reallly suspicious and not commonly seen in normal office application", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\",\"wordpad.exe\",\"wordview.exe\") by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*.exe\",\"*.dll\",\"*.pif\",\"*.scr\",\"*.js\",\"*.vbs\",\"*.vbe\",\"*.ps1\") by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | rename process_guid as proc_guid | fields _time dest file_create_time file_name file_path process_name process_path process proc_guid] | dedup file_create_time | table dest, process_name, process, file_create_time, file_name, file_path, proc_guid | `office_application_drop_executable_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "office macro for automation may do this behavior", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/"], "tags": {"analytic_story": ["FIN7"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_macro_js_1/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "process $process_name$ drops a file $TargetFilename$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "TargetFilename", "ProcessGuid", "dest", "user_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_application_drop_executable_filter"}]}, {"name": "Esentutl SAM Copy", "id": "d372f928-ce4f-11eb-a762-acde48001122", "version": 1, "date": "2021-08-18", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies the process - `esentutl.exe` - being used to capture credentials stored in ntds.dit or the SAM file on disk. During triage, review parallel processes and determine if legitimate activity. Upon determination of illegitimate activity, take further action to isolate and contain the threat.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_esentutl` Processes.process IN (\"*ntds*\", \"*SAM*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `esentutl_sam_copy_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited. Filter as needed.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/6a570c2a4630cf0c2bd41a2e8375b5d5ab92f700/atomics/T1003.002/T1003.002.md", "https://attack.mitre.org/software/S0404/"], "tags": {"analytic_story": ["Credential Dumping"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": [], "impact": 80, "kill_chain_phases": ["Privilege Escalation", "Lateral Movement"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user user$ attempting to capture credentials for offline cracking or observability.", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=esentutl.exe OR Processes.original_file_name=esentutl.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_esentutl"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "esentutl_sam_copy_filter"}]}, {"name": "Potential Pass the Token or Hash Observed by an Event Collecting Device", "id": "1058ba3e-a698-49bc-a1e5-7cedece4ea87", "version": 2, "date": "2021-11-05", "author": "Stanislav Miskovic, Splunk", "type": "TTP", "datamodel": ["Authentication"], "description": "This detection identifies potential Pass the Token or Pass the Hash credential stealing. We detect the main side effect of these attacks, which is a transition from the dominant Kerberos logins to rare NTLM logins for a given user, as reported by an event-collecting device (i.e., a specific domain controller or an endpoint destination).", "search": "| from read_ssa_enriched_events() | where \"Authentication\" IN(_datamodels)\n| eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), dest_user=      lower(ucast(map_get(input_event, \"dest_user_primary_artifact\"), \"string\", null)), dest_user_id=   ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), origin_device_id=       ucast(map_get(input_event, \"origin_device_id\"), \"string\", null), signature_id=   lower(ucast(map_get(input_event, \"signature_id\"), \"string\", null)), authentication_method=  lower(ucast(map_get(input_event, \"authentication_method\"), \"string\", null)), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where signature_id = \"4624\" AND (authentication_method=\"ntlmssp\" OR authentication_method=\"kerberos\") AND dest_user_id != null AND origin_device_id != null\n| eval isKerberos=if(authentication_method == \"kerberos\", 1, 0), isNtlm=if(authentication_method == \"ntlmssp\", 1, 0), timeNTLM=if(isNtlm > 0, timestamp, null)\n| stats sum(isKerberos) as totalKerberos, sum(isNtlm)     as totalNtlm, min(timestamp)  as startTime, min(timeNTLM)   as startNTLMTime, max(timestamp)  as endTime, max(timeNTLM)   as endNTLMTime by dest_user_id, dest_user, origin_device_id, span(timestamp, 86400s)\n| where NOT dest_user=\"-\" AND totalKerberos > 0 AND totalNtlm > 0 AND endTime - startTime > 1800000 AND (totalKerberos > 10 * totalNtlm AND totalKerberos > 50)  AND (endTime - startTime) > 3 * (endNTLMTime - startNTLMTime)\n| eval start_time=startNTLMTime, end_time=endNTLMTime, entities=mvappend(dest_user_id, origin_device_id), body=create_map([\"event_id\", event_id, \"total_kerberos\", totalKerberos, \"total_ntlm\", totalNtlm, \"analysis_start_time\", startTime, \"analysis_end_time\", endTime, \"detection_start_time\", startNTLMTime, \"detection_end_time\", endNTLMTime])\n| into write_ssa_detected_events();", "how_to_implement": "You must be ingesting Windows Security logs from devices of interest - at least from domain controllers. Please make sure that event ID 4624 is being logged.", "known_false_positives": "Environments in which NTLM is used extremely rarely and for benign purposes (such as a rare use of SMB shares).", "references": ["https://attack.mitre.org/techniques/T1550/002/", "https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "asset_type": "Windows", "cis20": ["CIS 16", "CIS 20"], "confidence": 80, "context": ["Source:AD", "Source:Endpoint", "Stage:Credential Access", "Stage:Lateral Movement"], "impact": 80, "kill_chain_phases": ["Lateral Movement"], "message": "Potential lateral movement and credential stealing via Pass the Token or Pass the Hash techniques. Operation is performed via credentials of the account $dest_user_id$ and observed by the logging device $origin_device_id$", "mitre_attack_id": ["T1550", "T1550.002"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "origin_device_id", "type": "Hostname", "role": ["Other"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "signature_id", "dest_user", "dest_user_id", "origin_device_id", "authentication_method"], "risk_score": 64, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Use Alternate Authentication Material", "Pass the Hash"], "mitre_attack_tactics": ["Defense Evasion", "Lateral Movement", "Defense Evasion", "Lateral Movement"], "mitre_attack_groups": ["no", "Soft Cell", "APT32", "Night Dragon", "APT28", "APT1"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "potential_pass_the_token_or_hash_observed_by_an_event_collecting_device_filter"}]}, {"name": "Resize ShadowStorage volume", "id": "bc760ca6-8336-11eb-bcbb-acde48001122", "version": 1, "date": "2021-03-12", "author": "Teoderick Contreras", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytics identifies the resizing of shadowstorage by ransomware malware to avoid the shadow volumes being made again. this technique is an alternative by ransomware attacker than deleting the shadowstorage which is known alert in defensive team. one example of ransomware that use this technique is CLOP ransomware where it drops a .bat file that will resize the shadowstorage to minimum size as much as possible", "search": "| tstats `security_content_summariesonly` values(Processes.process) as cmdline values(Processes.parent_process_name) as parent_process values(Processes.process_name) as process_name min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = \"cmd.exe\" OR Processes.parent_process_name = \"powershell.exe\" OR Processes.parent_process_name = \"powershell_ise.exe\" OR Processes.parent_process_name =  \"wmic.exe\" Processes.process_name = \"vssadmin.exe\" Processes.process=\"*resize*\" Processes.process=\"*shadowstorage*\" Processes.process=\"*/maxsize*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `resize_shadowstorage_volume_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "network admin can resize the shadowstorage for valid purposes.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Impact"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "A process $parent_process_name$ attempt to resize shadow copy with commandline $process$ in host $dest$", "mitre_attack_id": ["T1490"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.process", "Process.parent_process_name", "_time", "Processes.process_name", "Processes.parent_process", "Processes.dest", "Processes.user"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "resize_shadowstorage_volume_filter"}]}, {"name": "Spoolsv Suspicious Loaded Modules", "id": "a5e451f8-da81-11eb-b245-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect suspicious loading of dll in specific path relative to printnightmare exploitation. In this search we try to detect the loaded modules made by spoolsv.exe after the exploitation.", "search": "`sysmon` EventCode=7 Image =\"*\\\\spoolsv.exe\" ImageLoaded=\"*\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\*\" ImageLoaded = \"*.dll\" | stats dc(ImageLoaded) as countImgloaded values(ImageLoaded) as ImgLoaded count min(_time) as firstTime max(_time) as lastTime by Image Computer process_id EventCode | where countImgloaded >= 3 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_suspicious_loaded_modules_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and imageloaded executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://raw.githubusercontent.com/hieuttmmo/sigma/dceb13fe3f1821b119ae495b41e24438bd97e3d0/rules/windows/image_load/sysmon_cve_2021_1675_print_nightmare.yml"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Local"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "$Image$ with process id $process_id$ has loaded a driver from $ImageLoaded$ on endpoint $Computer$. This behavior is suspicious and related to PrintNightmare.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_id", "type": "Process Name", "role": ["Parent Process", "Attacker"]}, {"name": "ImageLoaded", "type": "File", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "Computer", "EventCode", "ImageLoaded"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spoolsv_suspicious_loaded_modules_filter"}]}, {"name": "Remote Process Instantiation via DCOM and PowerShell Script Block", "id": "fa1c3040-4680-11ec-a618-3e22fbd008af", "version": 1, "date": "2021-11-15", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of PowerShell with arguments utilized to start a process on a remote endpoint by abusing the DCOM protocol. Specifically, this search looks for the abuse of ShellExecute and ExecuteShellCommand. Red Teams and adversaries alike may abuse DCOM for lateral movement and remote code execution.", "search": "`powershell` EventCode=4104 (Message=\"*Document.Application.ShellExecute*\" OR Message=\"*Document.ActiveView.ExecuteShellCommand*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `remote_process_instantiation_via_dcom_and_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup instructions can be found https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators may leverage DCOM to start a process on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://attack.mitre.org/techniques/T1021/003/", "https://www.cybereason.com/blog/dcom-lateral-movement-techniques"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.003/lateral_movement/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $ComputerName by abusing WMI using PowerShell.exe", "mitre_attack_id": ["T1021", "T1021.003"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Distributed Component Object Model"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_dcom_and_powershell_script_block_filter"}]}, {"name": "Detect Activity Related to Pass the Hash Attacks", "id": "f5939373-8054-40ad-8c64-cec478a22a4b", "version": 5, "date": "2020-10-15", "author": "Bhavin Patel, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for specific authentication events from the Windows Security Event logs to detect potential attempts at using the Pass-the-Hash technique.", "search": "`wineventlog_security` EventCode=4624 (Logon_Type=3 Logon_Process=NtLmSsp WorkstationName=WORKSTATION NOT AccountName=\"ANONYMOUS LOGON\") OR (Logon_Type=9 Logon_Process=seclogo) | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by EventCode, Logon_Type, WorkstationName, user, dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_activity_related_to_pass_the_hash_attacks_filter` ", "how_to_implement": "To successfully implement this search, you must ingest your Windows Security Event logs and leverage the latest TA for Windows.", "known_false_positives": "Legitimate logon activity by authorized NTLM systems may be detected by this search. Please investigate as appropriate.", "references": [], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1550.002/atomic_red_team/windows-security.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "The following $EventCode$ occurred on $dest$ by $user$ with Logon Type 3, which may be indicative of the pass the hash technique.", "mitre_attack_id": ["T1550", "T1550.002"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "EventCode", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Logon_Type", "Logon_Process", "WorkstationName", "user", "dest"], "risk_score": 49, "security_domain": "access", "mitre_attack_technique": ["Use Alternate Authentication Material", "Pass the Hash"], "mitre_attack_tactics": ["Defense Evasion", "Lateral Movement", "Defense Evasion", "Lateral Movement"], "mitre_attack_groups": ["no", "Soft Cell", "APT32", "Night Dragon", "APT28", "APT1"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_activity_related_to_pass_the_hash_attacks_filter"}]}, {"name": "Detect Regasm with Network Connection", "id": "07921114-6db4-4e2e-ae58-3ea8a52ae93f", "version": 1, "date": "2021-02-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies regasm.exe with a network connection to a public IP address, exluding private IP space. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. By contacting a remote command and control server, the adversary will have the ability to escalate privileges and complete the objectives. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. Review the reputation of the remote IP or domain and block as needed. regsvcs.exe and regasm.exe are natively found in C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe.", "search": "`sysmon` EventID=3 dest_ip!=10.0.0.0/12 dest_ip!=172.16.0.0/12 dest_ip!=192.168.0.0/16 process_name=regasm.exe | rename Computer as dest | stats count min(_time) as firstTime max(_time) as lastTime by dest, User, process_name, src_ip, dest_host, dest_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regasm_with_network_connection_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Although unlikely, limited instances of regasm.exe with a network connection may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regasm/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $process_name$ contacting a remote destination was identified on endpoint $Computer$ by user $user$. This behavior is not normal for $process_name$.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "dest_ip", "process_name", "Computer", "User", "src_ip", "dest_host", "dest_ip"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regasm_with_network_connection_filter"}]}, {"name": "CertUtil Download With VerifyCtl and Split Arguments", "id": "801ad9e4-8bfb-11eb-8b31-acde48001122", "version": 2, "date": "2021-03-23", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Certutil.exe may download a file from a remote destination using `-VerifyCtl`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. \\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question. Using `-VerifyCtl`, the file will either be written to the current working directory or `%APPDATA%\\..\\LocalLow\\Microsoft\\CryptnetUrlCache\\Content\\<hash>`. ", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` Processes.process=*verifyctl* Processes.process=*split* by Processes.dest Processes.user Processes.original_file_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_download_with_verifyctl_and_split_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives in most environments, however tune as needed based on parent-child relationship or network connection.", "references": ["https://attack.mitre.org/techniques/T1105/", "https://www.hexacorn.com/blog/2020/08/23/certutil-one-more-gui-lolbin/", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc732443(v=ws.11)#-verifyctl", "https://www.avira.com/en/blog/certutil-abused-by-attackers-to-spread-threats"], "tags": {"analytic_story": ["Ingress Tool Transfer", "DarkSide Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Command and Control"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to download a file.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=certutil.exe OR Processes.original_file_name=CertUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_certutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "certutil_download_with_verifyctl_and_split_arguments_filter"}]}, {"name": "Suspicious Reg exe Process", "id": "a6b3ab4e-dd77-4213-95fa-fc94701995e0", "version": 4, "date": "2020-07-22", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for reg.exe being launched from a command prompt not started by the user. When a user launches cmd.exe, the parent process is usually explorer.exe. This search filters out those instances.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.parent_process_name != explorer.exe Processes.process_name =cmd.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest Processes.process_id Processes.parent_process_id | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name=cmd.exe Processes.process_name= reg.exe by Processes.parent_process_id Processes.dest Processes.process_name | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename parent_process_id as process_id |dedup process_id| table process_id dest] | `suspicious_reg_exe_process_filter` ", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "It's possible for system administrators to write scripts that exhibit this behavior. If this is the case, the search will need to be modified to filter them out.", "references": ["https://car.mitre.org/wiki/CAR-2013-03-001"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Disabling Security Tools", "DHS Report TA18-074A"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1112/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Suspicious $Processes.process_path.file_path$ process running with an uncommon parent process $Processes.parent_process_name$", "mitre_attack_id": ["T1112"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_path.file_path", "type": "File Name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.user", "Processes.parent_process_name", "Processes.dest", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_reg_exe_process_filter"}]}, {"name": "System Information Discovery Detection", "id": "8e99f89e-ae58-4ebc-bf52-ae0b1a277e72", "version": 2, "date": "2021-09-07", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Detect system information discovery techniques used by attackers to understand configurations of the system to further exploit it.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=\"*wmic* qfe*\" OR Processes.process=*systeminfo* OR Processes.process=*hostname*) by Processes.user Processes.process_name Processes.process Processes.dest Processes.parent_process_name | `drop_dm_object_name(Processes)` | eventstats dc(process) as dc_processes_by_dest by dest | where dc_processes_by_dest > 2 | stats values(process) as processes min(firstTime) as firstTime max(lastTime) as lastTime by user, dest parent_process_name | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_information_discovery_detection_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators debugging servers", "references": ["https://oscp.infosecsanyam.in/priv-escalation/windows-priv-escalation"], "tags": {"analytic_story": ["Discovery Techniques"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 6", "CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Recon", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1082/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "Potential system information discovery behavior on $dest$ by $User$", "mitre_attack_id": ["T1082"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.user", "Processes.process_name", "Processes.dest"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Information Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "Inception", "Kimsuky", "Darkhotel", "MuddyWater", "APT18", "Honeybee", "APT19", "APT37", "APT32", "Magic Hound", "OilRig", "APT3", "Sowbug", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_information_discovery_detection_filter"}]}, {"name": "Disable Windows SmartScreen Protection", "id": "664f0fd0-91ff-11eb-a56f-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following search identifies a modification of registry to disable the smartscreen protection of windows machine. This is windows feature provide an early warning system against website that might engage in phishing attack or malware distribution. This modification are seen in RAT malware to cover their tracks upon downloading other of its component or other payload.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\SmartScreenEnabled\"  Registry.registry_value_name = \"Off\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_windows_smartscreen_protection_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin or user may choose to disable this windows features.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows Smartscreen was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_nam"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_windows_smartscreen_protection_filter"}]}, {"name": "Hiding Files And Directories With Attrib exe", "id": "c77162d3-f93c-45cc-80c8-22f6b5264g9f", "version": 4, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific as hidden by using specific flags so that the victim does not see the file.  The search looks for specific command-line arguments to detect the use of attrib.exe to hide files.", "search": "| tstats `security_content_summariesonly` count min(_time) values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=attrib.exe (Processes.process=*+h*) by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)`| `hiding_files_and_directories_with_attrib_exe_filter` ", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Some applications and users may legitimately use attrib.exe to interact with the files. ", "references": [], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Windows Persistence Techniques"], "asset_type": "", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1222.001/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "Attrib.exe with +h flag to hide files on $dest$ executed by $user$ is detected.", "mitre_attack_id": ["T1222", "T1222.001"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process", "type": "Other", "role": ["Attacker", "Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_name", "Processes.parent_process", "Processes.user", "Processes.dest"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification", "Windows File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "hiding_files_and_directories_with_attrib_exe_filter"}]}, {"name": "Rare Parent-Child Process Relationship", "id": "cf090c78-bcc6-11eb-8529-0242ac130003", "version": 2, "date": "2021-11-30", "author": "Peter Gael, Splunk; Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "An attacker may use LOLBAS tools spawned from vulnerable applications not typically used by system administrators. This analytic leverages the Splunk Streaming ML DSP plugin to find rare parent/child relationships. The list of application has been extracted from https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval parent_process=lower(ucast(map_get(input_event, \"parent_process_name\"), \"string\", null)), parent_process_name=mvindex(split(parent_process, \"\\\\\"), -1), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where parent_process_name!=null | select parent_process_name, process_name, cmd_line, timestamp, dest_device_id, dest_user_id | conditional_anomaly conditional=\"parent_process_name\" target=\"process_name\" | where (process_name=\"powershell.exe\" OR process_name=\"regsvcs.exe\" OR process_name=\"ftp.exe\" OR process_name=\"dfsvc.exe\" OR process_name=\"rasautou.exe\" OR process_name=\"schtasks.exe\" OR process_name=\"xwizard.exe\" OR process_name=\"findstr.exe\" OR process_name=\"esentutl.exe\" OR process_name=\"cscript.exe\" OR process_name=\"reg.exe\" OR process_name=\"csc.exe\" OR process_name=\"atbroker.exe\" OR process_name=\"print.exe\" OR process_name=\"pcwrun.exe\" OR process_name=\"vbc.exe\" OR process_name=\"rpcping.exe\" OR process_name=\"wsreset.exe\" OR process_name=\"ilasm.exe\" OR process_name=\"certutil.exe\" OR process_name=\"replace.exe\" OR process_name=\"mshta.exe\" OR process_name=\"bitsadmin.exe\" OR process_name=\"wscript.exe\" OR process_name=\"ieexec.exe\" OR process_name=\"cmd.exe\" OR process_name=\"microsoft.workflow.compiler.exe\" OR process_name=\"runscripthelper.exe\" OR process_name=\"makecab.exe\" OR process_name=\"forfiles.exe\" OR process_name=\"desktopimgdownldr.exe\" OR process_name=\"control.exe\" OR process_name=\"msbuild.exe\" OR process_name=\"register-cimprovider.exe\" OR process_name=\"tttracer.exe\" OR process_name=\"ie4uinit.exe\" OR process_name=\"sc.exe\" OR process_name=\"bash.exe\" OR process_name=\"hh.exe\" OR process_name=\"cmstp.exe\" OR process_name=\"mmc.exe\" OR process_name=\"jsc.exe\" OR process_name=\"scriptrunner.exe\" OR process_name=\"odbcconf.exe\" OR process_name=\"extexport.exe\" OR process_name=\"msdt.exe\" OR process_name=\"diskshadow.exe\" OR process_name=\"extrac32.exe\" OR process_name=\"eventvwr.exe\" OR process_name=\"mavinject.exe\" OR process_name=\"regasm.exe\" OR process_name=\"gpscript.exe\" OR process_name=\"rundll32.exe\" OR process_name=\"regsvr32.exe\" OR process_name=\"regedit.exe\" OR process_name=\"msiexec.exe\" OR process_name=\"gfxdownloadwrapper.exe\" OR process_name=\"presentationhost.exe\" OR process_name=\"regini.exe\" OR process_name=\"wmic.exe\" OR process_name=\"runonce.exe\" OR process_name=\"syncappvpublishingserver.exe\" OR process_name=\"verclsid.exe\" OR process_name=\"psr.exe\" OR process_name=\"infdefaultinstall.exe\" OR process_name=\"explorer.exe\" OR process_name=\"expand.exe\" OR process_name=\"installutil.exe\" OR process_name=\"netsh.exe\" OR process_name=\"wab.exe\" OR process_name=\"dnscmd.exe\" OR process_name=\"at.exe\" OR process_name=\"pcalua.exe\" OR process_name=\"cmdkey.exe\" OR process_name=\"msconfig.exe\") | eval input = (-1)*log(output) | adaptive_threshold algorithm=\"gaussian\" threshold=0.001 window=604800000L | where label AND input > mean | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body = create_map([\"process_name\", process_name, \"parent_process_name\", parent_process_name, \"input\", input, \"mean\", mean, \"variance\", variance, \"output\", output, \"cmd_line\", cmd_line]) | into write_ssa_detected_events();", "how_to_implement": "Collect endpoint data such as sysmon or 4688 events.", "known_false_positives": "Some custom tools used by administrators could be used rarely to launch remotely applications. This might trigger false positives at the beginning when it has not collected yet enough data to construct the baseline.", "references": ["https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries"], "tags": {"analytic_story": ["Unusual Processes"], "cis20": ["CIS 8"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1203", "T1059", "T1053", "T1072"], "nist": ["PR.PT", "DE.CM"], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process", "process_name", "parent_process_name", "_time", "dest_device_id", "dest_user_id", "cmd_line"], "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Client Execution", "Command and Scripting Interpreter", "Scheduled Task/Job", "Software Deployment Tools"], "mitre_attack_tactics": ["Execution", "Execution", "Execution", "Persistence", "Privilege Escalation", "Execution", "Lateral Movement"], "mitre_attack_groups": ["Sandworm Team", "MuddyWater", "Frankenstein", "Inception", "BlackTech", "APT41", "admin@338", "Threat Group-3390", "APT12", "The White Company", "APT33", "APT32", "APT28", "Tropic Trooper", "Lazarus Group", "BRONZE BUTLER", "Cobalt Group", "APT37", "Patchwork", "Leviathan", "Elderwood", "TA459", "APT29", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "no", "Silence", "APT32", "Threat Group-1314"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rare_parent_child_process_relationship_filter"}]}, {"name": "Remote System Discovery with Adsisearcher", "id": "70803451-0047-4e12-9d63-77fa7eb8649c", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain computers. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain computers for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*[adsisearcher]*\" AND Message = \"*objectclass=computer*\" AND Message = \"*findAll()*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `remote_system_discovery_with_adsisearcher_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use Adsisearcher for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_system_discovery_with_adsisearcher_filter"}]}, {"name": "Eventvwr UAC Bypass", "id": "9cf8fe08-7ad8-11eb-9819-acde48001122", "version": 1, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following search identifies Eventvwr bypass by identifying the registry modification into a specific path that eventvwr.msc looks to (but is not valid) upon execution. A successful attack will include a suspicious command to be executed upon eventvwr.msc loading. Upon triage, review the parallel processes that have executed. Identify any additional registry modifications on the endpoint that may look suspicious. Remediate as necessary.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where  Registry.registry_path=\"*mscfile\\\\shell\\\\open\\\\command\\\\*\"  by Registry.user, Registry.dest , Registry.registry_value_name| `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `eventvwr_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node.", "known_false_positives": "Some false positives may be present and will need to be filtered.", "references": ["https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md", "https://attack.mitre.org/techniques/T1548/002", "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "IcedID"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "Registry values were modified to bypass UAC using Event Viewer on $dest$ by $user$.", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "eventvwr_uac_bypass_filter"}]}, {"name": "Spoolsv Writing a DLL", "id": "d5bf5cf2-da71-11eb-92c2-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies a `.dll` being written by `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to write a `.dll`. Current POC code used will write the suspicious DLL to disk within a path of `\\spool\\drivers\\x64\\`. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=spoolsv.exe by _time Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path=\"*\\\\spool\\\\drivers\\\\x64\\\\*\" Filesystem.file_name=\"*.dll\" by _time Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name | `spoolsv_writing_a_dll_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node and `Filesystem` node.", "known_false_positives": "Unknown.", "references": ["https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Defense Evasion"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "$process_name$ has been identified writing dll's to $file_path$ on endpoint $dest$. This behavior is suspicious and related to PrintNightmare.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_id", "type": "Process", "role": ["Process"]}, {"name": "file_path", "type": "File", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.dest", "Filesystem.file_create_time", "Filesystem.file_name", "Filesystem.file_path", "Processes.process_name", "Processes.process_id", "Processes.process_name", "Processes.dest"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spoolsv_writing_a_dll_filter"}]}, {"name": "DSQuery Domain Discovery", "id": "cc316032-924a-11eb-91a2-acde48001122", "version": 1, "date": "2021-03-31", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies \"dsquery.exe\" execution with arguments looking for `TrustedDomain` query directly on the command-line. This is typically indicative of an Administrator or adversary perform domain trust discovery. Note that this query does not identify any other variations of \"Dsquery.exe\" usage.\\\nWithin this detection, it is assumed `dsquery.exe` is not moved or renamed.\\\nThe search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process \"dsquery.exe\" and its parent process.\\\nDSQuery.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64` and only on Server operating system.\\\nThe following DLL(s) are loaded when DSQuery.exe is launched `dsquery.dll`. If found loaded by another process, it is possible dsquery is running within that process context in memory.\\\nIn addition to trust discovery, review parallel processes for additional behaviors performed. Identify the parent process and capture any files (batch files, for example) being used.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=dsquery.exe Processes.process=*trustedDomain* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dsquery_domain_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited false positives. If there is a true false positive, filter based on command-line or parent process.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1482/T1482.md", "http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc732952(v=ws.11)", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc754232(v=ws.11)"], "tags": {"analytic_story": ["Domain Trust Discovery", "Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified performing domain discovery on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1482"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dsquery_domain_discovery_filter"}]}, {"name": "GetCurrent User with PowerShell", "id": "7eb9c3d5-c98c-4088-acc5-8240bad15379", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powerhsell.exe` with command-line arguments that execute the `GetCurrent` method of the WindowsIdentity .NET class. This method returns an object that represents the current Windows user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*System.Security.Principal.WindowsIdentity* OR Processes.process=*GetCurrent()*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getcurrent_user_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getcurrent_user_with_powershell_filter"}]}, {"name": "Detect Rundll32 Application Control Bypass - advpack", "id": "4aefadfe-9abd-4bf8-b3fd-867e9ef95bf8", "version": 2, "date": "2021-02-04", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe loading advpack.dll and ieadvpack.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*advpack* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___advpack_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use advpack.dll or ieadvpack.dll, triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://lolbas-project.github.io/lolbas/Libraries/Advpack/", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ loading advpack.dll and ieadvpack.dll by calling the LaunchINFSection function on the command line was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rundll32_application_control_bypass___advpack_filter"}]}, {"name": "Schtasks scheduling job on remote system", "id": "1297fb80-f42a-4b4a-9c8a-88c066237cf6", "version": 5, "date": "2021-11-11", "author": "David Dorsey, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `schtasks.exe` with command-line arguments utilized to create a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = schtasks.exe OR Processes.original_file_name=schtasks.exe) (Processes.process=\"*/create*\" AND Processes.process=\"*/s*\") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_scheduling_job_on_remote_system_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Administrators may create scheduled tasks on remote systems, but this activity is usually limited to a small set of hosts or users. It is important to validate and investigate as appropriate.", "references": [], "tags": {"analytic_story": ["Active Directory Lateral Movement", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3"], "confidence": 90, "context": ["source:endpoint", {"stage": "Execution"}, "Persistence", "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A schedule task process $process_name$ with remote job commandline $process$ in host $dest$", "mitre_attack_id": ["T1053.005", "T1053"], "nist": ["PR.IP"], "observable": [{"name": "Processes.dest", "type": "Hostname", "role": ["Victim"]}, {"name": "Processes.user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schtasks_scheduling_job_on_remote_system_filter"}]}, {"name": "Kerberoasting spn request with RC4 encryption", "id": "5cc67381-44fa-4111-8a37-7a230943f027", "version": 3, "date": "2020-10-16", "author": "Jose Hernandez, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects a potential kerberoasting attack via service principal name requests", "search": "`wineventlog_security` EventCode=4769 Ticket_Options=0x40810000 Ticket_Encryption_Type=0x17 | stats count min(_time) as firstTime max(_time) as lastTime by dest, service, service_id, Ticket_Encryption_Type, Ticket_Options | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `kerberoasting_spn_request_with_rc4_encryption_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, and include the windows security event logs that contain kerberos", "known_false_positives": "Older systems that support kerberos RC4 by default NetApp may generate false positives", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1208/T1208.md", "https://www.trimarcsecurity.com/post/trimarcresearch-detecting-kerberoasting-activity"], "tags": {"analytic_story": ["Windows Privilege Escalation"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1558.003/atomic_red_team/windows-security.log"], "impact": 90, "kill_chain_phases": ["Privilege Escalation"], "message": "Potential kerberoasting attack via service principal name requests detected on $dest$", "mitre_attack_id": ["T1558.003", "T1558"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Ticket_Options", "Ticket_Encryption_Type", "dest", "service", "service_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Kerberoasting", "Steal or Forge Kerberos Tickets"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "kerberoasting_spn_request_with_rc4_encryption_filter"}]}, {"name": "Recursive Delete of Directory In Batch CMD", "id": "ba570b3a-d356-11eb-8358-acde48001122", "version": 2, "date": "2021-06-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious commandline designed to delete files or directory recursive using batch command. This technique was seen in ransomware (reddot) where it it tries to delete the files in recycle bin to impaire user from recovering deleted files.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` Processes.process=*/c*  Processes.process=* rd * Processes.process=\"*/s*\" Processes.process=\"*/q*\" by Processes.user Processes.process_name Processes.parent_process_name Processes.parent_process Processes.process Processes.process_id Processes.dest |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recursive_delete_of_directory_in_batch_cmd_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "network operator may use this batch command to delete recursively a directory or files within directory", "references": ["https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1070.004", "T1070"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["File Deletion", "Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Tropic Trooper", "Gamaredon Group", "Wizard Spider", "APT41", "Kimsuky", "Silence", "The White Company", "TEMP.Veles", "APT32", "APT38", "Patchwork", "Honeybee", "Cobalt Group", "Dragonfly 2.0", "menuPass", "FIN8", "OilRig", "FIN5", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "APT28", "Threat Group-3390", "Group5", "Lazarus Group", "APT18", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "recursive_delete_of_directory_in_batch_cmd_filter"}]}, {"name": "Common Ransomware Notes", "id": "ada0f478-84a8-4641-a3f1-d82362d6bd71", "version": 4, "date": "2020-11-09", "author": "David Dorsey, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The search looks for files created with names matching those typically used in ransomware notes that tell the victim how to get their data back.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `ransomware_notes` | `common_ransomware_notes_filter`", "how_to_implement": "You must be ingesting data that records file-system activity from your hosts to populate the Endpoint Filesystem data-model node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or via other endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report file-system reads and writes.", "known_false_positives": "It's possible that a legitimate file could be created with the same name used by ransomware note files.", "references": [], "tags": {"Consequence": "Data Destruction", "analytic_story": ["SamSam Ransomware", "Ransomware", "Ryuk Ransomware", "Clop Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1485/ransomware_notes/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "A file - $file_name$ was written to disk on endpoint $dest$ by user $user$, this is indicative of a known ransomware note file and should be reviewed immediately.", "mitre_attack_id": ["T1485"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.user", "Filesystem.dest", "Filesystem.file_path", "Filesystem.file_name"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38"]}, "macros": [{"definition": "lookup ransomware_notes_lookup ransomware_notes as file_name OUTPUT status as \"Known Ransomware Notes\" | search \"Known Ransomware Notes\"=True", "description": "This macro limits the output to files that have been identified as a ransomware note", "name": "ransomware_notes", "lookups": [{"default_match": "false", "description": "A list of file names that are ransomware note files", "filename": "ransomware_notes.csv", "match_type": "WILDCARD(ransomware_notes)", "min_matches": 1, "name": "ransomware_notes_lookup", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/ransomware_notes.csv"}]}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "common_ransomware_notes_filter"}]}, {"name": "Office Spawning Control", "id": "053e027c-10c7-11ec-8437-acde48001122", "version": 1, "date": "2021-09-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies control.exe spawning from an office product. This detection identifies any Windows Office Product spawning `control.exe`. In malicious instances, the command-line of `control.exe` will contain a file path to a .cpl or .inf, related to CVE-2021-40444. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. review parallel and child processes to identify further suspicious behavior", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\",\"wordpad.exe\",\"wordview.exe\") Processes.process_name=control.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `office_spawning_control_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present.", "references": ["https://strontic.github.io/xcyclopedia/library/control.exe-1F13E714A0FEA8887707DFF49287996F.html", "https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://attack.mitre.org/techniques/T1218/011/", "https://www.echotrail.io/insights/search/control.exe", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.002/T1218.002.yaml"], "tags": {"analytic_story": ["Spearphishing Attachments", "Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_control.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ clicking a suspicious attachment.", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_spawning_control_filter"}]}, {"name": "Deleting Shadow Copies", "id": "b89919ed-ee5f-492c-b139-95dbb162039e", "version": 4, "date": "2020-11-09", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The vssadmin.exe utility is used to interact with the Volume Shadow Copy Service.  Wmic is an interface to the Windows Management Instrumentation.  This search looks for either of these tools being used to delete shadow copies.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=vssadmin.exe OR Processes.process_name=wmic.exe) Processes.process=*delete* Processes.process=*shadow* by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `deleting_shadow_copies_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "vssadmin.exe and wmic.exe are standard applications shipped with modern versions of windows. They may be used by administrators to legitimately delete old backup copies, although this is typically rare.", "references": [], "tags": {"analytic_story": ["Windows Log Manipulation", "SamSam Ransomware", "Ransomware", "Clop Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 10"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1490/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to delete shadow copies.", "mitre_attack_id": ["T1490"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "deleting_shadow_copies_filter"}]}, {"name": "Elevated Group Discovery With Net", "id": "a23a0e20-0b1b-4a07-82e5-ec5f70811e7a", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` or `net1.exe`  with command-line arguments utilized to query for specific elevated domain groups. Red Teams and adversaries alike use net.exe to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"net.exe\" OR Processes.process_name=\"net1.exe\") (Processes.process=\"*group*\" AND Processes.process=\"*/do*\") (Processes.process=\"*Domain Admins*\" OR Processes.process=\"*Enterprise Admins*\" OR Processes.process=\"*Schema Admins*\" OR Processes.process=\"*Account Operators*\" OR Processes.process=\"*Server Operators*\" OR Processes.process=\"*Protected Users*\" OR Processes.process=\"*Dns Admins*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `elevated_group_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-b--privileged-accounts-and-groups-in-active-directory", "https://adsecurity.org/?p=3658"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Elevated domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "elevated_group_discovery_with_net_filter"}]}, {"name": "GetDomainController with PowerShell", "id": "868ee0e4-52ab-484a-833a-6d85b7c028d0", "version": 1, "date": "2021-09-07", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. `Get-DomainController` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-DomainController*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaincontroller_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use PowerView for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainController/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery using PowerView on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaincontroller_with_powershell_filter"}]}, {"name": "System User Discovery With Query", "id": "ad03bfcf-8a91-4bc2-a500-112993deba87", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `query.exe` with command-line arguments utilized to discover the logged user. Red Teams and adversaries alike may leverage `query.exe` to identify system users on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"query.exe\") (Processes.process=*user*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_user_discovery_with_query_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_user_discovery_with_query_filter"}]}, {"name": "Excessive Usage Of Cacls App", "id": "0bdf6092-af17-11eb-939a-acde48001122", "version": 1, "date": "2021-05-07", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies excessive usage of `cacls.exe`, `xcacls.exe` or `icacls.exe` application to change file or folder permission. This behavior is commonly seen where the adversary attempts to impair some users from deleting or accessing its malware components or artifact from the compromised system.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id  values(Processes.process_name) as process_name count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_name = \"cacls.exe\" OR Processes.process_name = \"icacls.exe\" OR Processes.process_name = \"XCACLS.exe\" by Processes.parent_process_name Processes.parent_process Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_cacls_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or administrative scripts may use this application. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An excessive amount of $process_name$ was executed on $dest$ attempting to modify permissions.", "mitre_attack_id": ["T1222"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_id", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_usage_of_cacls_app_filter"}]}, {"name": "Remote Process Instantiation via WinRM and PowerShell Script Block", "id": "7d4c618e-4716-11ec-951c-3e22fbd008af", "version": 1, "date": "2021-11-16", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of PowerShell with arguments utilized to start a process on a remote endpoint by abusing the WinRM protocol. Specifically, this search looks for the abuse of the `Invoke-Command` commandlet. Red Teams and adversaries alike may abuse WinRM for lateral movement and remote code execution.", "search": "`powershell` EventCode=4104 (Message=\"*Invoke-Command*\" AND Message=\"*-ComputerName*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `remote_process_instantiation_via_winrm_and_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup instructions can be found https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators may leverage WinRM and `Invoke-Command` to start a process on remote systems for system administration or automation use cases. This activity is usually limited to a small set of hosts or users. In certain environments, tuning may not be possible.", "references": ["https://attack.mitre.org/techniques/T1021/006/", "https://pentestlab.blog/2018/05/15/lateral-movement-winrm/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.006/lateral_movement_psh/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $ComputerName by abusing WinRM using PowerShell.exe", "mitre_attack_id": ["T1021", "T1021.006"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Windows Remote Management"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_winrm_and_powershell_script_block_filter"}]}, {"name": "Get DomainUser with PowerShell", "id": "9a5a41d6-04e7-11ec-923c-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to enumerate domain users. `Get-DomainUser` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"cmd.exe\" OR Processes.process_name=\"powershell*\") AND Processes.process = \"*Get-DomainUser*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainuser_with_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainUser/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "an instance of process $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id", "Processes.parent_process_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domainuser_with_powershell_filter"}]}, {"name": "Disable Windows Behavior Monitoring", "id": "79439cae-9200-11eb-a4d3-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identifies a modification in registry to disable the windows denfender real time behavior monitoring. This event or technique is commonly seen in RAT, bot, or Trojan to disable AV to evade detections.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\Real-Time Protection\\\\DisableBehaviorMonitoring\" OR Registry.registry_path= \"*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\Real-Time Protection\\\\DisableOnAccessProtection\" OR Registry.registry_path= \"*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\Real-Time Protection\\\\DisableScanOnRealtimeEnable\" OR Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Real-Time Protection\\\\DisableRealtimeMonitoring\" OR Registry.registry_path= \"*\\\\Real-Time Protection\\\\DisableIntrusionPreventionSystem\" OR Registry.registry_path= \"*\\\\Real-Time Protection\\\\DisableIOAVProtection\" OR Registry.registry_path= \"*\\\\Real-Time Protection\\\\DisableScriptScanning\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_windows_behavior_monitoring_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin or user may choose to disable this windows features.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": [{"Source": "Endpoint"}, {"Stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Windows Defender real time behavior monitoring disabled on $dest", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_windows_behavior_monitoring_filter"}]}, {"name": "Malicious PowerShell Process - Connect To Internet With Hidden Window", "id": "ee18ed37-0802-4268-9435-b3b91aaa18db", "version": 7, "date": "2021-10-05", "author": "David Dorsey, Michael Haag Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic identifies PowerShell commands utilizing the WindowStyle parameter to hide the window on the compromised endpoint. This combination of command-line options is suspicious because it is overriding the default PowerShell execution policy, attempts to hide its activity from the user, and connects to the Internet. Removed in this version of the query is New-Object. The analytic identifies all variations of WindowStyle, as PowerShell allows the ability to shorten the parameter. For example w, win, windowsty and so forth. In addition, through our research it was identified that PowerShell will interpret different command switch types beyond the hyphen. We have added endash, emdash, horizontal bar, and forward slash.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,\"(?i)[\\-|\\/|\u2013|\u2014|\u2015]w(in*d*o*w*s*t*y*l*e*)*\\s+[^-]\") | `malicious_powershell_process___connect_to_internet_with_hidden_window_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Legitimate process can have this combination of command-line options, but it's not common.", "references": ["https://regexr.com/663rr", "https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1059.001_PowerShell/OutPowerShellCommandLineParameter.ps1", "https://ss64.com/ps/powershell.html", "https://twitter.com/M_haggis/status/1440758396534214658?s=20", "https://blog.netlab.360.com/ten-families-of-malicious-samples-are-spreading-using-the-log4j2-vulnerability-now/"], "tags": {"analytic_story": ["Malicious PowerShell", "Possible Backdoor Activity Associated With MUDCARP Espionage Campaigns", "HAFNIUM Group", "Log4Shell CVE-2021-44228"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 7", "CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Command And Control"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/hidden_powershell/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "PowerShell processes $process$ started with parameters to modify the execution policy of the run, run in a hidden window, and connect to the Internet on host $dest$ executed by user $user$.", "mitre_attack_id": ["T1059.001", "T1059"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process", "type": "Process", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_name", "Processes.user", "Processes.parent_process_name", "Processes.dest"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["PowerShell", "Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_powershell_process___connect_to_internet_with_hidden_window_filter"}]}, {"name": "Anomalous usage of 7zip", "id": "9364ee8e-a39a-11eb-8f1d-acde48001122", "version": 1, "date": "2021-04-22", "author": "Michael Haag, Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following detection identifies a 7z.exe spawned from `Rundll32.exe` or `Dllhost.exe`. It is assumed that the adversary has brought in `7z.exe` and `7z.dll`. It has been observed where an adversary will rename `7z.exe`. Additional coverage may be required to identify the behavior of renamed instances of `7z.exe`. During triage, identify the source of injection into `Rundll32.exe` or `Dllhost.exe`. Capture any files written to disk and analyze as needed. Review parallel processes for additional behaviors. Typically, archiving files will result in exfiltration.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"rundll32.exe\", \"dllhost.exe\") Processes.process_name=*7z* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `anomalous_usage_of_7zip_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "False positives should be limited as this behavior is not normal for `rundll32.exe` or `dllhost.exe` to spawn and run 7zip.", "references": ["https://attack.mitre.org/techniques/T1560/001/", "https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/", "https://thedfirreport.com/2021/01/31/bazar-no-ryuk/"], "tags": {"analytic_story": ["Cobalt Strike", "NOBELIUM Group"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1560.001/archive_utility/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objective"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$. This behavior is indicative of suspicious loading of 7zip.", "mitre_attack_id": ["T1560.001", "T1560"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.process_name", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Archive via Utility", "Archive Collected Data"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT41", "Soft Cell", "Turla", "Gallmaker", "APT33", "APT39", "MuddyWater", "Magic Hound", "FIN8", "BRONZE BUTLER", "CopyKittens", "APT3", "Sowbug", "menuPass", "APT1", "Ke3chang", "menuPass", "APT32", "Honeybee", "Patchwork", "APT28", "Dragonfly 2.0", "FIN6", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "anomalous_usage_of_7zip_filter"}]}, {"name": "Execute Javascript With Jscript COM CLSID", "id": "dc64d064-d346-11eb-8588-acde48001122", "version": 1, "date": "2021-06-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will identify suspicious process of cscript.exe where it tries to execute javascript using jscript.encode CLSID (COM OBJ). This technique was seen in ransomware (reddot ransomware) where it execute javascript with this com object with combination of amsi disabling technique.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"cscript.exe\" Processes.process=\"*-e:{F414C262-6AC0-11CF-B6D1-00AA00BBBB58}*\" by Processes.parent_process_name Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `execute_javascript_with_jscript_com_clsid_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the Filesystem responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesystem` node.", "known_false_positives": "unknown", "references": ["https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Suspicious process of cscript.exe with a parent process $parent_process_name$ where it tries to execute javascript using jscript.encode CLSID (COM OBJ), detected on $dest$ by $user$", "mitre_attack_id": ["T1059", "T1059.005"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_id", "type": "Process", "role": ["Attacker"]}, {"name": "parent_process_name", "type": "Process Name", "role": ["Parent Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.parent_process", "Processes.process_id", "Processes.dest", "Processes.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Visual Basic"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT33", "Sandworm Team", "Gamaredon Group", "Sharpshooter", "Molerats", "Frankenstein", "Inception", "APT-C-36", "Rancor", "Patchwork", "MuddyWater", "Honeybee", "FIN7", "APT37", "BRONZE BUTLER", "APT32", "Turla", "TA505", "Silence", "WIRTE", "FIN4", "Cobalt Group", "Gorgon Group", "Leviathan", "TA459", "Magic Hound"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "execute_javascript_with_jscript_com_clsid_filter"}]}, {"name": "Check Elevated CMD using whoami", "id": "a9079b18-1633-11ec-859c-acde48001122", "version": 1, "date": "2021-09-15", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious whoami execution to check if the cmd or shell instance process is with elevated privileges. This technique was seen in FIN7 js implant where it execute this as part of its data collection to the infected machine to check if the running shell cmd process is elevated or not. This TTP is really a good alert for known attacker that recon on the targetted host. This command is not so commonly executed by a normal user or even an admin to check if a process is elevated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.process = \"*whoami*\" Processes.process = \"*/group*\" Processes.process = \"* find *\" Processes.process = \"*12288*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `check_elevated_cmd_using_whoami_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["FIN7"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_js_2/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Process name $process_name$ with commandline $process$ in $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process_id", "Processes.process", "Processes.dest", "Processes.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "check_elevated_cmd_using_whoami_filter"}]}, {"name": "Attacker Tools On Endpoint", "id": "a51bfe1a-94f0-48cc-b4e4-16a110145893", "version": 2, "date": "2021-11-04", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for execution of commonly used attacker tools on an endpoint.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process values(Processes.parent_process) as parent_process from datamodel=Endpoint.Processes where Processes.dest!=unknown Processes.user!=unknown by Processes.dest Processes.user Processes.process_name Processes.process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | lookup attacker_tools attacker_tool_names AS process_name OUTPUT description | search description !=false| `attacker_tools_on_endpoint_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records process activity from your hosts to populate the endpoint data model in the processes node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is usually generated via logs that report process tracking in your Windows audit settings.", "known_false_positives": "Some administrator activity can be potentially triggered, please add those users to the filter macro.", "references": [], "tags": {"analytic_story": ["Monitor for Unauthorized Software", "XMRig", "SamSam Ransomware", "Unusual Processes"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 2"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Exploitation", "Stage:Recon", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1595/attacker_scan_tools/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Installation", "Command and Control", "Actions on Objectives"], "message": "An attacker tool $process_name$,listed in attacker_tools.csv is executed on host $dest$ by User $user$. This process $process_name$ is known to do- $description$", "mitre_attack_id": ["T1036.005", "T1036", "T1003", "T1595"], "nist": ["ID.AM", "PR.DS"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.process_name", "Processes.parent_process"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Match Legitimate Name or Location", "Masquerading", "OS Credential Dumping"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Credential Access"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "APT39", "Blue Mockingbird", "Whitefly", "Tropic Trooper", "Silence", "APT41", "menuPass", "TEMP.Veles", "MuddyWater", "BRONZE BUTLER", "Sowbug", "APT32", "Patchwork", "Poseidon Group", "admin@338", "Carbanak", "APT1", "Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attacker_tools_on_endpoint_filter"}], "lookups": [{"description": "A list of tools used by attackers", "filename": "attacker_tools.csv", "name": "attacker_tools", "default_match": "false", "match_type": "WILDCARD(attacker_tool_names)", "min_matches": 1, "case_sensitive_match": "false", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/attacker_tools.csv"}]}, {"name": "Office Product Spawning CertUtil", "id": "6925fe72-a6d5-11eb-9e17-acde48001122", "version": 2, "date": "2021-04-26", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `certutil.exe`. In malicious instances, the command-line of `certutil.exe` will contain a URL to a remote destination. In addition, Threat Research has released a detections identifying suspicious use of `certutil.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `certutil.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") `process_certutil` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_certutil_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "No false positives known. Filter as needed.", "references": ["https://redcanary.com/threat-detection-report/threats/TA551/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1105/T1105.md"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_macros.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "office parent process $parent_process_name$ will execute a suspicious child process $process_name$ with process id $process_id$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process_name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=certutil.exe OR Processes.original_file_name=CertUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_certutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawning_certutil_filter"}]}, {"name": "WinEvent Scheduled Task Created to Spawn Shell", "id": "203ef0ea-9bd8-11eb-8201-acde48001122", "version": 1, "date": "2021-04-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed with a native Windows shell (PowerShell, Cmd, Wscript, Cscript).\\\nThe search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not.\\\nschtasks.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64`.\\\nThe following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory.\\\nUpon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.", "search": "`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (\"*powershell.exe*\", \"*wscript.exe*\", \"*cscript.exe*\", \"*cmd.exe*\", \"*sh.exe*\", \"*ksh.exe*\", \"*zsh.exe*\", \"*bash.exe*\", \"*scrcons.exe*\", \"*pwsh.exe*\") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_scheduled_task_created_to_spawn_shell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Security Event Logs with 4698 EventCode enabled. The Windows TA is also required.", "known_false_positives": "False positives are possible if legitimate applications are allowed to register tasks that call a shell to be spawned. Filter as needed based on command-line or processes that are used legitimately.", "references": ["https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/", "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4698", "https://redcanary.com/threat-detection-report/techniques/scheduled-task-job/", "https://docs.microsoft.com/en-us/windows/win32/taskschd/time-trigger-example--scripting-?redirectedfrom=MSDN"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Ransomware", "Ryuk Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Persistence", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/atomic_red_team/windows-security.log"], "impact": 70, "kill_chain_phases": ["Privilege Escalation"], "message": "A windows scheduled task was created (task name=$Task_Name$) on $dest$ by the following command: $Command$", "mitre_attack_id": ["T1053.005", "T1053"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Command", "type": "Command", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Task_Name", "Description", "Command"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winevent_scheduled_task_created_to_spawn_shell_filter"}]}, {"name": "Suspicious Rundll32 no Command Line Arguments", "id": "e451bd16-e4c5-4109-8eb1-c4c6ecf048b4", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe with no command line arguments. It is unusual for rundll32.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_rundll32` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(rundll32\\.exe.{0,4}$)\" | `suspicious_rundll32_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of rundll32, triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Cobalt Strike", "PrintNightmare CVE-2021-34527"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access", "Stage:Defense Evasion"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Suspicious rundll32.exe process with no command line arguments executed on $dest$ by $user$", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_rundll32_no_command_line_arguments_filter"}]}, {"name": "Short Lived Scheduled Task", "id": "6fa31414-546e-11ec-adfa-acde48001122", "version": 1, "date": "2021-12-03", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic leverages Windows Security EventCode 4698, `A scheduled task was created` and Windows Security EventCode 4699, `A scheduled task was deleted` to identify scheduled tasks created and deleted in less than 30 seconds. This behavior may represent a lateral movement attack abusing the Task Scheduler to obtain code execution. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution.", "search": " `wineventlog_security` EventCode=4698 OR EventCode=4699 | xmlkv Message | transaction Task_Name  startswith=(EventCode=4698) endswith=(EventCode=4699) | eval short_lived=case((duration<30),\"TRUE\") | search  short_lived = TRUE | table _time, ComputerName, Account_Name, Command, Task_Name, short_lived | `short_lived_scheduled_task_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Security Event Logs with 4698 EventCode enabled. The Windows TA is also required.", "known_false_positives": "Although uncommon, legitimate applications may create and delete a Scheduled Task within 30 seconds. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1053/005/", "https://docs.microsoft.com/en-us/windows/win32/taskschd/about-the-task-scheduler"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Persistence", "Stage:Privilege Escalation", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/lateral_movement/windows-security.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A windows scheduled task was created and deleted in 30 seconds on $ComputerName$", "mitre_attack_id": ["T1053.005"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Command", "type": "Command", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "ComputerName", "Account_Name", "Task_Name", "Description", "Command"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "short_lived_scheduled_task_filter"}]}, {"name": "Winword Spawning Windows Script Host", "id": "637e1b5c-9be1-11eb-9c32-acde48001122", "version": 1, "date": "2021-04-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies Microsoft Winword.exe spawning Windows Script Host - `cscript.exe` or `wscript.exe`. Typically, this is not common behavior and not default with Winword.exe. Winword.exe will generally be found in the following path `C:\\Program Files\\Microsoft Office\\root\\Office16` (version will vary). `cscript.exe` or `wscript.exe` default location is `c:\\windows\\system32\\` or c:windows\\syswow64\\`. `cscript.exe` or `wscript.exe` spawning from Winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line executed will most likely be obfuscated and captured via another detection. During triage, review parallel processes and identify any files that may have been written. Review the reputation of the remote destination and block accordingly.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"winword.exe\" Processes.process_name IN (\"cscript.exe\", \"wscript.exe\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winword_spawning_windows_script_host_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "There will be limited false positives and it will be different for every environment. Tune by child process or command-line as needed.", "references": ["https://attack.mitre.org/techniques/T1566/001/"], "tags": {"analytic_story": ["Spearphishing Attachment"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_wsh.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "User $user$ on $dest$ spawned Windows Script Host from Winword.exe", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "process_id", "parent_process_name", "dest", "user", "parent_process_id"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winword_spawning_windows_script_host_filter"}]}, {"name": "Logon Script Event Trigger Execution", "id": "4c38c264-1f74-11ec-b5fa-acde48001122", "version": 1, "date": "2021-09-27", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious modification of registry entry to persist and gain privilege escalation upon booting up of compromised host. This technique was seen in several APT and malware where it modify UserInitMprLogonScript registry entry to its malicious payload to be executed upon boot up of the machine.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path IN (\"*\\\\Environment\\\\UserInitMprLogonScript\") by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `logon_script_event_trigger_execution_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://attack.mitre.org/techniques/T1037/001"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1037.001/logonscript_reg/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1037", "T1037.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Initialization Scripts", "Logon Script (Windows)"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Rocke", "Cobalt Group", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "logon_script_event_trigger_execution_filter"}]}, {"name": "Office Product Writing cab or inf", "id": "f48cd1d4-125a-11ec-a447-acde48001122", "version": 1, "date": "2021-09-10", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies behavior related to CVE-2021-40444. Whereas the malicious document will load ActiveX and download the remote payload (.inf, .cab). During triage, review parallel processes and further activity on endpoint to identify additional patterns. Retrieve the file modifications and analyze further.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\",\"wordpad.exe\",\"wordview.exe\") by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*.inf\",\"*.cab\") by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest, process_name, process, file_create_time, file_name, file_path | `office_product_writing_cab_or_inf_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node and `Filesystem` node.", "known_false_positives": "The query is structured in a way that `action` (read, create) is not defined. Review the results of this query, filter, and tune as necessary. It may be necessary to generate this query specific to your endpoint product.", "references": ["https://twitter.com/vxunderground/status/1436326057179860992?s=20", "https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://twitter.com/RonnyTNL/status/1436334640617373699?s=20"], "tags": {"analytic_story": ["Spearphishing Attachments", "Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_cabinf.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $process_name$ was identified on $dest$ writing an inf or cab file to this. This is not typical of $process_name$.", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "process_name", "process", "file_create_time", "file_name", "file_path"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_writing_cab_or_inf_filter"}]}, {"name": "Vbscript Execution Using Wscript App", "id": "35159940-228f-11ec-8a49-acde48001122", "version": 1, "date": "2021-10-01", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious wscript commandline to execute vbscript. This technique was seen in several malware to execute malicious vbs file using wscript application. commonly vbs script is associated to cscript process and this can be a technique to evade process parent child detections or even some av script emulation system.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = \"wscript.exe\" AND Processes.parent_process = \"*//e:vbscript*\") OR (Processes.process_name = \"wscript.exe\" AND Processes.process = \"*//e:vbscript*\") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `vbscript_execution_using_wscript_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://www.joesandbox.com/analysis/369332/0/html"], "tags": {"analytic_story": ["FIN7", "Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.005/vbs_wscript/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Process name $process_name$ with commandline $process$ to execute vbsscript", "mitre_attack_id": ["T1059.005", "T1059"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Visual Basic", "Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Gamaredon Group", "Sharpshooter", "Molerats", "Frankenstein", "Inception", "APT-C-36", "Rancor", "Patchwork", "MuddyWater", "Honeybee", "FIN7", "APT37", "BRONZE BUTLER", "APT32", "Turla", "TA505", "Silence", "WIRTE", "FIN4", "Cobalt Group", "Gorgon Group", "Leviathan", "TA459", "Magic Hound", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "vbscript_execution_using_wscript_app_filter"}]}, {"name": "Create or delete windows shares using net exe", "id": "qw9919ed-fe5f-492c-b139-151bb162140e", "version": 6, "date": "2020-09-16", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for the creation or deletion of hidden shares using net.exe.", "search": "| tstats `security_content_summariesonly` count values(Processes.user) as user values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` by Processes.process Processes.process_name Processes.original_file_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | search process=*share* | `create_or_delete_windows_shares_using_net_exe_filter` ", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Administrators often leverage net.exe to create or delete network shares. You should verify that the activity was intentional and is legitimate.", "references": ["https://attack.mitre.org/techniques/T1070/005"], "tags": {"analytic_story": ["Hidden Cobra Malware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.005/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ enumerating Windows file shares.", "mitre_attack_id": ["T1070", "T1070.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Network Share Connection Removal"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "create_or_delete_windows_shares_using_net_exe_filter"}]}, {"name": "WSReset UAC Bypass", "id": "8b5901bc-da63-11eb-be43-acde48001122", "version": 1, "date": "2021-07-01", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious modification of registry related to UAC bypass. This technique is to modify the registry in this detection, create a registry value with the path of the payload and run WSreset.exe to bypass User account Control.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\\\Shell\\\\open\\\\command*\" (Registry.registry_value_name = \"(Default)\" OR Registry.registry_value_name = \"DelegateExecute\") by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wsreset_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://github.com/hfiref0x/UACME", "https://blog.morphisec.com/trickbot-uses-a-new-windows-10-uac-bypass"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/uac_bypass/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious modification of registry $registry_path$ with possible payload path $registry_value_name$ in $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wsreset_uac_bypass_filter"}]}, {"name": "Conti Common Exec parameter", "id": "624919bc-c382-11eb-adcc-acde48001122", "version": 1, "date": "2021-06-02", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects the suspicious commandline argument of revil ransomware to encrypt specific or all local drive and network shares of the compromised machine or host.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = \"*-m local*\" OR Processes.process = \"*-m net*\" OR Processes.process = \"*-m all*\" OR Processes.process = \"*-nomutex*\" by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `conti_common_exec_parameter_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "3rd party tool may have commandline parameter that can trigger this detection.", "references": ["https://malpedia.caad.fkie.fraunhofer.de/details/win.conti"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/conti/inf1/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ executing specific Conti Ransomware related parameters.", "mitre_attack_id": ["T1204"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "conti_common_exec_parameter_filter"}]}, {"name": "Disable Defender Enhanced Notification", "id": "dc65678c-301f-11ec-8e30-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the Enhanced Notification feature wher user or admin set to show or display alerts.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*Microsoft\\\\Windows Defender\\\\Reporting*\" Registry.registry_value_name = DisableEnhancedNotifications Registry.registry_value_data = 0x00000001 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_enhanced_notification_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "user may choose to disable windows defender AV", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_enhanced_notification_filter"}]}, {"name": "Detect Rundll32 Application Control Bypass - setupapi", "id": "61e7b44a-6088-4f26-b788-9a96ba13b37a", "version": 2, "date": "2021-02-04", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe loading setupapi.dll and iesetupapi.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*setupapi* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___setupapi_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Although unlikely, some legitimate applications may use setupapi triggering a false positive.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://lolbas-project.github.io/lolbas/Libraries/Setupapi/", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ loading setupapi.dll and iesetupapi.dll by calling the LaunchINFSection function on the command line was identified on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rundll32_application_control_bypass___setupapi_filter"}]}, {"name": "Windows Defender Exclusion Registry Entry", "id": "13395a44-4dd9-11ec-9df7-acde48001122", "version": 1, "date": "2021-11-25", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious process that modify a registry related to windows defender exclusion feature. This registry is abused by adversaries, malware author and red teams to bypassed Windows Defender Anti-Virus product by excluding folder path, file path, process, extensions and etc. from its real time or schedule scan to execute their malicious code. This is a good indicator for a defense evasion and to look further for events after this behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\Exclusions\\\\*\" by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `windows_defender_exclusion_registry_entry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin or user may choose to use this windows features.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html", "https://app.any.run/tasks/cf1245de-06a7-4366-8209-8e3006f2bfe5/"], "tags": {"analytic_story": ["Remcos", "Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/defender_exclusion_sysmon/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "exclusion registry $registry_path$  modified or added on $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name", "Registry.registry_value_data"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_defender_exclusion_registry_entry_filter"}]}, {"name": "Disabling Firewall with Netsh", "id": "6860a62c-9203-11eb-9e05-acde48001122", "version": 2, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identifies suspicious firewall disabling using netsh application. this technique is commonly seen in malware that tries to communicate or download its component or other payload to its C2 server.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= \"*firewall*\" (Processes.process= \"*off*\" OR  Processes.process= \"*disable*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_firewall_with_netsh_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "admin may disable firewall during testing or fixing network problem.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.htm"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows Firewall was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=netsh.exe OR Processes.original_file_name=netsh.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_netsh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_firewall_with_netsh_filter"}]}, {"name": "Remote System Discovery with Net", "id": "9df16706-04a2-41e2-bbfe-9b38b34409d3", "version": 1, "date": "2021-08-30", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to discover remote systems. The argument `domain computers /domain` returns a list of all domain computers. Red Teams and adversaries alike use net.exe to identify remote systems for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"net.exe\" OR Processes.process_name=\"net1.exe\") (Processes.process=\"*domain computers*\" AND Processes.process=*/do*) OR (Processes.process=\"*view*\" AND Processes.process=*/do*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_system_discovery_with_net_filter"}]}, {"name": "PowerShell Domain Enumeration", "id": "e1866ce2-ca22-11eb-8e44-acde48001122", "version": 1, "date": "2021-06-10", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies specific PowerShell modules typically used to enumerate an organizations domain or users. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message IN (*get-netdomaintrust*, *get-netforesttrust*, *get-addomain*, *get-adgroupmember*, *get-domainuser*) | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_domain_enumeration_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "It is possible there will be false positives, filter as needed.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 70, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 60, "kill_chain_phases": ["Reconnaissance"], "message": "A suspicious powershell script contains domain enumeration command in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "ComputerName", "EventCode"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_domain_enumeration_filter"}]}, {"name": "Process Execution via WMI", "id": "24869767-8579-485d-9a4f-d9ddfd8f0cac", "version": 4, "date": "2020-03-16", "author": "Rico Valdez, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `WmiPrvSE.exe` spawning a process. This typically occurs when a process is instantiated from a local or remote process using `wmic.exe`. During triage, review parallel processes for suspicious behavior or commands executed. Review the process and command-line spawning from `wmiprvse.exe`. Contain and remediate the endpoint as necessary.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=WmiPrvSE.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_execution_via_wmi_filter` ", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Although unlikely, administrators may use wmi to execute commands for legitimate purposes.", "references": [], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5"], "confidence": 70, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A remote instance execution of wmic.exe that will spawn $parent_process_name$ in host $dest$", "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process_name", "Processes.user", "Processes.dest", "Processes.process_name"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "process_execution_via_wmi_filter"}]}, {"name": "Clear Unallocated Sector Using Cipher App", "id": "cd80a6ac-c9d9-11eb-8839-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect execution of `cipher.exe` to clear the unallocated sectors of a specific disk. This technique was seen in some ransomware to make it impossible to forensically recover deleted files.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"cipher.exe\" Processes.process = \"*/w:*\" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clear_unallocated_sector_using_cipher_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "administrator may execute this app to manage disk", "references": ["https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/", "https://www.sophos.com/en-us/medialibrary/PDFs/technical-papers/sophoslabs-ransomware-behavior-report.pdf"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Impact"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data1/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to clear the unallocated sectors of a specific disk.", "mitre_attack_id": ["T1070.004", "T1070"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["File Deletion", "Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Tropic Trooper", "Gamaredon Group", "Wizard Spider", "APT41", "Kimsuky", "Silence", "The White Company", "TEMP.Veles", "APT32", "APT38", "Patchwork", "Honeybee", "Cobalt Group", "Dragonfly 2.0", "menuPass", "FIN8", "OilRig", "FIN5", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "APT28", "Threat Group-3390", "Group5", "Lazarus Group", "APT18", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "clear_unallocated_sector_using_cipher_app_filter"}]}, {"name": "Hide User Account From Sign-In Screen", "id": "834ba832-ad89-11eb-937d-acde48001122", "version": 1, "date": "2021-05-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies a suspicious registry modification to hide a user account on the Windows Login screen. This technique was seen in some tradecraft where the adversary will create a hidden user account with Admin privileges in login screen to avoid noticing by the user that they already compromise and to persist on that said machine.", "search": "| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\SpecialAccounts\\\\Userlist*\" AND Registry.registry_value_data = \"0x00000000\" by Registry.dest Registry.user Registry.registry_value_data | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `hide_user_account_from_sign_in_screen_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as CarbonBlack or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "Unknown. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/hotkey_disabled_hidden_user/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "Suspicious registry modification ($registry_value_name$) which is used go hide a user account on the Windows Login screen detected on $dest$ executed by $user$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "registry_value_name", "type": "Other", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_name", "Registry.dest Registry.user"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "hide_user_account_from_sign_in_screen_filter"}]}, {"name": "NET Profiler UAC bypass", "id": "0252ca80-e30d-11eb-8aa3-acde48001122", "version": 1, "date": "2021-07-12", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect modification of registry to bypass UAC windows feature. This technique is to add a payload dll path on .NET COR file path that will be loaded by mmc.exe as soon it was executed. This detection rely on monitoring the registry key and values in the detection area. It may happened that windows update some dll related to mmc.exe and add dll path in this registry. In this case filtering is needed.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\Environment\\\\COR_PROFILER_PATH\" Registry.registry_value_name = \"*.dll\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `net_profiler_uac_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "limited false positive. It may trigger by some windows update that will modify this registry.", "references": ["https://offsec.almond.consulting/UAC-bypass-dotnet.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence,", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Incoming"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/uac_bypass/windows-sysmon2.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious modification of registry $registry_path$ with possible payload path $registry_value_name$ in $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "net_profiler_uac_bypass_filter"}]}, {"name": "GetDomainComputer with PowerShell", "id": "ed550c19-712e-43f6-bd19-6f58f61b3a5e", "version": 1, "date": "2021-09-07", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. `Get-DomainComputer` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-DomainComputer*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaincomputer_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use PowerView for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 24, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getdomaincomputer_with_powershell_filter"}]}, {"name": "User Discovery With Env Vars PowerShell Script Block", "id": "77f41d9e-b8be-47e3-ab35-5776f5ec1d20", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the use of PowerShell environment variables to identify the current logged user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*$env:UserName*\" OR Message = \"*[System.Environment]::UserName*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `user_discovery_with_env_vars_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Path", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "user_discovery_with_env_vars_powershell_script_block_filter"}]}, {"name": "Detect PsExec With accepteula Flag", "id": "b89919ed-fe5f-492c-b139-151xb162040e", "version": 4, "date": "2021-09-16", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for events where `PsExec.exe` is run with the `accepteula` flag in the command line. PsExec is a built-in Windows utility that enables you to execute processes on other systems. It is fully interactive for console applications. This tool is widely used for launching interactive command prompts on remote systems. Threat actors leverage this extensively for executing code on compromised systems. If an attacker is running PsExec for the first time, they will be prompted to accept the end-user license agreement (EULA), which can be passed as the argument `accepteula` within the command line.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_psexec` Processes.process=*accepteula* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)`| `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_psexec_with_accepteula_flag_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Administrators can leverage PsExec for accessing remote systems and might pass `accepteula` as an argument if they are running this tool for the first time. However, it is not likely that you'd see multiple occurrences of this event on a machine", "references": [], "tags": {"analytic_story": ["SamSam Ransomware", "DHS Report TA18-074A", "HAFNIUM Group", "DarkSide Ransomware", "Active Directory Lateral Movement"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.002/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ running the utility for possibly the first time.", "mitre_attack_id": ["T1021", "T1021.002"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "SMB/Windows Admin Shares"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT32", "Orangeworm", "FIN8", "APT3", "Lazarus Group", "Threat Group-1314", "Turla", "Deep Panda", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=psexec.exe OR Processes.process_name=psexec64.exe OR Processes.original_file_name=psexec.c)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_psexec"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_psexec_with_accepteula_flag_filter"}]}, {"name": "Disabling Task Manager", "id": "dac279bc-9202-11eb-b7fb-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identifies modification of registry to disable the task manager of windows operating system. this event or technique are commonly seen in malware such as RAT, Trojan, TrojanSpy or worm to prevent the user to terminate their process.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableTaskMgr\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_task_manager_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry", "https://blog.talosintelligence.com/2020/05/threat-roundup-0424-0501.html"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "The Windows Task Manager was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_task_manager_filter"}]}, {"name": "Change To Safe Mode With Network Config", "id": "81f1dce0-0f18-11ec-a5d7-acde48001122", "version": 1, "date": "2021-09-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious bcdedit commandline to configure the host to boot in safe mode with network config. This technique was seen in blackMatter ransomware where it force the compromised host to boot in safe mode to continue its encryption and bring back to normal boot using bcdedit deletevalue command. This TTP can be a good alert for host that booted from safe mode forcefully since it need to modify the boot configuration to bring it back to normal.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=\"*/set*\" Processes.process=\"*{current}*\"  Processes.process=\"*safeboot*\" Processes.process=\"*network*\" by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `change_to_safe_mode_with_network_config_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "unknown", "references": ["https://news.sophos.com/en-us/2021/08/09/blackmatter-ransomware-emerges-from-the-shadow-of-darkside/"], "tags": {"analytic_story": ["BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Impact"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1552.002/autoadminlogon/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "bcdedit process with commandline $process$ to force safemode boot the $dest$", "mitre_attack_id": ["T1490"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.dest", "Processes.user"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "change_to_safe_mode_with_network_config_filter"}]}, {"name": "Process Kill Base On File Path", "id": "5ffaa42c-acdb-11eb-9ad3-acde48001122", "version": 2, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of `wmic.exe` using `delete` to remove a executable path. This is typically ran via a batch file during beginning stages of an adversary setting up for mining on an endpoint.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_wmic` AND Processes.process=\"*process*\" AND Processes.process=\"*executablepath*\" AND Processes.process=\"*delete*\" by  Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_kill_base_on_file_path_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Unknown.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A process $process_name$ attempt to kill process by its file path using commandline $process$ in host $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "process_kill_base_on_file_path_filter"}]}, {"name": "Rundll32 Create Remote Thread To A Process", "id": "2dbeee3a-f067-11eb-96c0-acde48001122", "version": 1, "date": "2021-07-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies the suspicious Remote Thread execution of rundll32.exe process to cmd.exe process. This technique was seen in IcedID malware to execute its malicious code in normal process for defense evasion and to steal sensitive information the the compromised host. browser process.", "search": "`sysmon` EventCode=8 SourceImage = \"*\\\\rundll32.exe\" TargetImage = \"*.exe\" | stats count min(_time) as firstTime max(_time) as lastTime by SourceImage TargetImage TargetProcessId SourceProcessId StartAddress EventCode Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_create_remote_thread_to_a_process_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the SourceImage, TargetImage, and EventCode executions from your endpoints related to create remote thread or injecting codes. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.joesandbox.com/analysis/380662/0/html"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "rundl32 process $SourceImage$ create a remote thread to process $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1055"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "SourceImage", "TargetImage", "TargetProcessId", "SourceProcessId", "StartAddress", "EventCode", "Computer"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_create_remote_thread_to_a_process_filter"}]}, {"name": "Disabling Remote User Account Control", "id": "bbc644bc-37df-4e1a-9c88-ec9a53e2038c", "version": 4, "date": "2020-11-18", "author": "David Dorsey, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "The search looks for modifications to registry keys that control the enforcement of Windows User Account Control (UAC).", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=*HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLUA* Registry.registry_value_data=\"0x00000000\" by Registry.dest, Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action | `drop_dm_object_name(Registry)` | `disabling_remote_user_account_control_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or via other endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report registry modifications.", "known_false_positives": "This registry key may be modified via administrators to implement a change in system policy. This type of change should be a very rare occurrence.", "references": [], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Suspicious Windows Registry Activities", "Remcos"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "The Windows registry keys that control the enforcement of Windows User Account Control (UAC) were modified on $dest$ by $user$.", "mitre_attack_id": ["T1548.002", "T1548"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_value_name", "Registry.dest", "Registry.registry_key_name", "Registry.user", "Registry.action"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_remote_user_account_control_filter"}]}, {"name": "Suspicious Scheduled Task from Public Directory", "id": "7feb7972-7ac3-11eb-bac8-acde48001122", "version": 1, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following detection identifies Scheduled Tasks registering (creating a new task) a binary or script to run from a public directory which includes users\\public, \\programdata\\ and \\windows\\temp. Upon triage, review the binary or script in the command line for legitimacy, whether an approved binary/script or not. In addition, capture the binary or script in question and analyze for further behaviors. Identify the source and contain the endpoint.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process=*\\\\users\\\\public\\\\* OR Processes.process=*\\\\programdata\\\\* OR Processes.process=*windows\\\\temp*)  Processes.process=*/create* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `suspicious_scheduled_task_from_public_directory_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited false positives may be present. Filter as needed by parent process or command line argument.", "references": ["https://attack.mitre.org/techniques/T1053/005/"], "tags": {"analytic_story": ["Ransomware", "Ryuk Ransomware", "Windows Persistence Techniques"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/schtasks/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "Suspicious scheduled task registered on $dest$", "mitre_attack_id": ["T1053.005", "T1053"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task", "Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_scheduled_task_from_public_directory_filter"}]}, {"name": "Attempted Credential Dump From Registry via Reg exe", "id": "14038953-e5f2-4daf-acff-5452062baf03", "version": 2, "date": "2021-11-29", "author": "Jose Hernandez, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies the use of `reg.exe` attempting to export Windows registry keys that contain hashed credentials. Adversaries will utilize this technique to capture and perform offline password cracking.", "search": " | from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where process_name=\"cmd.exe\" OR process_name=\"reg.exe\" | where cmd_line != null  AND match_regex(cmd_line, /(?i)save\\s+/)=true AND ( match_regex(cmd_line, /(?i)HKLM\\\\Security/)=true OR match_regex(cmd_line, /(?i)HKLM\\\\SAM/)=true OR match_regex(cmd_line, /(?i)HKLM\\\\System/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\\\Security/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\\\SAM/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\\\System/)=true ) | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name]) | into write_ssa_detected_events(); ", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "None identified.", "references": ["https://github.com/splunk/security_content/blob/55a17c65f9f56c2220000b62701765422b46125d/detections/attempted_credential_dump_from_registry_via_reg_exe.yml", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.002/T1003.002.md#atomic-test-1---registry-dump-of-sam-creds-and-secrets"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 90, "context": ["Source:AD", "Source:Endpoint", "Stage:Credential Access"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "An attempt to save registry keys storing credentials has been performed on $dest_device_id$ by $dest_user_id$ via process $process_name$.", "mitre_attack_id": ["T1003", "T1003.002"], "nist": ["DE.CM"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process_name", "_time", "dest_device_id", "dest_user_id", "process", "cmd_line"], "risk_score": 63, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["OS Credential Dumping", "Security Account Manager"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom", "Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempted_credential_dump_from_registry_via_reg_exe_filter"}]}, {"name": "Uninstall App Using MsiExec", "id": "1fca2b28-f922-11eb-b2dd-acde48001122", "version": 1, "date": "2021-08-09", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious un-installation of application using msiexec. This technique was seen in conti leak tool and script where it tries to uninstall AV product using this commandline. This commandline to uninstall product is not a common practice in enterprise network.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=msiexec.exe Processes.process= \"* /qn *\" Processes.process= \"*/X*\" Processes.process= \"*REBOOT=*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uninstall_app_using_msiexec_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown.", "references": ["https://threadreaderapp.com/thread/1423361119926816776.html"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/conti/conti_leak/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "process $process_name$ with a cmdline $process$ in host $dest$", "mitre_attack_id": ["T1218.007", "T1218"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.parent_process_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Msiexec", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["TA505", "Rancor", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "uninstall_app_using_msiexec_filter"}]}, {"name": "Rundll32 CreateRemoteThread In Browser", "id": "f8a22586-ee2d-11eb-a193-acde48001122", "version": 1, "date": "2021-07-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies the suspicious Remote Thread execution of rundll32.exe process to \"firefox.exe\" and \"chrome.exe\" browser. This technique was seen in IcedID malware where it hooks the browser to parse banking information as user used the targetted browser process.", "search": "`sysmon` EventCode=8 SourceImage = \"*\\\\rundll32.exe\" TargetImage IN (\"*\\\\firefox.exe\", \"*\\\\chrome.exe\", \"*\\\\iexplore.exe\",\"*\\\\microsoftedgecp.exe\") | stats count min(_time) as firstTime max(_time) as lastTime by SourceImage TargetImage TargetProcessId SourceProcessId StartAddress EventCode Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_createremotethread_in_browser_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the SourceImage, TargetImage, and EventCode executions from your endpoints related to create remote thread or injecting codes. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.joesandbox.com/analysis/380662/0/html"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "rundl32 process $SourceImage$ create a remote thread to browser process $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1055"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "SourceImage", "TargetImage", "TargetProcessId", "SourceProcessId", "StartAddress", "EventCode", "Computer"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_createremotethread_in_browser_filter"}]}, {"name": "Excessive Usage Of SC Service Utility", "id": "cb6b339e-d4c6-11eb-a026-acde48001122", "version": 1, "date": "2021-06-24", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious excessive usage of sc.exe in a host machine. This technique was seen in several ransomware , xmrig and other malware to create, modify, delete or disable a service may related to security application or to gain privilege escalation.", "search": "`sysmon` EventCode = 1 process_name = \"sc.exe\" |  bucket _time span=15m | stats values(process) as process count as numScExe by Computer, _time |  eventstats avg(numScExe) as avgScExe, stdev(numScExe) as stdScExe, count as numSlots by Computer |  eval upperThreshold=(avgScExe + stdScExe *3) |  eval isOutlier=if(avgScExe > 5 and avgScExe >= upperThreshold, 1, 0) |  search isOutlier=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_sc_service_utility_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed taskkill.exe may be used.", "known_false_positives": "excessive execution of sc.exe is quite suspicious since it can modify or execute app in high privilege permission.", "references": ["https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1569", "T1569.002"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "process_name", "process"], "security_domain": "endpoint", "mitre_attack_technique": ["System Services", "Service Execution"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT41", "Silence", "FIN6", "APT32", "Honeybee", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_usage_of_sc_service_utility_filter"}]}, {"name": "Services Escalate Exe", "id": "c448488c-b7ec-11eb-8253-acde48001122", "version": 1, "date": "2021-05-18", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of `svc-exe` with Cobalt Strike. The behavior typically follows after an adversary has already gained initial access and is escalating privileges. Using `svc-exe`, a randomly named binary will be downloaded from the remote Teamserver and placed on disk within `C:\\Windows\\400619a.exe`. Following, the binary will be added to the registry under key `HKLM\\System\\CurrentControlSet\\Services\\400619a\\` with multiple keys and values added to look like a legitimate service. Upon loading, `services.exe` will spawn the randomly named binary from `\\\\127.0.0.1\\ADMIN$\\400619a.exe`. The process lineage is completed with `400619a.exe` spawning rundll32.exe, which is the default `spawnto_` value for Cobalt Strike. The `spawnto_` value is arbitrary and may be any process on disk (typically system32/syswow64 binary). The `spawnto_` process will also contain a network connection. During triage, review parallel procesess and identify any additional file modifications.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=services.exe Processes.process_path=*admin$* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `services_escalate_exe_filter`", "how_to_implement": "To successfully implement this search, you will need to ensure that DNS data is populating the Network_Resolution data model.", "known_false_positives": "False positives should be limited as `services.exe` should never spawn a process from `ADMIN$`. Filter as needed.", "references": ["https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/", "https://attack.mitre.org/techniques/T1548/", "https://www.cobaltstrike.com/help-beacon"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 95, "context": ["source:endpoint", {"stage": "Privilege Escalation"}, "Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "A service process $parent_process_name$ with process path $process_path$ in host $dest$", "mitre_attack_id": ["T1548"], "observable": [{"name": "Processes.dest", "type": "Hostname", "role": ["Victim"]}, {"name": "Processes.user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 76, "security_domain": "endpoint", "mitre_attack_technique": ["Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "services_escalate_exe_filter"}]}, {"name": "GetWmiObject Ds Group with PowerShell", "id": "df275a44-4527-443b-b884-7600e066e3eb", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. The `Get-WmiObject` commandlet combined with the `-class ds_group` parameter can be used to return the full list of groups in a Windows domain. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-WmiObject* AND Processes.process=\"*namespace root\\\\directory\\\\ldap*\" AND Processes.process=\"*class ds_group*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_group_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_group_with_powershell_filter"}]}, {"name": "Firewall Allowed Program Enable", "id": "9a8f63a8-43ac-11ec-904c-acde48001122", "version": 1, "date": "2021-11-12", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic detects a potential suspicious modification of firewall rule allowing to execute specific application. This technique was identified when an adversary and red teams to bypassed firewall file execution restriction in a targetted host. Take note that this event or command can run by administrator during testing or allowing legitimate tool or application.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = \"*firewall*\" Processes.process = \"*allowedprogram*\" Processes.process = \"*add*\" Processes.process = \"*ENABLE*\" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `firewall_allowed_program_enable_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "A network operator or systems administrator may utilize an automated or manual execution of this firewall rule that may generate false positives. Filter as needed.", "references": ["https://app.any.run/tasks/ad4c3cda-41f2-4401-8dba-56cc2d245488/#"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/vilsel/sysmon.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "firewall allowed program commandline $process$ of $process_name$ on $dest$ by $user$", "mitre_attack_id": ["T1562.004", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify System Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Rocke", "Lazarus Group", "Kimsuky", "Dragonfly 2.0", "Carbanak", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "firewall_allowed_program_enable_filter"}]}, {"name": "Disable Schedule Task", "id": "db596056-3019-11ec-a9ff-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious commandline to disable existing schedule task. This technique is used by adversaries or commodity malware like IceID to disable security application (AV products) in the targetted host to evade detections. This TTP is a good pivot to check further why and what other process run before and after this detection. check which process execute the commandline and what task is disabled. parent child process is quite valuable in this scenario too.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe Processes.process=*/change*  Processes.process=*/disable* by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disable_schedule_task_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin may disable problematic schedule task", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_schtask/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "schtask process with commandline $process$ to disable schedule task in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.user", "Processes.process_name", "Processes.parent_process_name", "Processes.dest"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_schedule_task_filter"}]}, {"name": "Interactive Session on Remote Endpoint with PowerShell", "id": "a4e8f3a4-48b2-11ec-bcfc-3e22fbd008af", "version": 1, "date": "2021-11-18", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the usage of the `Enter-PSSession`. This commandlet can be used to open an interactive session on a remote endpoint leveraging the WinRM protocol. Red Teams and adversaries alike may abuse WinRM and `Enter-PSSession` for lateral movement and remote code execution.", "search": "powershell` EventCode=4104 (Message=\"*Enter-PSSession*\" AND Message=\"*-ComputerName*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `interactive_session_on_remote_endpoint_with_powershell_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup instructions can be found https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators may leverage WinRM and `Enter-PSSession` for administrative and troubleshooting tasks. This activity is usually limited to a small set of hosts or users. In certain environments, tuning may not be possible.", "references": ["https://attack.mitre.org/techniques/T1021/006/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enter-pssession?view=powershell-7.2"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.006/lateral_movement_pssession/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "An interactive session was opened on a remote endpoint from $ComputerName", "mitre_attack_id": ["T1021", "T1021.006"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Windows Remote Management"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "Threat Group-3390"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "interactive_session_on_remote_endpoint_with_powershell_filter"}]}, {"name": "Schtasks Run Task On Demand", "id": "bb37061e-af1f-11eb-a159-acde48001122", "version": 1, "date": "2021-05-07", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies an on demand run of a Windows Schedule Task through shell or command-line. This technique has been used by adversaries that force to run their created Schedule Task as their persistence mechanism or for lateral movement as part of their malicious attack to the compromised machine.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_name = \"schtasks.exe\" Processes.process = \"*/run*\" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_run_task_on_demand_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed schtasks.exe may be used.", "known_false_positives": "Administrators may use to debug Schedule Task entries. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Execution"}, "Persistence", "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "A \"on demand\" execution of schedule task process $process_name$  using commandline $process$ in host $dest$", "mitre_attack_id": ["T1053"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_id", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 48, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schtasks_run_task_on_demand_filter"}]}, {"name": "Detect Excessive Account Lockouts From Endpoint", "id": "c026e3dd-7e18-4abb-8f41-929e836efe74", "version": 5, "date": "2020-11-09", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search identifies endpoints that have caused a relatively high number of account lockouts in a short period.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(All_Changes.user) as user from datamodel=Change.All_Changes where nodename=All_Changes.Account_Management All_Changes.result=\"lockout\" by All_Changes.dest All_Changes.result |`drop_dm_object_name(\"All_Changes\")` |`drop_dm_object_name(\"Account_Management\")`| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search count > 5 | `detect_excessive_account_lockouts_from_endpoint_filter`", "how_to_implement": "You must ingest your Windows security event logs in the `Change` datamodel under the nodename is `Account_Management`, for this search to execute successfully. Please consider updating the cron schedule and the count of lockouts you want to monitor, according to your environment. \\\n **Splunk>Phantom Playbook Integration**\\\nIf Splunk>Phantom is also configured in your environment, a Playbook called \"Excessive Account Lockouts Enrichment and Response\" can be configured to run when any results are found by this detection search. The Playbook executes the Contextual and Investigative searches in this Story, conducts additional information gathering on Windows endpoints, and takes a response action to shut down the affected endpoint. To use this integration, install the Phantom App for Splunk `https://splunkbase.splunk.com/app/3411/`, add the correct hostname to the \"Phantom Instance\" field in the Adaptive Response Actions when configuring this detection search, and set the corresponding Playbook to active. \\\n(Playbook Link:`https://my.phantom.us/4.1/playbook/excessive-account-lockouts-enrichment-and-response/`).\\\n", "known_false_positives": "It's possible that a widely used system, such as a kiosk, could cause a large number of account lockouts.", "references": [], "tags": {"analytic_story": ["Account Monitoring and Controls"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078.002/account_lockout/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078.002/account_lockout/windows-system.log"], "impact": 60, "message": "Multiple accounts have been locked out. Review $dest$ and results related to $user$.", "mitre_attack_id": ["T1078", "T1078.002"], "nist": ["PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.user", "nodename", "All_Changes.result", "All_Changes.dest"], "risk_score": 36, "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Domain Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "TA505", "APT3", "Threat Group-1314"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_excessive_account_lockouts_from_endpoint_filter"}]}, {"name": "Domain Controller Discovery with Nltest", "id": "41243735-89a7-4c83-bcdd-570aa78f00a1", "version": 1, "date": "2021-08-30", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `nltest.exe` with command-line arguments utilized to discover remote systems. The arguments `/dclist:` and '/dsgetdc:', can be used to return a list of all domain controllers. Red Teams and adversaries alike may use nltest.exe to identify domain controllers in a Windows Domain for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"nltest.exe\") (Processes.process=\"*/dclist:*\" OR Processes.process=\"*/dsgetdc:*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_controller_discovery_with_nltest_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain controller discovery on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_controller_discovery_with_nltest_filter"}]}, {"name": "Loading Of Dynwrapx Module", "id": "eac5e8ba-4857-11ec-9371-acde48001122", "version": 1, "date": "2021-11-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "DynamicWrapperX is an ActiveX component that can be used in a script to call Windows API functions, but it requires the dynwrapx.dll to be installed and registered. With that, registering or loading dynwrapx.dll to a host highly suspect. Why is it needed? In most malicious instances, During triage, review parallel processes and pivot on the process_guid. Review the registry for any suspicious modifications meant to load dynwrapx.dll. Identify any suspicious module loads of dynwrapx.dll. This will identify the process that will invoke vbs/wscript/cscript.", "search": "`sysmon` EventCode=7 (ImageLoaded = \"*\\\\dynwrapx.dll\" OR OriginalFileName = \"dynwrapx.dll\" OR  Product = \"DynamicWrapperX\") | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded OriginalFileName Product process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `loading_of_dynwrapx_module_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Filesystem` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, however it is possible to filter by Processes.process_name and specific processes (ex. wscript.exe). Filter as needed. This may need modification based on EDR telemetry and how it brings in registry data. For example, removal of (Default).", "references": ["https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/", "https://www.script-coding.com/dynwrapx_eng.html", "https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/", "https://tria.ge/210929-ap75vsddan", "https://www.virustotal.com/gui/file/cb77b93150cb0f7fe65ce8a7e2a5781e727419451355a7736db84109fa215a89"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_dynwrapx/sysmon_dynwraper.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "dynwrapx.dll loaded by process $process_name$ on $Computer$", "mitre_attack_id": ["T1055", "T1055.001"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "ImageLoaded", "OriginalFileName", "Product", "process_name", "Computer", "EventCode", "Signed", "ProcessId"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection", "Dynamic-link Library Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation", "Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM", "TA505", "Turla", "Tropic Trooper", "Lazarus Group", "Putter Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "loading_of_dynwrapx_module_filter"}]}, {"name": "Rundll32 Shimcache Flush", "id": "a913718a-25b6-11ec-96d3-acde48001122", "version": 1, "date": "2021-10-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious rundll32 commandline to clear shim cache. This technique is a anti-forensic technique to clear the cache taht are one important artifacts in terms of digital forensic during attacks or incident. This TTP is a good indicator that someone tries to evade some tools and clear foothold on the machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  `process_rundll32` AND Processes.process = \"*apphelp.dll,ShimFlushCache*\" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_shimcache_flush_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://blueteamops.medium.com/shimcache-flush-89daff28d15e"], "tags": {"analytic_story": ["Unusual Processes"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1112/shimcache_flush/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "rundll32 process execute $process$ to clear shim cache in $dest$", "mitre_attack_id": ["T1112"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_shimcache_flush_filter"}]}, {"name": "Create Remote Thread In Shell Application", "id": "10399c1e-f51e-11eb-b920-acde48001122", "version": 1, "date": "2021-08-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect suspicious process injection in command shell. This technique was seen in IcedID where it execute cmd.exe process to inject its shellcode as part of its execution as banking trojan. It is really uncommon to have a create remote thread execution in the following application.", "search": "`sysmon` EventCode=8 TargetImage IN (\"*\\\\cmd.exe\", \"*\\\\powershell*\") | stats count min(_time) as firstTime max(_time) as lastTime by  TargetImage TargetProcessId SourceProcessId  EventCode StartAddress SourceImage Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `create_remote_thread_in_shell_application_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2021/07/19/icedid-and-cobalt-strike-vs-antivirus/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/simulated_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "process $SourceImage$ create a remote thread to shell app process $TargetImage$ in host $Computer$", "mitre_attack_id": ["T1055"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "SourceImage", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "SourceImage", "TargetImage", "TargetProcessId", "SourceProcessId", "StartAddress", "EventCode", "Computer"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "create_remote_thread_in_shell_application_filter"}]}, {"name": "Wget Download and Bash Execution", "id": "35682718-5a85-11ec-b8f7-acde48001122", "version": 1, "date": "2021-12-11", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of wget on Linux or MacOS attempting to download a file from a remote source and pipe it to bash. This is typically found with coinminers and most recently with CVE-2021-44228, a vulnerability in Log4j.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wget (Processes.process=\"*-q *\" OR Processes.process=\"*--quiet*\"  AND Processes.process=\"*-O- *\") OR (Processes.process=\"*|*\" AND Processes.process=\"*bash*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wget_download_and_bash_execution_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon for Linux, you will need to ensure mapping is occurring correctly. If the EDR is not parsing the pipe bash in the command-line, modifying the analytic will be required. Add parent process name (Processes.parent_process_name) as needed to filter.", "known_false_positives": "False positives should be limited, however filtering may be required.", "references": ["https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java", "https://www.lunasec.io/docs/blog/log4j-zero-day/", "https://gist.github.com/nathanqthai/01808c569903f41a52e7e7b575caa890"], "tags": {"analytic_story": ["Ingress Tool Transfer", "Log4Shell CVE-2021-44228"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/linux-sysmon_curlwget.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $process_name$ was identified on endpoint $dest$ attempting to download a remote file and run it with bash.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wget_download_and_bash_execution_filter"}]}, {"name": "File with Samsam Extension", "id": "02c6cfc2-ae66-4735-bfc7-6291da834cbf", "version": 1, "date": "2018-12-14", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks for file writes with extensions consistent with a SamSam ransomware attack.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`| rex field=file_name \"(?<file_extension>\\.[^\\.]+)$\" | search file_extension=.stubbin OR file_extension=.berkshire OR file_extension=.satoshi OR file_extension=.sophos OR file_extension=.keyxml | `file_with_samsam_extension_filter`", "how_to_implement": "You must be ingesting data that records file-system activity from your hosts to populate the Endpoint file-system data-model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "Because these extensions are not typically used in normal operations, you should investigate all results.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036.003/samsam_extension/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Installation"], "message": "File writes $file_name$ with extensions consistent with a SamSam ransomware attack seen on $dest$", "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Other", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.user", "Filesystem.dest", "Filesystem.file_path", "Filesystem.file_name"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "file_with_samsam_extension_filter"}]}, {"name": "Sdelete Application Execution", "id": "fcc52b9a-4616-11ec-8454-acde48001122", "version": 1, "date": "2021-11-15", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "This analytic will detect the execution of sdelete.exe attempting to delete potentially important files that may related to adversary or insider threats to destroy evidence or information sabotage. Sdelete is a SysInternals utility meant to securely delete files on disk. This tool is commonly used to clear tracks and artifact on the targeted host.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event,\"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), parent_cmd_line=ucast(map_get(input_event, \"parent_process\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND like(process_name, \"%sdelete%\") AND (like (cmd_line, \"%-c %\") OR like (cmd_line, \"%-f %\")OR like (cmd_line, \"%-p %\") OR like (cmd_line, \"%-r %\") OR like (cmd_line, \"%-q %\") OR like (cmd_line, \"%-s %\") OR like (cmd_line, \"%-z %\") OR like (cmd_line, \"%/accepteula%\") OR like (cmd_line, \"%-nobanner%\")OR like (cmd_line, \"%.doc%\")OR like (cmd_line, \"%.xls%\") OR like (cmd_line, \"%.ppt%\")OR like (cmd_line, \"%.rtf%\") OR like (cmd_line, \"%.pdf%\") OR like (cmd_line, \"%.key%\")OR like (cmd_line, \"%.log%\") OR like (cmd_line, \"%.txt%\") OR like (cmd_line, \"%.jpg%\") OR like (cmd_line, \"%.png%\") OR like (cmd_line, \"%.gif%\") OR like (cmd_line, \"%.bmp%\") OR like (cmd_line, \"%.7z%\")  OR like (cmd_line, \"%.zip%\") OR like (cmd_line, \"%.rar%\") OR like (cmd_line, \"%.tar%\") OR like (cmd_line, \"%.gz%\") OR like (cmd_line, \"%.xls%\")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"process_path\", process_path, \"parent_process_name\", parent_process_name, \"parent_cmd_line\", parent_cmd_line]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1485/T1485.md"], "tags": {"analytic_story": ["Information Sabotage"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1485/sdelete/security.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "Sdelete process $process_name$ executed on $dest_device_id$ attempting to permanently delete files by $dest_user_id$.", "mitre_attack_id": ["T1485", "T1070.004", "T1070"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest", "user", "parent_process_name", "parent_process", "process_name", "process", "process_id", "process_path", "cmd_line"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction", "File Deletion", "Indicator Removal on Host"], "mitre_attack_tactics": ["Impact", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38", "Sandworm Team", "Rocke", "Tropic Trooper", "Gamaredon Group", "Wizard Spider", "APT41", "Kimsuky", "Silence", "The White Company", "TEMP.Veles", "APT32", "APT38", "Patchwork", "Honeybee", "Cobalt Group", "Dragonfly 2.0", "menuPass", "FIN8", "OilRig", "FIN5", "BRONZE BUTLER", "Magic Hound", "APT3", "FIN10", "APT28", "Threat Group-3390", "Group5", "Lazarus Group", "APT18", "APT29", "no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sdelete_application_execution_filter"}]}, {"name": "Network Discovery Using Route Windows App", "id": "dd83407e-439f-11ec-ab8e-acde48001122", "version": 1, "date": "2021-11-12", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic look for a spawned process of route.exe windows application. Adversaries and red teams alike abuse this application the recon or do a network discovery on a target host. but one possible false positive might be an automated tool used by a system administator or a powershell script in amazon ec2 config services.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_route` by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_discovery_using_route_windows_app_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "A network operator or systems administrator may utilize an automated host discovery application that may generate false positives or an amazon ec2 script that uses this application. Filter as needed.", "references": ["https://app.any.run/tasks/ad4c3cda-41f2-4401-8dba-56cc2d245488/#"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/vilsel/sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1016", "T1016.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Configuration Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Tropic Trooper", "Frankenstein", "APT41", "Soft Cell", "APT32", "Darkhotel", "MuddyWater", "APT1", "APT19", "Dragonfly 2.0", "Magic Hound", "OilRig", "menuPass", "Threat Group-3390", "Stealth Falcon", "Lazarus Group", "APT3", "Naikon", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "(Processes.process_name=route.exe OR Processes.original_file_name=route.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_route"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "network_discovery_using_route_windows_app_filter"}]}, {"name": "Enable WDigest UseLogonCredential Registry", "id": "0c7d8ffe-25b1-11ec-9f39-acde48001122", "version": 1, "date": "2021-10-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious registry modification to enable plain text credential feature of windows. This technique was used by several malware and also by mimikatz to be able to dumpe the a plain text credential to the compromised or target host. This TTP is really a good indicator that someone wants to dump the crendential of the host so it must be a good pivot for credential dumping techniques.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=\"*\\\\System\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest\\\\*\" Registry.registry_value_name = \"UseLogonCredential\" Registry.registry_value_data = 0x00000001 by Registry.dest Registry.user Registry.registry_value_name Registry.registry_key_name Registry.registry_path Registry.registry_value_data | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `enable_wdigest_uselogoncredential_registry_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://www.csoonline.com/article/3438824/how-to-detect-and-halt-credential-theft-via-windows-wdigest.html"], "tags": {"analytic_story": ["Credential Dumping"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003/wdigest_enable/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "wdigest registry $registry_path$ was modified in $dest$", "mitre_attack_id": ["T1112", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry", "OS Credential Dumping"], "mitre_attack_tactics": ["Defense Evasion", "Credential Access"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "enable_wdigest_uselogoncredential_registry_filter"}]}, {"name": "Excessive Service Stop Attempt", "id": "ae8d3f4a-acd7-11eb-8846-acde48001122", "version": 2, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic identifies suspicious series of attempt to kill multiple services on a system using either `net.exe` or `sc.exe`. This technique is use by adversaries to terminate security services or other related services to continue there objective and evade detections.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_net` OR  Processes.process_name = \"sc.exe\" OR  Processes.process_name = \"net1.exe\" AND Processes.process=\"*stop*\" OR Processes.process=\"*delete*\" by Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest Processes.user _time span=1m | where count >=5 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_service_stop_attempt_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An excessive amount of $process_name$ was executed on $dest$ attempting to disable services.", "mitre_attack_id": ["T1489"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Lazarus Group"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_service_stop_attempt_filter"}]}, {"name": "Msmpeng Application DLL Side Loading", "id": "8bb3f280-dd9b-11eb-84d5-acde48001122", "version": 1, "date": "2021-07-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious creation of msmpeng.exe or mpsvc.dll in non default windows defender folder. This technique was seen couple days ago with revil ransomware in Kaseya Supply chain. The approach is to drop an old version of msmpeng.exe to load the actual payload name as mspvc.dll which will load the revil ransomware to the compromise machine", "search": "|tstats `security_content_summariesonly` values(Filesystem.file_path) as file_path count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where (Filesystem.file_name = \"msmpeng.exe\" OR Filesystem.file_name = \"mpsvc.dll\")  AND Filesystem.file_path != \"*\\\\Program Files\\\\windows defender\\\\*\" by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `msmpeng_application_dll_side_loading_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the Filesystem responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesystem` node.", "known_false_positives": "quite minimal false positive expected.", "references": ["https://community.sophos.com/b/security-blog/posts/active-ransomware-attack-on-kaseya-customers"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets//malware/revil/msmpeng_side/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1574.002", "T1574"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_create_time", "Filesystem.process_id", "Filesystem.file_name", "Filesystem.user", "Filesystem.file_path"], "security_domain": "endpoint", "mitre_attack_technique": ["DLL Side-Loading", "Hijack Execution Flow"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Defense Evasion", "Persistence", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["BRONZE BUTLER", "Naikon", "APT41", "Soft Cell", "Tropic Trooper", "Patchwork", "APT19", "APT32", "APT3", "menuPass", "Threat Group-3390", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "msmpeng_application_dll_side_loading_filter"}]}, {"name": "Svchost LOLBAS Execution Process Spawn", "id": "09e5c72a-4c0d-11ec-aa29-3e22fbd008af", "version": 1, "date": "2021-11-22", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies `svchost.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Task Scheduler and creating a malicious remote scheduled task, the executed command is spawned as a child process of `svchost.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of svchost.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=svchost.exe) (Processes.process_name IN (\"Regsvcs.exe\", \"Ftp.exe\", \"OfflineScannerShell.exe\", \"Rasautou.exe\", \"Schtasks.exe\", \"Xwizard.exe\", \"Pnputil.exe\", \"Atbroker.exe\", \"Pcwrun.exe\", \"Ttdinject.exe\",\"Mshta.exe\", \"Bitsadmin.exe\", \"Certoc.exe\", \"Ieexec.exe\", \"Microsoft.Workflow.Compiler.exe\", \"Runscripthelper.exe\", \"Forfiles.exe\", \"Msbuild.exe\", \"Register-cimprovider.exe\", \"Tttracer.exe\", \"Ie4uinit.exe\", \"Bash.exe\", \"Hh.exe\", \"SettingSyncHost.exe\", \"Cmstp.exe\", \"Stordiag.exe\", \"Scriptrunner.exe\", \"Odbcconf.exe\", \"Extexport.exe\", \"Msdt.exe\", \"WorkFolders.exe\", \"Diskshadow.exe\", \"Mavinject.exe\", \"Regasm.exe\", \"Gpscript.exe\", \"Regsvr32.exe\", \"Msiexec.exe\", \"Wuauclt.exe\", \"Presentationhost.exe\", \"Wmic.exe\", \"Runonce.exe\", \"Syncappvpublishingserver.exe\", \"Verclsid.exe\", \"Infdefaultinstall.exe\", \"Installutil.exe\", \"Netsh.exe\", \"Wab.exe\", \"Dnscmd.exe\", \"At.exe\", \"Pcalua.exe\", \"Msconfig.exe\")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `svchost_lolbas_execution_process_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may trigger this behavior, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1053/005/", "https://www.ired.team/offensive-security/persistence/t1053-schtask", "https://lolbas-project.github.io/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1053.005/lateral_movement_lolbas/windows-security.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "Svchost.exe spawned a LOLBAS process on $dest", "mitre_attack_id": ["T1053", "T1053.005"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job", "Scheduled Task"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "svchost_lolbas_execution_process_spawn_filter"}]}, {"name": "Get ADUser with PowerShell Script Block", "id": "21432e40-04f4-11ec-b7e6-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGUser` commandlet. The `Get-AdUser` commandlet is used to return a list of all domain users. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message = \"*get-aduser*\" Message = \"*-filter*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduser_with_powershell_script_block_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://www.blackhillsinfosec.com/red-blue-purple/", "https://attack.mitre.org/techniques/T1087/002/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ for user enumeration", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_aduser_with_powershell_script_block_filter"}]}, {"name": "Domain Group Discovery With Net", "id": "f2f14ac7-fa81-471a-80d5-7eb65c3c7349", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `net.exe` with command-line arguments utilized to query for domain groups. The argument `group /domain`, returns a list of all domain groups. Red Teams and adversaries alike use net.exe to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"net.exe\" OR Processes.process_name=\"net1.exe\") (Processes.process=*group* AND Processes.process=*/do*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_net_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_group_discovery_with_net_filter"}]}, {"name": "Suspicious wevtutil Usage", "id": "2827c0fd-e1be-4868-ae25-59d28e0f9d4f", "version": 4, "date": "2021-10-11", "author": "David Dorsey, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The wevtutil.exe application is the windows event log utility. This searches for wevtutil.exe with parameters for clearing the application, security, setup, trace or system event logs.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wevtutil.exe Processes.process IN (\"* cl *\", \"*clear-log*\") (Processes.process=\"*System*\" OR Processes.process=\"*Security*\" OR Processes.process=\"*Setup*\" OR Processes.process=\"*Application*\" OR Processes.process=\"*trace*\") by Processes.process_name Processes.parent_process_name Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `suspicious_wevtutil_usage_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "The wevtutil.exe application is a legitimate Windows event log utility. Administrators may use it to manage Windows event logs.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1070.001/T1070.001.md"], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware", "Clop Ransomware"], "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 6"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/atomic_red_team/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Actions on Objectives"], "message": "Wevtutil.exe being used to clear Event Logs on $dest$ by $user$", "mitre_attack_id": ["T1070.001", "T1070"], "nist": ["DE.DP", "PR.IP", "PR.PT", "PR.AC", "PR.AT", "DE.AE"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 28, "security_domain": "endpoint", "mitre_attack_technique": ["Clear Windows Event Logs", "Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_wevtutil_usage_filter"}]}, {"name": "Remote Process Instantiation via WMI and PowerShell", "id": "112638b4-4634-11ec-b9ab-3e22fbd008af", "version": 1, "date": "2021-11-15", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` leveraging the `Invoke-WmiMethod` commandlet complemented with arguments utilized to start a process on a remote endpoint by abusing WMI. Red Teams and adversaries alike may abuse WMI and `powershell.exe` for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=\"*Invoke-WmiMethod*\" AND Processes.process=\"*-CN*\" AND Processes.process=\"*-Class Win32_Process*\" AND  Processes.process=\"*-Name create*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_wmi_and_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may leverage WWMI and powershell.exe to start a process on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://attack.mitre.org/techniques/T1047/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/invoke-wmimethod?view=powershell-5.1"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $dest by abusing WMI using PowerShell.exe", "mitre_attack_id": ["T1047"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_wmi_and_powershell_filter"}]}, {"name": "Trickbot Named Pipe", "id": "1804b0a4-a682-11eb-8f68-acde48001122", "version": 1, "date": "2021-04-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect potential trickbot infection through the create/connected named pipe to the system. This technique is used by trickbot to communicate to its c2 to post or get command during infection.", "search": "`sysmon` EventCode IN (17,18) PipeName=\"\\\\pipe\\\\*lacesomepipe\" | stats  min(_time) as firstTime max(_time) as lastTime count by Computer user_id EventCode PipeName signature Image process_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `trickbot_named_pipe_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and pipename from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. .", "known_false_positives": "unknown", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/namedpipe/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible Trickbot namedpipe created on $Computer$ by $Image$", "mitre_attack_id": ["T1055"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "Image", "type": "Process", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Computer", "user_id", "EventCode", "PipeName", "signature", "Image", "process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "trickbot_named_pipe_filter"}]}, {"name": "Spoolsv Spawning Rundll32", "id": "15d905f6-da6b-11eb-ab82-acde48001122", "version": 2, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies a suspicious child process, `rundll32.exe`, with no command-line arguments being spawned from `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to spawn a process. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=spoolsv.exe `process_rundll32` by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_spawning_rundll32_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives have been identified. There are limited instances where `rundll32.exe` may be spawned by a legitimate print driver.", "references": ["https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Local"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "$parent_process$ has spawned $process_name$ on endpoint $ComputerName$. This behavior is suspicious and related to PrintNightmare.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process_id", "type": "Process", "role": ["Parent Process", "Attacker"]}, {"name": "process_id", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spoolsv_spawning_rundll32_filter"}]}, {"name": "DNS Exfiltration Using Nslookup App", "id": "2452e632-9e0d-11eb-34ba-acde48001122", "version": 1, "date": "2021-12-07", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type, TXT, A, AAAA, that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.", "search": "| from read_ssa_enriched_events() | where \"Endpoint_Processes\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"nslookup.exe\" AND (like (cmd_line, \"%-querytype=%\") OR like (cmd_line, \"%-qt=%\") OR like (cmd_line, \"%-q=%\") OR like (cmd_line, \"%-type=%\") OR like (cmd_line, \"%-retry=%\")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | eval body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint_Processess` datamodel.", "known_false_positives": "It is possible for some legitimate administrative utilities to use similar cmd_line parameters. Filter as needed.", "references": ["https://www.fireeye.com/blog/threat-research/2017/03/fin7_spear_phishing.html", "https://www.varonis.com/blog/dns-tunneling/", "https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"], "tags": {"analytic_story": ["Suspicious DNS Traffic", "Dynamic DNS", "Command and Control", "Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/nslookup_exfil/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ performing activity related to DNS exfiltration.", "mitre_attack_id": ["T1048"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dns_exfiltration_using_nslookup_app_filter"}]}, {"name": "Windows Curl Download to Suspicious Path", "id": "c32f091e-30db-11ec-8738-acde48001122", "version": 1, "date": "2021-10-19", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of Windows Curl.exe downloading a file to a suspicious location. \\\n-O or --output is used when a file is to be downloaded and placed in a specified location. \\\nDuring triage, review parallel processes for further behavior. In addition, identify if the download was successful. If a file was downloaded, capture and analyze.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_curl` Processes.process IN (\"*-O *\",\"*--output*\") Processes.process IN (\"*\\\\appdata\\\\*\",\"*\\\\programdata\\\\*\",\"*\\\\public\\\\*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_curl_download_to_suspicious_path_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "It is possible Administrators or super users will use Curl for legitimate purposes. Filter as needed.", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/", "https://attack.mitre.org/techniques/T1105/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1105/T1105.md"], "tags": {"analytic_story": ["IceID", "Ingress Tool Transfer"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/windows-sysmon_curl.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ to download a file to a suspicious directory.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=curl.exe OR Processes.original_file_name=Curl.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_curl"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_curl_download_to_suspicious_path_filter"}]}, {"name": "Attempt To Disable Services", "id": "afb31de4-d023-11eb-98d5-acde48001122", "version": 3, "date": "2021-11-24", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies Windows Service Control, `sc.exe`, attempting to disable a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then disable it. Adversaries utilize this technique to terminate security services or other related services to continue there objective and evade detections.", "search": "| from read_ssa_enriched_events() | eval _datamodels=ucast(map_get(input_event, \"_datamodels\"), \"collection<string>\", []), body={} | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%disabled%\") AND like(cmd_line, \"%config%\") AND process_name=\"sc.exe\" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "It is possible administrative scripts may start/stop/delete services. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/", "https://app.any.run/tasks/c0f98850-af65-4352-9746-fbebadee4f05/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.001/T1562.001.md#atomic-test-14---disable-arbitrary-security-windows-service"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "cis20": ["CIS 9", "CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/sc_disable.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to disable a service.", "mitre_attack_id": ["T1489"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process"], "risk_score": 36, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Lazarus Group"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempt_to_disable_services_filter"}]}, {"name": "Detect Regasm with no Command Line Arguments", "id": "c3bc1430-04e7-4178-835f-047d8e6e97df", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies regasm.exe with no command line arguments. This particular behavior occurs when another process injects into regasm.exe, no command line arguments will be present. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Regasm.exe are natively found in `C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe` and `C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe`.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_regasm` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(regasm\\.exe.{0,4}$)\" | `detect_regasm_with_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, limited instances of regasm.exe or may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regasm/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "The process $process_name$ was spawned by $parent_process_name$ without any command-line arguments on $dest$ by $user$.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=regasm.exe OR Processes.original_file_name=RegAsm.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regasm"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regasm_with_no_command_line_arguments_filter"}]}, {"name": "Suspicious Rundll32 PluginInit", "id": "92d51712-ee29-11eb-b1ae-acde48001122", "version": 2, "date": "2021-07-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious rundll32.exe process with plugininit parameter. This technique is commonly seen in IceID malware to execute its initial dll stager to download another payload to the compromised machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*PluginInit* by  Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_plugininit_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "third party application may used this dll export name to execute function.", "references": ["https://threatpost.com/icedid-banking-trojan-surges-emotet/165314/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "rundll32 process $process_name$ with commandline $process$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_rundll32_plugininit_filter"}]}, {"name": "Shim Database File Creation", "id": "6e4c4588-ba2f-42fa-97e6-9f6f548eaa33", "version": 3, "date": "2020-12-08", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for shim database files being written to default directories. The sdbinst.exe application is used to install shim database files (.sdb). According to Microsoft, a shim is a small library that transparently intercepts an API, changes the parameters passed, handles the operation itself, or redirects the operation elsewhere.", "search": "| tstats `security_content_summariesonly` count values(Filesystem.action) values(Filesystem.file_hash) as file_hash values(Filesystem.file_path) as file_path  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path=*Windows\\\\AppPatch\\\\Custom* by Filesystem.file_name Filesystem.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` |`drop_dm_object_name(Filesystem)` | `shim_database_file_creation_filter`", "how_to_implement": "You must be ingesting data that records the filesystem activity from your hosts to populate the Endpoint file-system data model node. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "Because legitimate shim files are created and used all the time, this event, in itself, is not suspicious. However, if there are other correlating events, it may warrant further investigation.", "references": [], "tags": {"analytic_story": ["Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["source:endpoint", {"stage": "Privilege Escalation"}, "Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A process that possibly write shim database in $file_path$ in host $dest$", "mitre_attack_id": ["T1546.011", "T1546"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_path", "type": "file path", "role": ["Others"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_hash", "Filesystem.file_path", "Filesystem.file_name", "Filesystem.dest"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Application Shimming", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["FIN7", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "shim_database_file_creation_filter"}]}, {"name": "Attempt To Stop Security Service", "id": "c8e349c6-b97c-486e-8949-bd7bcd1f3910", "version": 4, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for attempts to stop security-related services on the endpoint.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` OR  Processes.process_name = sc.exe Processes.process=\"* stop *\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` |lookup security_services_lookup service as process OUTPUTNEW category, description | search category=security | `attempt_to_stop_security_service_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "None identified. Attempts to disable security-related services should be identified and understood.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.001/T1562.001.md#atomic-test-14---disable-arbitrary-security-windows-service"], "tags": {"analytic_story": ["Disabling Security Tools", "Trickbot"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_defend_service_stop/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Installation", "Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified attempting to disable security services on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 20, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempt_to_stop_security_service_filter"}], "lookups": [{"default_match": "false", "description": "A list of services that deal with security", "filename": "security_services.csv", "match_type": "WILDCARD(service)", "min_matches": 1, "name": "security_services_lookup", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/security_services.csv"}]}, {"name": "Auto Admin Logon Registry Entry", "id": "1379d2b8-0f18-11ec-8ca3-acde48001122", "version": 1, "date": "2021-09-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to detect a suspicious registry modification to implement auto admin logon to a host. This technique was seen in BlackMatter ransomware to automatically logon to the compromise host after  triggering a safemode boot to continue encrypting the whole network. This behavior is not a common practice and really a suspicious TTP or alert need to be consider if found within then network premise.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon*\" AND Registry.registry_key_name=AutoAdminLogon AND Registry.registry_value_name=1 by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `auto_admin_logon_registry_entry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://news.sophos.com/en-us/2021/08/09/blackmatter-ransomware-emerges-from-the-shadow-of-darkside/"], "tags": {"analytic_story": ["BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1552.002/autoadminlogon/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified registry key $registry_key_name$ with registry value $registry_value_name$ to prepare autoadminlogon", "mitre_attack_id": ["T1552.002", "T1552"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.dest"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Credentials in Registry", "Unsecured Credentials"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT32", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "auto_admin_logon_registry_entry_filter"}]}, {"name": "Get-DomainTrust with PowerShell Script Block", "id": "89275e7e-0548-11ec-bf75-acde48001122", "version": 1, "date": "2021-08-24", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies Get-DomainTrust from PowerView in order to gather domain trust information. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message = \"*get-foresttrust*\" | stats count min(_time) as firstTime max(_time) as lastTime by Message ComputerName User EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domaintrust_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "It is possible certain system management frameworks utilize this command to gather trust information.", "references": ["http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 40, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1482/discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious PowerShell Get-DomainTrust was identified on endpoint $ComputerName$ by user $user$.", "mitre_attack_id": ["T1482"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "Path", "OpCode", "ComputerName", "User"], "risk_score": 12, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Trust Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domaintrust_with_powershell_script_block_filter"}]}, {"name": "Disabling ControlPanel", "id": "6ae0148e-9215-11eb-a94a-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to identify registry modification to disable control panel window. This technique is commonly seen in malware to prevent their artifacts , persistence removed on the infected machine.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoControlPanel\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_controlpanel_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows Control Panel was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_controlpanel_filter"}]}, {"name": "Detect Regsvcs Spawning a Process", "id": "bc477b57-5c21-4ab6-9c33-668772e7f114", "version": 1, "date": "2021-02-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies regsvcs.exe spawning a process. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. Spawning of a child process is rare from either process and should be investigated further. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. regsvcs.exe and regasm.exe are natively found in C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=regsvcs.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regsvcs_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Although unlikely, limited instances of regasm.exe or regsvcs.exe may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$  was identified on endpoint $dest$ by user $user$ typically not normal for this process.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regsvcs_spawning_a_process_filter"}]}, {"name": "Disabling Net User Account", "id": "c0325326-acd6-11eb-98c2-acde48001122", "version": 2, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will identify a suspicious command-line that disables a user account using the `net.exe` utility native to Windows. This technique may used by the adversaries to interrupt availability of such users to do their malicious act.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process=\"*user*\" AND Processes.process=\"*/active:no*\" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_net_user_account_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified disabling a user account on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1531"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Account Access Removal"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_net_user_account_filter"}]}, {"name": "Suspicious Rundll32 StartW", "id": "9319dda5-73f2-4d43-a85a-67ce961bddb7", "version": 3, "date": "2021-02-04", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies rundll32.exe executing a DLL function name, Start and StartW, on the command line that is commonly observed with Cobalt Strike x86 and x64 DLL payloads. Rundll32.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64. Typically, the DLL will be written and loaded from a world writeable path or user location. In most instances it will not have a valid certificate (Unsigned). During investigation, review the parent process and other parallel application execution. Capture and triage the DLL in question. In the instance of Cobalt Strike, rundll32.exe is the default process it opens and injects shellcode into. This default process can be changed, but typically is not.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*start* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_startw_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use Start as a function and call it via the command line. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/011/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.011/T1218.011.md", "https://www.cobaltstrike.com/help-windows-executable", "https://lolbas-project.github.io/lolbas/Binaries/Rundll32", "https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Cobalt Strike", "Trickbot"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Initial Access", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "rundll32.exe running with suspicious parameters on $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_rundll32_startw_filter"}]}, {"name": "Outbound Network Connection from Java Using Default Ports", "id": "d2c14d28-5c47-11ec-9892-acde48001122", "version": 1, "date": "2021-12-13", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": [], "description": "A required step while exploiting the CVE-2021-44228-Log4j vulnerability is that the victim server will perform outbound connections to attacker-controlled infrastructure. This is required as part of the JNDI lookup as well as for retrieving the second stage .class payload. The following analytic identifies the Java process reaching out to default ports used by the LDAP and RMI protocols. This behavior could represent successfull exploitation. Note that adversaries can easily decide to use arbitrary ports for these protocols and potentially bypass this detection.", "search": " `sysmon` EventCode=3  (process_name=java OR process_name=java.exe) (DestinationPort=389 OR DestinationPort=1389 OR DestinationPort = 1099 ) | rename Computer as dest |  stats count min(_time) as firstTime max(_time) as lastTime by dest, process_name, DestinationPort | `security_content_ctime(firstTime)` | `outbound_network_connection_from_java_using_default_ports_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Legitimate Java applications may use perform outbound connections to these ports. Filter as needed", "references": ["https://www.lunasec.io/docs/blog/log4j-zero-day/", "https://www.govcert.admin.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Execution"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/outbound_java/linux-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "Java performed outbound connections to default ports of LDAP or RMI on $dest$", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "EventID", "CommandLine", "Computer", "DestinationPort", "DestinationIp"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "outbound_network_connection_from_java_using_default_ports_filter"}]}, {"name": "RunDLL Loading DLL By Ordinal", "id": "6c135f8d-5e60-454e-80b7-c56eed739833", "version": 5, "date": "2020-11-30", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for executing scripts with rundll32. Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly, may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` by Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll_loading_dll_by_ordinal_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "While not common, loading a DLL under %AppData% and calling a function by ordinal is possible by a legitimate process", "references": [], "tags": {"analytic_story": ["Unusual Processes"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Installation"], "message": "A rundll32 process $process_name$ with ordinal parameter like this process commandline $process$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll_loading_dll_by_ordinal_filter"}]}, {"name": "Detect WMI Event Subscription Persistence", "id": "01d9a0c2-cece-11eb-ab46-acde48001122", "version": 1, "date": "2021-06-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies the use of WMI Event Subscription to establish persistence or perform privilege escalation.  WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges. This analytic is restricted by commonly added process execution and a path. If the volume is low enough, remove the values and flag on any new subscriptions.\\\nAll event subscriptions have three components \\\n1. Filter - WQL Query for the events we want. EventID equals 19 \\\n1. Consumer - An action to take upon triggering the filter. EventID equals 20 \\\n1. Binding - Registers a filter to a consumer. EventID equals 21 \\\nMonitor for the creation of new WMI EventFilter, EventConsumer, and FilterToConsumerBinding. It may be pertinent to review all 3 to identify the flow of execution. In addition, EventCode 4104 may assist with any other PowerShell script usage that registered the subscription.", "search": "`sysmon` EventID=20 | stats count min(_time) as firstTime max(_time) as lastTime by Computer User Destination | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_wmi_event_subscription_persistence_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with that provide WMI Event Subscription from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA and have enabled EventID 19, 20 and 21. Tune and filter known good to limit the volume.", "known_false_positives": "It is possible some applications will create a consumer and may be required to be filtered. For tuning, add any additional LOLBin's for further depth of coverage.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1546.003/T1546.003.md", "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/", "https://github.com/trustedsec/SysmonCommunityGuide/blob/master/WMI-events.md", "https://in.security/an-intro-into-abusing-and-identifying-wmi-event-subscriptions-for-persistence/"], "tags": {"analytic_story": ["Suspicious WMI Use"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Persistence", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.003/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible malicious WMI Subscription created on $dest$", "mitre_attack_id": ["T1546.003", "T1546"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Destination", "Computer", "User"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation Event Subscription", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["APT33", "Blue Mockingbird", "Turla", "Leviathan", "APT29", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_wmi_event_subscription_persistence_filter"}]}, {"name": "Attempted Credential Dump From Registry via Reg exe", "id": "e9fb4a59-c5fb-440a-9f24-191fbc6b2911", "version": 6, "date": "2021-09-16", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Monitor for execution of reg.exe with parameters specifying an export of keys that contain hashed credentials that attackers may try to crack offline.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_reg` OR `process_cmd` Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\\\System* OR Processes.process=*HKLM\\\\Security* OR Processes.process=*HKLM\\\\System* OR Processes.process=*HKLM\\\\SAM*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `attempted_credential_dump_from_registry_via_reg_exe_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "None identified.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.002/T1003.002.md#atomic-test-1---registry-dump-of-sam-creds-and-secrets"], "tags": {"analytic_story": ["Credential Dumping", "DarkSide Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.002/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to export the registry keys.", "mitre_attack_id": ["T1003.002", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "(Processes.process_name=reg.exe OR Processes.original_file_name=reg.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_reg"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "attempted_credential_dump_from_registry_via_reg_exe_filter"}]}, {"name": "Detect Mimikatz Using Loaded Images", "id": "29e307ba-40af-4ab2-91b2-3c6b392bbba0", "version": 1, "date": "2019-12-03", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for reading loaded Images unique to credential dumping with Mimikatz. Deprecated because mimikatz libraries changed and very noisy sysmon Event Code.", "search": "`sysmon` EventCode=7 | stats values(ImageLoaded) as ImageLoaded values(ProcessId) as ProcessId by Computer, Image | search ImageLoaded=*WinSCard.dll ImageLoaded=*cryptdll.dll ImageLoaded=*hid.dll ImageLoaded=*samlib.dll ImageLoaded=*vaultcli.dll | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mimikatz_using_loaded_images_filter`", "how_to_implement": "This search needs Sysmon Logs and a sysmon configuration, which includes EventCode 7 with powershell.exe. This search uses an input macro named `sysmon`. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Sysmon logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "Other tools can import the same DLLs. These tools should be part of a whitelist. False positives may be present with any process that authenticates or uses credentials, PowerShell included. Filter based on parent process.", "references": ["https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for.html"], "tags": {"analytic_story": ["Credential Dumping", "Detect Zerologon Attack", "Cloud Federated Credential Abuse", "DarkSide Ransomware"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 6", "CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "A process, $Image$, has loaded $ImageLoaded$ that are typically related to credential dumping on $Computer$. Review for further details.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.AE", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "ImageLoaded", "type": "Parent Process", "role": ["Other"]}, {"name": "Image", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "ImageLoaded", "ProcessId", "Computer", "Image"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_mimikatz_using_loaded_images_filter"}]}, {"name": "Detect Path Interception By Creation Of program exe", "id": "c77162d3-f93c-45cc-80c8-22f6v5264g9f", "version": 3, "date": "2020-07-03", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The detection Detect Path Interception By Creation Of program exe is detecting the abuse of unquoted service paths, which is a popular technique for privilege escalation. ", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=services.exe by Processes.user Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | rex field=process \"^.*?\\\\\\\\(?<service_process>[^\\\\\\\\]*\\.(?:exe|bat|com|ps1))\" | eval process_name = lower(process_name) | eval service_process = lower(service_process) | where process_name != service_process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_path_interception_by_creation_of_program_exe_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "unknown", "references": ["https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae"], "tags": {"analytic_story": ["Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1574.009/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to perform privilege escalation by using unquoted service paths.", "mitre_attack_id": ["T1574.009", "T1574"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Path Interception by Unquoted Path", "Hijack Execution Flow"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Defense Evasion", "Persistence", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_path_interception_by_creation_of_program_exe_filter"}]}, {"name": "Executables Or Script Creation In Suspicious Path", "id": "a7e3f0f0-ae42-11eb-b245-acde48001122", "version": 1, "date": "2021-05-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will identify suspicious executable or scripts (known file extensions) in list of suspicious file path in Windows. This technique is used by adversaries to evade detection. The suspicious file path are known paths used in the wild and are not common to have executable or scripts.", "search": "|tstats `security_content_summariesonly` values(Filesystem.file_path) as file_path count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where (Filesystem.file_name = *.exe OR Filesystem.file_name = *.dll OR Filesystem.file_name = *.sys OR Filesystem.file_name = *.com OR Filesystem.file_name = *.vbs OR Filesystem.file_name = *.vbe OR Filesystem.file_name = *.js OR Filesystem.file_name = *.ps1 OR Filesystem.file_name = *.bat OR Filesystem.file_name = *.cmd OR Filesystem.file_name = *.pif) AND ( Filesystem.file_path = *\\\\windows\\\\fonts\\\\* OR Filesystem.file_path = *\\\\windows\\\\temp\\\\* OR Filesystem.file_path = *\\\\users\\\\public\\\\* OR Filesystem.file_path = *\\\\windows\\\\debug\\\\* OR Filesystem.file_path = *\\\\Users\\\\Administrator\\\\Music\\\\* OR Filesystem.file_path = *\\\\Windows\\\\servicing\\\\* OR Filesystem.file_path = *\\\\Users\\\\Default\\\\* OR Filesystem.file_path = *Recycle.bin* OR Filesystem.file_path = *\\\\Windows\\\\Media\\\\* OR Filesystem.file_path = *\\\\Windows\\\\repair\\\\* OR Filesystem.file_path = *\\\\AppData\\\\Local\\\\Temp*) by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `executables_or_script_creation_in_suspicious_path_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the Filesystem responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesystem` node.", "known_false_positives": "Administrators may allow creation of script or exe in the paths specified. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Suspicious executable or scripts with file name $file_name$, $file_path$ and process_id $process_id$ executed in suspicious file path in Windows by $user$", "mitre_attack_id": ["T1036"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process_id", "type": "Process", "role": ["Attacker"]}, {"name": "file_name", "type": "File Name", "role": ["Other", "Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_path", "Filesystem.file_create_time", "Filesystem.process_id", "Filesystem.file_name", "Filesystem.user"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "executables_or_script_creation_in_suspicious_path_filter"}]}, {"name": "Recon Using WMI Class", "id": "018c1972-ca07-11eb-9473-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell via EventCode 4104, where WMI is performing an event query looking for running processes or running services. This technique is commonly found where the adversary will identify services and system information on the compromised machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 (Message= \"*SELECT*\" OR Message= \"*Get-WmiObject*\") AND (Message= \"*Win32_Bios*\" OR Message= \"*Win32_OperatingSystem*\" OR Message= \"*Win32_Processor*\" OR Message= \"*Win32_ComputerSystem*\" OR Message= \"*Win32_ComputerSystemProduct*\" OR Message= \"*Win32_ShadowCopy*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recon_using_wmi_class_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "network administrator may used this command for checking purposes", "references": ["https://news.sophos.com/en-us/2020/05/12/maze-ransomware-1-year-counting/", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Reconnaissance"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 75, "kill_chain_phases": ["Reconnaissance"], "message": "A suspicious powershell script contains host recon command in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1592"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 60, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "recon_using_wmi_class_filter"}]}, {"name": "Get DomainUser with PowerShell Script Block", "id": "61994268-04f4-11ec-865c-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainUser` commandlet. `GetDomainUser` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message = \"*Get-DomainUser*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainuser_with_powershell_script_block_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainUser/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ for user enumeration", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domainuser_with_powershell_script_block_filter"}]}, {"name": "Powershell Creating Thread Mutex", "id": "637557ec-ca08-11eb-bd0a-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is using the `mutex` function. This function is commonly seen in some obfuscated PowerShell scripts to make sure that only one instance of there process is running on a compromise machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 Message = \"*Threading.Mutex*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_creating_thread_mutex_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "powershell developer may used this function in their script for instance checking too.", "references": ["https://isc.sans.edu/forums/diary/Some+Powershell+Malicious+Code/22988/", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains Thread Mutex in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1027", "T1027.005"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Obfuscated Files or Information", "Indicator Removal from Tools"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28", "Soft Cell", "TEMP.Veles", "Patchwork", "APT3", "Turla", "OilRig", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_creating_thread_mutex_filter"}]}, {"name": "Remote WMI Command Attempt", "id": "272df6de-61f1-4784-877c-1fbc3e2d0838", "version": 4, "date": "2018-12-03", "author": "Rico Valdez, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies usage of `wmic.exe` spawning a local or remote process, identified by the `node` switch. During triage, review parallel processes for additional commands executed. Look for any file modifications before and after `wmic.exe` execution. In addition, identify the remote endpoint and confirm execution or file modifications. Contain and isolate the endpoint as needed.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process=*node* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_wmi_command_attempt_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product. Deprecated because duplicate of Remote Process Instantiation via WMI.", "known_false_positives": "Administrators may use this legitimately to gather info from remote systems. Filter as needed.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/T1047.yaml"], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5"], "confidence": 60, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/atomic_red_team/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "A wmic.exe process $process$ contain node commandline $process$ in host $dest$", "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.user", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.parent_process", "Processes.parent_process_id", "Processes.process_id"], "risk_score": 36, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_wmi_command_attempt_filter"}]}, {"name": "System User Discovery With Whoami", "id": "894fc43e-6f50-47d5-a68b-ee9ee23e18f4", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `whoami.exe` without any arguments. This windows native binary prints out the current logged user. Red Teams and adversaries alike may leverage `whoami.exe` to identify system users on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"whoami.exe\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_user_discovery_with_whoami_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "system_user_discovery_with_whoami_filter"}]}, {"name": "Unified Messaging Service Spawning a Process", "id": "f1126df0-7bd5-11eb-988f-acde48001122", "version": 1, "date": "2021-03-02", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This detection identifies Microsoft Exchange Server's Unified Messaging services, umworkerprocess.exe and umservice.exe, spawning a child process, indicating possible exploitation of CVE-2021-26857 vulnerability. The query filters out werfault.exe and wermgr.exe mostly due to potential false positives, however, if there is an excessive amount of \"wermgr.exe\" or \"WerFault.exe\" failures, it may be due to the active exploitation. During triage, identify any additional suspicious parallel processes. Identify any recent out of place file modifications. Review Exchange logs following Microsofts guide. To contain, perform egress filtering or restrict public access to Exchange. In final, patch the vulnerablity and monitor.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=\"umworkerprocess.exe\" OR Processes.parent_process_name=\"UMService.exe\" (Processes.process_name!=\"wermgr.exe\" OR Processes.process_name!=\"werfault.exe\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `unified_messaging_service_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Unknown. Tune out child processes as needed to limit volume of false positives.", "references": ["https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/", "https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/", "https://blog.rapid7.com/2021/03/03/rapid7s-insightidr-enables-detection-and-response-to-microsoft-exchange-0-day/"], "tags": {"analytic_story": ["HAFNIUM Group"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution"], "cve": ["CVE-2021-26857"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1505.003/windows-sysmon_umservices.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible CVE-2021-26857 exploitation on $dest$", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unified_messaging_service_spawning_a_process_filter"}]}, {"name": "Fsutil Zeroing File", "id": "f792cdc9-43ee-4429-a3c0-ffce4fed1a85", "version": 1, "date": "2021-12-07", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This search is to detect a suspicious fsutil process to zeroing a target file. This technique was seen in lockbit ransomware where it tries to zero out its malware path as part of its defense evasion after encrypting the compromised host.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"fsutil.exe\" AND (like (cmd_line, \"%setzerodata%\")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed net.exe may be used.", "known_false_positives": "System administrators or scripts may delete user accounts via this technique. Filter as needed.", "references": ["https://app.any.run/tasks/e0ac072d-58c9-4f53-8a3b-3e491c7ac5db/", "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file"], "tags": {"analytic_story": ["Ransomware"], "confidence": 90, "context": ["Source:Endpoint", "stage:Defense Evasion"], "dataset": [], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ atempting to perform file deletion.", "mitre_attack_id": ["T1070"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 54, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "fsutil_zeroing_file_filter"}]}, {"name": "Allow Inbound Traffic By Firewall Rule Registry", "id": "0a46537c-be02-11eb-92ca-acde48001122", "version": 1, "date": "2021-05-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic detects a potential suspicious modification of firewall rule registry allowing inbound traffic in specific port with public profile. This technique was identified when an adversary wants to grant remote access to a machine by allowing the traffic in a firewall rule.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\System\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\FirewallRules\\\\*\" Registry.registry_value_name = \"*|Action=Allow|*\" Registry.registry_value_name = \"*|Dir=In|*\" Registry.registry_value_name = \"*|Profile=Public|*\" Registry.registry_value_name = \"*|LPort=*\" by Registry.registry_path Registry.registry_key_name Registry.user Registry.registry_value_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `allow_inbound_traffic_by_firewall_rule_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "network admin may add/remove/modify public inbound firewall rule that may cause this rule to be triggered.", "references": ["https://docs.microsoft.com/en-us/powershell/module/netsecurity/new-netfirewallrule?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/casper/datasets1/windows-sysmon.log"], "impact": 10, "kill_chain_phases": ["Exploitation"], "message": "Suspicious firewall modifications were detected via the registry on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1021.001", "T1021"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.dest", "Registry.user"], "risk_score": 3, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Desktop Protocol", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "TEMP.Veles", "Leviathan", "APT39", "Stolen Pencil", "Cobalt Group", "Dragonfly 2.0", "FIN8", "APT3", "OilRig", "menuPass", "FIN10", "Patchwork", "FIN6", "Lazarus Group", "APT1", "Axiom", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "allow_inbound_traffic_by_firewall_rule_registry_filter"}]}, {"name": "GetCurrent User with PowerShell Script Block", "id": "80879283-c30f-44f7-8471-d1381f6d437a", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `GetCurrent` method of the WindowsIdentity .NET class. This method returns an object that represents the current Windows user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*[System.Security.Principal.WindowsIdentity]*\" AND Message = \"*GetCurrent()*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getcurrent_user_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/", "https://docs.microsoft.com/en-us/dotnet/api/system.security.principal.windowsidentity.getcurrent?view=net-5.0"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Path", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getcurrent_user_with_powershell_script_block_filter"}]}, {"name": "Excessive Usage of NSLOOKUP App", "id": "0a69fdaa-a2b8-11eb-b16d-acde48001122", "version": 1, "date": "2021-04-21", "author": "Teoderick Contreras, Stanislav Miskovic, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type (TXT, A, AAAA) that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.", "search": "`sysmon` EventCode = 1 process_name = \"nslookup.exe\" |  bucket _time span=15m | stats count as numNsLookup by Computer, _time |  eventstats avg(numNsLookup) as avgNsLookup, stdev(numNsLookup) as stdNsLookup, count as numSlots by Computer |  eval upperThreshold=(avgNsLookup + stdNsLookup *3) |  eval isOutlier=if(avgNsLookup > 20 and avgNsLookup >= upperThreshold, 1, 0) |  search isOutlier=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_nslookup_app_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances of nslookup.exe may be used.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2017/03/fin7_spear_phishing.html", "https://www.varonis.com/blog/dns-tunneling/", "https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"], "tags": {"analytic_story": ["Suspicious DNS Traffic", "Dynamic DNS", "Command and Control", "Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Scope:Local", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/nslookup_exfil/windows-sysmon.log"], "impact": 40, "kill_chain_phases": ["Exploitation"], "message": "Excessive usage of nslookup.exe has been detected on $Computer$. This detection is triggered as as it violates the dynamic threshold", "mitre_attack_id": ["T1048"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Computer", "process_name", "EventCode"], "risk_score": 28, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_usage_of_nslookup_app_filter"}]}, {"name": "Suspicious microsoft workflow compiler rename", "id": "f0db4464-55d9-11eb-ae93-0242ac130002", "version": 3, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies a renamed instance of microsoft.workflow.compiler.exe. Microsoft.workflow.compiler.exe is natively found in C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 and is rarely utilized. When investigating, identify the executed code on disk and review. A spawned child process from microsoft.workflow.compiler.exe is uncommon. In any instance, microsoft.workflow.compiler.exe spawning from an Office product or any living off the land binary is highly suspect.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_microsoftworkflowcompiler` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_microsoft_workflow_compiler_rename_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may use a moved copy of microsoft.workflow.compiler.exe, triggering a false positive.", "references": ["https://lolbas-project.github.io/lolbas/Binaries/Microsoft.Workflow.Compiler/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/T1218.md#atomic-test-6---microsoftworkflowcompilerexe-payload-execution"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution", "Cobalt Strike", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious renamed microsoft.workflow.compiler.exe binary ran on $dest$ by $user$", "mitre_attack_id": ["T1036", "T1127", "T1036.003"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading", "Trusted Developer Utilities Proxy Execution", "Rename System Utilities"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "no", "menuPass", "APT32", "Soft Cell", "PLATINUM"]}, "macros": [{"definition": "(Processes.process_name=microsoft.workflow.compiler.exe OR Processes.original_file_name=Microsoft.Workflow.Compiler.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_microsoftworkflowcompiler"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_microsoft_workflow_compiler_rename_filter"}]}, {"name": "Detect HTML Help URL in Command Line", "id": "8c5835b9-39d9-438b-817c-95f14c69a31e", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) file from a remote url. This particular technique will load Windows script code from a compiled help file. CHM files may  contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The \"htm\" and \"html\" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Review reputation of remote IP and domain. Some instances, it is worth decompiling the .chm file to review its original contents. hh.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_hh` Processes.process=*http* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_url_in_command_line_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may retrieve a CHM remotely, filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.001/T1218.001.md", "https://lolbas-project.github.io/lolbas/Binaries/Hh/", "https://blog.sevagas.com/?Hacking-around-HTA-files", "https://gist.github.com/mgeeky/cce31c8602a144d8f2172a73d510e0e7", "https://cyberforensicator.com/2019/01/20/silence-dissecting-malicious-chm-files-and-performing-forensic-analysis/"], "tags": {"analytic_story": ["Suspicious Compiled HTML Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.001/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_proces_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ contacting a remote destination to potentally download a malicious payload.", "mitre_attack_id": ["T1218", "T1218.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Compiled HTML File"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "Silence", "Lazarus Group", "Dark Caracal", "OilRig"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=hh.exe OR Processes.original_file_name=HH.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_hh"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_html_help_url_in_command_line_filter"}]}, {"name": "Wevtutil Usage To Disable Logs", "id": "a4bdc944-cdd9-11eb-ac97-acde48001122", "version": 2, "date": "2021-06-15", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "This search is to detect execution of wevtutil.exe to disable logs. This technique was seen in several ransomware to disable the event logs to evade alerts and detections in compromised host.", "search": "| from read_ssa_enriched_events() | where \"Endpoint_Processes\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"% sl %\") AND like(cmd_line, \"%/e:false%\") AND process_name=\"wevtutil.exe\" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | eval body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "network operator may disable audit event logs for debugging purposes.", "references": ["https://www.bleepingcomputer.com/news/security/new-ransom-x-ransomware-used-in-texas-txdot-cyberattack/"], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware"], "cis20": ["CIS 8", "CIS 13"], "confidence": 90, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/ssa_wevtutil/disable_evt.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A wevtutil process $process_name$ with commandline $cmd_line$ to disable event logs in host $dest_device_id$", "mitre_attack_id": ["T1070", "T1070.001"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process"], "risk_score": 63, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Clear Windows Event Logs"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wevtutil_usage_to_disable_logs_filter"}]}, {"name": "Domain Group Discovery with Adsisearcher", "id": "089c862f-5f83-49b5-b1c8-7e4ff66560c7", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*[adsisearcher]*\" AND Message = \"*(objectcategory=group)*\" AND Message = \"*findAll()*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `domain_group_discovery_with_adsisearcher_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use Adsisearcher for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Domain group discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 18, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "domain_group_discovery_with_adsisearcher_filter"}]}, {"name": "Unusually Long Command Line", "id": "58f43aba-1775-445e-b19c-be2b87d83ae3", "version": 1, "date": "2020-10-06", "author": "Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "Command lines that are extremely long may be indicative of malicious activity on your hosts. This search leverages the Splunk Streaming ML DSP plugin to help identify command lines with lengths that are unusual for a given user. This detection is inspired on Unusually Long Command Line authored by Rico Valdez.", "search": " | from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line!=null and dest_user_id!=null | eval cmd_line_norm=replace(cast(cmd_line, \"string\"), /\\s(--?\\w+)|(\\/\\w+)/, \" ARG\"), cmd_line_norm=replace(cmd_line_norm, /\\w:\\\\[^\\s]+/, \"PATH\"), cmd_line_norm=replace(cmd_line_norm, /\\d+/, \"N\"), input=parse_double(len(coalesce(cmd_line_norm, \"\"))) | select timestamp, process_name, dest_device_id, dest_user_id, cmd_line, input | adaptive_threshold algorithm=\"quantile\" entity=\"process_name\" window=60480000 | where label AND quantile>0.99 | first_time_event input_columns=[\"dest_device_id\", \"cmd_line\"] | where first_time_dest_device_id_cmd_line | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name]) | into write_ssa_detected_events();", "how_to_implement": "You must be ingesting sysmon endpoint data that monitors command lines.", "known_false_positives": "This detection may flag suspiciously long command lines when there is not sufficient evidence (samples) for a given process that this detection is tracking; or when there is high variability in the length of the command line for the tracked process. Also, some legitimate applications may use long command lines. Such is the case of Ansible, that encodes Powershell scripts using long base64. Attackers may use this technique to obfuscate their payloads.", "references": [], "tags": {"analytic_story": ["Unusual Processes"], "cis20": ["CIS 8"], "confidence": 40, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "A  process $process_name$ with a long commandline $cmd_line$ executed in host $dest_device_id$", "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process_name", "_time", "dest_device_id", "dest_user_id", "process"], "risk_score": 12, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusually_long_command_line_filter"}]}, {"name": "Network Connection Discovery With Arp", "id": "ae008c0f-83bd-4ed4-9350-98d4328e15d2", "version": 1, "date": "2021-09-10", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `arp.exe` utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use arp.exe for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"arp.exe\") (Processes.process=*-a*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_arp_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1049/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1049/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1049"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Connections Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Tropic Trooper", "APT41", "APT38", "Soft Cell", "APT32", "APT1", "OilRig", "APT3", "menuPass", "Threat Group-3390", "Poseidon Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "network_connection_discovery_with_arp_filter"}]}, {"name": "User Discovery With Env Vars PowerShell", "id": "0cdf318b-a0dd-47d7-b257-c621c0247de8", "version": 1, "date": "2021-09-13", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments that leverage PowerShell environment variables to identify the current logged user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=\"*$env:UserName*\" OR Processes.process=\"*[System.Environment]::UserName*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `user_discovery_with_env_vars_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1033/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1033/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System user discovery on $dest$", "mitre_attack_id": ["T1033"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Owner/User Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Frankenstein", "APT41", "Soft Cell", "Tropic Trooper", "APT39", "MuddyWater", "APT32", "APT37", "APT19", "Dragonfly 2.0", "OilRig", "Magic Hound", "FIN10", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "user_discovery_with_env_vars_powershell_filter"}]}, {"name": "Modify ACLs Permission Of Files Or Folders", "id": "9ae9a48a-cdbe-11eb-875a-acde48001122", "version": 2, "date": "2021-11-30", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "This analytic identifies suspicious modification of ACL permission to a files or folder to make it available to everyone or to a specific user. This technique may be used by the adversary to evade ACLs or protected files access. This changes is commonly configured by the file or directory owner with appropriate permission. This behavior raises suspicion if this command is seen on an endpoint utilized by an account with no permission to do so.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%/G%\") AND (match_regex(cmd_line, /(?i)everyone:/)=true OR match_regex(cmd_line, /(?i)SYSTEM:/)=true) AND (process_name=\"cacls.exe\" OR process_name=\"xcacls.exe\" OR process_name=\"icacls.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed cacls.exe may be used.", "known_false_positives": "System administrators may use this windows utility. filter is needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "cis20": ["CIS 8", "CIS 13"], "confidence": 70, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1222.001/ssa_cacls/all_icalc.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A cacls process $process_name$ with commandline $cmd_line$ try to modify a permission of a file or directory in host $dest_device_id$", "mitre_attack_id": ["T1222"], "nist": ["PR.DS", "PR.IP"], "observable": [{"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "dest_user_id", "type": "user", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 35, "risk_severity": "medium", "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "modify_acls_permission_of_files_or_folders_filter"}]}, {"name": "Disable AMSI Through Registry", "id": "9c27ec42-d338-11eb-9044-acde48001122", "version": 1, "date": "2021-06-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is to identify modification in registry to disable AMSI windows feature to evade detections. This technique was seen in several ransomware, RAT and even APT to impaire defenses of the compromise machine and to be able to execute payload with minimal alert as much as possible.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows Script\\\\Settings\\\\AmsiEnable\" Registry.registry_value_data = \"0x00000000\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `disable_amsi_through_registry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "network operator may disable this feature of windows but not so common.", "references": ["https://blog.f-secure.com/hunting-for-amsi-bypasses/", "https://gist.github.com/rxwx/8955e5abf18dc258fd6b43a3a7f4dbf9"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/data2/windows-sysmon.log"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1562.001", "T1562"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_amsi_through_registry_filter"}]}, {"name": "Get ADDefaultDomainPasswordPolicy with Powershell Script Block", "id": "1ff7ccc8-065a-11ec-91e4-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-ADDefaultDomainPasswordPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message =\"*Get-ADDefaultDomainPasswordPolicy*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_addefaultdomainpasswordpolicy_with_powershell_script_block_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://attack.mitre.org/techniques/T1201/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 30, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ to query domain password policy", "mitre_attack_id": ["T1201"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_addefaultdomainpasswordpolicy_with_powershell_script_block_filter"}]}, {"name": "Detect Dump LSASS Memory using comsvcs", "id": "76bb9e35-f314-4c3d-a385-83c72a13ce4e", "version": 2, "date": "2021-11-29", "author": "Jose Hernandez, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies credential dumping using comsvcs.dll with `regsvr32.exe`. This technique is common with adversaries who would like to dump the memory of lsass.exe and perform offline password cracking.", "search": "| from read_ssa_enriched_events() | eval tenant=ucast(map_get(input_event, \"_tenant\"), \"string\", null), machine=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), process=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where process_name LIKE \"%rundll32.exe%\" AND match_regex(process, /(?i)comsvcs.dll[,\\s]+MiniDump/)=true | eval start_time = timestamp, end_time = timestamp, entities = mvappend(machine), body=create_map([\"event_id\", event_id, \"process_name\", process_name, \"process\", process]) | into write_ssa_detected_events();", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including Windows command line logging. You can see how we test this with [Event Code 4688](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4688a) on the [attack_range](https://github.com/splunk/attack_range/blob/develop/ansible/roles/windows_common/tasks/windows-enable-4688-cmd-line-audit.yml).", "known_false_positives": "False positives should be limited, filter as needed.", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md#atomic-test-3---dump-lsassexe-memory-using-comsvcsdll"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 16"], "confidence": 100, "context": ["Source:AD", "Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-security.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A dump of lsass.exe was attempted using comsvcs.dll on endpoint $dest_device_id$ by user $dest_device_user$.", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process_name", "_tenant", "_time", "dest_device_id", "process"], "risk_score": 70, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_dump_lsass_memory_using_comsvcs_filter"}]}, {"name": "PowerShell Loading DotNET into Memory via System Reflection Assembly", "id": "85bc3f30-ca28-11eb-bd21-acde48001122", "version": 1, "date": "2021-06-10", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \\\nThis analytic identifies the use of PowerShell loading .net assembly via reflection. This is commonly found in malicious PowerShell usage, including Empire and Cobalt Strike. In addition, the `load(` value may be modifed by removing `(` and it will identify more events to review. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message IN (\"*[system.reflection.assembly]::load(*\",\"*[reflection.assembly]*\") | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_loading_dotnet_into_memory_via_system_reflection_assembly_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives should be limited as day to day scripts do not use this method.", "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly?view=net-5.0", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains reflective class assembly  command in $Message$ to load .net code in memory with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_loading_dotnet_into_memory_via_system_reflection_assembly_filter"}]}, {"name": "Verclsid CLSID Execution", "id": "61e9a56a-20fa-11ec-8ba3-acde48001122", "version": 1, "date": "2021-09-29", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic is to detect a possible abuse of verclsid to execute malicious file through generate CLSID. This process is a normal application of windows to verify the CLSID COM object before it is instantiated by Windows Explorer. This hunting query can be a good pivot point to analyze what is he CLSID or COM object pointing too to check if it is a valid application or not.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_verclsid` AND Processes.process=\"*/S*\" Processes.process=\"*/C*\" AND  Processes.process=\"*{*\" AND Processes.process=\"*}*\" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `verclsid_clsid_execution_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "windows can used this application for its normal COM object validation.", "references": ["https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5", "https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/"], "tags": {"analytic_story": ["Unusual Processes"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.012/verclsid_exec/sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "process $process_name$ to execute possible clsid commandline $process$ in $dest$", "mitre_attack_id": ["T1218.012", "T1218"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "(Processes.process_name=verclsid.exe OR Processes.original_file_name=verclsid.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_verclsid"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "verclsid_clsid_execution_filter"}]}, {"name": "Remcos RAT File Creation in Remcos Folder", "id": "25ae862a-1ac3-11ec-94a1-acde48001122", "version": 1, "date": "2021-09-21", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect file creation in remcos folder in appdata which is the keylog and clipboard logs that will be send to its c2 server. This is really a good TTP indicator that there is a remcos rat in the system that do keylogging, clipboard grabbing and audio recording.", "search": "|tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*.dat\") Filesystem.file_path = \"*\\\\remcos\\\\*\" by _time Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.file_create_time | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remcos_rat_file_creation_in_remcos_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://success.trendmicro.com/solution/1123281-remcos-malware-information", "https://blog.malwarebytes.com/threat-intelligence/2021/07/remcos-rat-delivered-via-visual-basic/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_agent/sysmon.log"], "impact": 100, "kill_chain_phases": ["Exploitation"], "message": "file $file_name$ created in $file_path$ of $dest$", "mitre_attack_id": ["T1113"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "file_create_time", "file_name", "file_path"], "risk_score": 100, "security_domain": "endpoint", "mitre_attack_technique": ["Screen Capture"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["Gamaredon Group", "APT39", "Silence", "MuddyWater", "Dragonfly 2.0", "OilRig", "Dark Caracal", "FIN7", "BRONZE BUTLER", "Magic Hound", "Group5", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remcos_rat_file_creation_in_remcos_folder_filter"}]}, {"name": "Creation of lsass Dump with Taskmgr", "id": "b2fbe95a-9c62-4c12-8a29-24b97e84c0cd", "version": 1, "date": "2020-02-03", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "Detect the hands on keyboard behavior of Windows Task Manager creating a process dump of lsass.exe. Upon this behavior occurring, a file write/modification will occur in the users profile under \\AppData\\Local\\Temp. The dump file, lsass.dmp, cannot be renamed, however if the dump occurs more than once, it will be named lsass (2).dmp.", "search": "`sysmon` EventID=11 process_name=taskmgr.exe TargetFilename=*lsass*.dmp | stats count min(_time) as firstTime max(_time) as lastTime by Computer, object_category, process_name, TargetFilename | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `creation_of_lsass_dump_with_taskmgr_filter`", "how_to_implement": "This search requires Sysmon Logs and a Sysmon configuration, which includes EventCode 11 for detecting file create of lsass.dmp. This search uses an input macro named `sysmon`. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Sysmon logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "Administrators can create memory dumps for debugging purposes, but memory dumps of the LSASS process would be unusual.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md#atomic-test-5---dump-lsassexe-memory-using-windows-task-manager", "https://attack.mitre.org/techniques/T1003/001/", "https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 6", "CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "$process_name$ was identified on endpoint $Computer$ writing $TargetFilename$ to disk. This behavior is related to dumping credentials via Task Manager.", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "TargetFilename", "type": "File Name", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "process_name", "TargetFilename", "Computer", "object_category"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "creation_of_lsass_dump_with_taskmgr_filter"}]}, {"name": "AdsiSearcher Account Discovery", "id": "de7fcadc-04f3-11ec-a241-acde48001122", "version": 1, "date": "2021-08-24", "author": "Teoderick Contreras, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain users for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message = \"*[adsisearcher]*\" Message = \"*objectcategory=user*\" Message = \"*.findAll()*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `adsisearcher_account_discovery_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/002/", "https://www.blackhillsinfosec.com/red-blue-purple/", "https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.002/AD_discovery/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ for user enumeration", "mitre_attack_id": ["T1087.002", "T1087"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Domain Account", "Account Discovery"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["Turla", "Sandworm Team", "Dragonfly 2.0", "OilRig", "BRONZE BUTLER", "menuPass", "FIN6", "Poseidon Group", "Ke3chang", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "adsisearcher_account_discovery_filter"}]}, {"name": "Mshta spawning Rundll32 OR Regsvr32 Process", "id": "4aa5d062-e893-11eb-9eb2-acde48001122", "version": 2, "date": "2021-07-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious mshta.exe process that spawn rundll32 or regsvr32 child process. This technique was seen in several malware nowadays like trickbot to load its initial .dll stage loader to execute and download the the actual trickbot payload.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = \"mshta.exe\"  `process_rundll32` OR `process_regsvr32` by Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `mshta_spawning_rundll32_or_regsvr32_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "limitted. this anomaly behavior is not commonly seen in clean host.", "references": ["https://twitter.com/cyb3rops/status/1416050325870587910?s=21"], "tags": {"analytic_story": ["Trickbot", "IcedID"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "executions"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/spear_phish/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "a mshta parent process $parent_process_name$ spawn child process $process_name$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.005"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "mshta_spawning_rundll32_or_regsvr32_process_filter"}]}, {"name": "Get ADUserResultantPasswordPolicy with Powershell Script Block", "id": "737e1eb0-065a-11ec-921a-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, MAuricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-ADUserResultantPasswordPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message =\"*Get-ADUserResultantPasswordPolicy*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduserresultantpasswordpolicy_with_powershell_script_block_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://attack.mitre.org/techniques/T1201/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduserresultantpasswordpolicy?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 30, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ to query domain user password policy.", "mitre_attack_id": ["T1201"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_aduserresultantpasswordpolicy_with_powershell_script_block_filter"}]}, {"name": "Get WMIObject Group Discovery", "id": "5434f670-155d-11ec-8cca-acde48001122", "version": 1, "date": "2021-09-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic identifies the use of `Get-WMIObject Win32_Group` being used with PowerShell to identify local groups on the endpoint. \\ Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \\ During triage, review parallel processes and identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=powershell.exe OR processes.process_name=cmd.exe) (Processes.process=\"*Get-WMIObject*\" AND Processes.process=\"*Win32_Group*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`  | `get_wmiobject_group_discovery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be present. Tune as needed.", "references": ["https://attack.mitre.org/techniques/T1069/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1069.001/T1069.001.md"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.001/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "System group discovery on $dest$ by $user$.", "mitre_attack_id": ["T1069", "T1069.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Local Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "OilRig", "admin@338"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_wmiobject_group_discovery_filter"}]}, {"name": "Jscript Execution Using Cscript App", "id": "002f1e24-146e-11ec-a470-acde48001122", "version": 1, "date": "2021-09-13", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a execution of jscript using cscript process. Commonly when a user run jscript file it was executed by wscript.exe application. This technique was seen in FIN7 js implant to execute its malicious script using cscript process. This behavior is uncommon and a good artifacts to check further anomalies within the network", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = \"cscript.exe\" AND Processes.parent_process = \"*//e:jscript*\") OR (Processes.process_name = \"cscript.exe\" AND Processes.process = \"*//e:jscript*\") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `jscript_execution_using_cscript_app_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2018/08/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation.html", "https://attack.mitre.org/groups/G0046/"], "tags": {"analytic_story": ["FIN7", "Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/fin7/fin7_macro_js_1/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Process name $process_name$ with commandline $process$ to execute jscript in $dest$", "mitre_attack_id": ["T1059", "T1059.007"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process_id", "Processes.process", "Processes.dest", "Processes.user"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "JavaScript/JScript"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT32", "FIN7", "Cobalt Group", "Molerats", "TA505", "Silence", "Leafminer"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "jscript_execution_using_cscript_app_filter"}]}, {"name": "Mailsniper Invoke functions", "id": "a36972c8-b894-11eb-9f78-acde48001122", "version": 1, "date": "2021-05-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect known mailsniper.ps1 functions executed in a machine. This technique was seen in some attacker to harvest some sensitive e-mail in a compromised exchange server.", "search": "`powershell` EventCode=4104 Message IN (\"*Invoke-GlobalO365MailSearch*\", \"*Invoke-GlobalMailSearch*\", \"*Invoke-SelfSearch*\", \"*Invoke-PasswordSprayOWA*\", \"*Invoke-PasswordSprayEWS*\",\"*Invoke-DomainHarvestOWA*\", \"*Invoke-UsernameHarvestOWA*\",\"*Invoke-OpenInboxFinder*\",\"*Invoke-InjectGEventAPI*\",\"*Invoke-InjectGEvent*\",\"*Invoke-SearchGmail*\", \"*Invoke-MonitorCredSniper*\", \"*Invoke-AddGmailRule*\",\"*Invoke-PasswordSprayEAS*\",\"*Invoke-UsernameHarvestEAS*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mailsniper_invoke_functions_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the powershell logs  from your endpoints. make sure you enable needed registry to monitor this event.", "known_false_positives": "unknown", "references": ["https://www.blackhillsinfosec.com/introducing-mailsniper-a-tool-for-searching-every-users-email-for-sensitive-data/"], "tags": {"analytic_story": ["Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/casper/datasets1/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "mailsniper.ps1 functions $Message$ executed on a $ComputerName$ by user $user$.", "mitre_attack_id": ["T1114", "T1114.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Email Collection", "Local Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["no", "Magic Hound", "APT1"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "mailsniper_invoke_functions_filter"}]}, {"name": "Creation of Shadow Copy", "id": "eb120f5f-b879-4a63-97c1-93352b5df844", "version": 1, "date": "2019-12-10", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Monitor for signs that Vssadmin or Wmic has been used to create a shadow copy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=vssadmin.exe Processes.process=*create* Processes.process=*shadow*) OR (Processes.process_name=wmic.exe Processes.process=*shadowcopy* Processes.process=*create*) by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `creation_of_shadow_copy_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints, to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Legitimate administrator usage of Vssadmin or Wmic will create false positives.", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.003/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to create a shadow copy to perform offline password cracking.", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "creation_of_shadow_copy_filter"}]}, {"name": "Potential Pass the Token or Hash Observed at the Destination Device", "id": "82e76b80-5cdb-4899-9b43-85dbe777b36d", "version": 3, "date": "2021-11-30", "author": "Stanislav Miskovic, Splunk", "type": "TTP", "datamodel": ["Authentication"], "description": "This detection identifies potential Pass the Token or Pass the Hash credential stealing. We detect the main side effect of these attacks, which is a transition from the dominant Kerberos logins to rare NTLM logins for a given user, as reported by a detination device.", "search": "| from read_ssa_enriched_events() | where \"Authentication\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), dest_user=lower(ucast(map_get(input_event, \"dest_user_primary_artifact\"), \"string\", null)), dest_user_id=   ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=       ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), signature_id=   lower(ucast(map_get(input_event, \"signature_id\"), \"string\", null)), authentication_method=  lower(ucast(map_get(input_event, \"authentication_method\"), \"string\", null)), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null)\n| where signature_id = \"4624\" AND (authentication_method=\"ntlmssp\" OR authentication_method=\"kerberos\") AND dest_user_id != null AND dest_device_id != null\n| eval isKerberos=if(authentication_method == \"kerberos\", 1, 0), isNtlm=if(authentication_method == \"ntlmssp\", 1, 0), timeNTLM=if(isNtlm > 0, timestamp, null)\n| stats sum(isKerberos) as totalKerberos, sum(isNtlm)     as totalNtlm, min(timestamp)  as startTime, min(timeNTLM)   as startNTLMTime, max(timestamp)  as endTime, max(timeNTLM)   as endNTLMTime by dest_user_id, dest_user, dest_device_id, span(timestamp, 86400s)\n| where NOT dest_user=\"-\" AND totalKerberos > 0 AND totalNtlm > 0 AND endTime - startTime > 1800000 AND (totalKerberos > 10 * totalNtlm AND totalKerberos > 50)  AND (endTime - startTime) > 3 * (endNTLMTime - startNTLMTime)\n| eval start_time=ucast(startNTLMTime, \"long\", null), end_time=ucast(endNTLMTime, \"long\", null), entities=mvappend(dest_user_id, dest_device_id), body=create_map([\"event_id\", event_id, \"total_kerberos\", totalKerberos, \"total_ntlm\", totalNtlm, \"analysis_start_time\", startTime, \"analysis_end_time\", endTime, \"pth_start_time\", startNTLMTime, \"pth_end_time\", endNTLMTime])\n| into write_ssa_detected_events();", "how_to_implement": "You must be ingesting Windows Security logs from endpoint devices, i.e., destinations of interest. Please make sure that event ID 4624 is being logged.", "known_false_positives": "Environments in which NTLM is used extremely rarely and for benign purposes (such as a rare use of SMB shares).", "references": ["https://attack.mitre.org/techniques/T1550/002/", "https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "asset_type": "Windows", "cis20": ["CIS 16", "CIS 20"], "confidence": 90, "context": ["Source:AD", "Source:Endpoint", "Stage:Credential Access", "Stage:Lateral Movement"], "impact": 80, "kill_chain_phases": ["Lateral Movement"], "message": "Potential lateral movement and credential stealing via Pass the Token or Pass the Hash techniques. Operation is performed via credentials of the account $dest_user_id$ and observed by the destination device $dest_device_id$", "mitre_attack_id": ["T1550", "T1550.002"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Other"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "signature_id", "dest_user", "dest_user_id", "dest_device_id", "authentication_method"], "risk_score": 72, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Use Alternate Authentication Material", "Pass the Hash"], "mitre_attack_tactics": ["Defense Evasion", "Lateral Movement", "Defense Evasion", "Lateral Movement"], "mitre_attack_groups": ["no", "Soft Cell", "APT32", "Night Dragon", "APT28", "APT1"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "potential_pass_the_token_or_hash_observed_at_the_destination_device_filter"}]}, {"name": "Possible Lateral Movement PowerShell Spawn", "id": "cb909b3e-512b-11ec-aa31-3e22fbd008af", "version": 1, "date": "2021-11-29", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic assists with identifying a PowerShell process spawned as a child or grand child process of commonly abused processes during lateral movement techniques including `services.exe`, `wmiprsve.exe`, `svchost.exe`, `wsmprovhost.exe` and `mmc.exe`. Legitimate Windows features such as the Service Control Manager, Windows Management Instrumentation, Task Scheduler, Windows Remote Management and the DCOM protocol can be abused to start a process on a remote endpoint. Looking for PowerShell spawned out of this processes may reveal a lateral movement attack. Red Teams and adversaries alike may abuse these services during a breach for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wmiprvse.exe OR Processes.parent_process_name=services.exe OR Processes.parent_process_name=svchost.exe OR Processes.parent_process_name=wsmprovhost.exe OR Processes.parent_process_name=mmc.exe) (Processes.process_name=powershell.exe OR (Processes.process_name=cmd.exe AND Processes.process=*powershell.exe*) OR Processes.process_name=pwsh.exe OR (Processes.process_name=cmd.exe AND Processes.process=*pwsh.exe*)) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `possible_lateral_movement_powershell_spawn_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Legitimate applications may spawn PowerShell as a child process of the the identified processes. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1021/003", "https://attack.mitre.org/techniques/T1021/006/", "https://attack.mitre.org/techniques/T1047/", "https://attack.mitre.org/techniques/T1053.005/", "https://attack.mitre.org/techniques/T1543/003/"], "tags": {"analytic_story": ["Active Directory Lateral Movement", "Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/lateral_movement_powershell/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement", "Malicious PowerShell"], "message": "A PowerShell process was spawned as a child process of typically abused processes on $dest$", "mitre_attack_id": ["T1021", "T1021.003", "T1021.006", "T1047", "T1053.005", "T1543.003", "T1059.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Distributed Component Object Model", "Windows Remote Management", "Windows Management Instrumentation", "Scheduled Task", "Windows Service", "PowerShell"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement", "Lateral Movement", "Execution", "Execution", "Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation", "Execution"], "mitre_attack_groups": ["no", "no", "Threat Group-3390", "Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda", "Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "possible_lateral_movement_powershell_spawn_filter"}]}, {"name": "Rundll32 DNSQuery", "id": "f1483f5e-ee29-11eb-9d23-acde48001122", "version": 1, "date": "2021-07-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious rundll32.exe process having a http connection and do a dns query in some web domain. This technique was seen in IcedID malware where the rundll32 that execute its payload will contact amazon.com to check internet connect and to communicate to its C&C server to download config and other file component.", "search": "`sysmon` EventCode=22 process_name=\"rundll32.exe\" | stats count min(_time) as firstTime max(_time) as lastTime by Image QueryName QueryStatus ProcessId direction Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_dnsquery_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and eventcode = 22 dnsquery executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "unknown", "references": ["https://any.run/malware-trends/icedid"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "rundll32 process $process_name$ having a dns query to $QueryName$ in host $Computer$", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "QueryName", "QueryStatus", "ProcessId", "direction", "Computer"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_dnsquery_filter"}]}, {"name": "Suspicious Event Log Service Behavior", "id": "2b85aa3d-f5f6-4c2e-a081-a09f6e1c2e40", "version": 1, "date": "2021-06-17", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes Windows Event ID 1100 to identify when Windows event log service is shutdown. Note that this is a voluminous analytic that will require tuning or restricted to specific endpoints based on criticality. This event generates every time Windows Event Log service has shut down. It also generates during normal system shutdown. During triage, based on time of day and user, determine if this was planned. If not planned, follow through with reviewing parallel alerts and other data sources to determine what else may have occurred.", "search": "(`wineventlog_security` EventCode=1100) | stats count min(_time) as firstTime max(_time) as lastTime by dest Message EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_event_log_service_behavior_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows event logs from your hosts. In addition, the Splunk Windows TA is needed.", "known_false_positives": "It is possible the Event Logging service gets shut down due to system errors or legitimately administration tasks. Filter as needed.", "references": ["https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-1100", "https://www.ired.team/offensive-security/defense-evasion/disabling-windows-event-logs-by-suspending-eventlog-service-threads", "https://attack.mitre.org/techniques/T1070/001/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1070.001/T1070.001.md"], "tags": {"analytic_story": ["Windows Log Manipulation", "Ransomware", "Clop Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 6"], "confidence": 30, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070.001/atomic_red_team/windows-security.log"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "The Windows Event Log Service shutdown on $ComputerName$", "mitre_attack_id": ["T1070", "T1070.001"], "nist": ["DE.DP", "PR.IP", "PR.AC", "PR.AT", "DE.AE"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "dest"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host", "Clear Windows Event Logs"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT41", "APT38", "Dragonfly 2.0", "APT32", "FIN8", "FIN5", "APT28"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_event_log_service_behavior_filter"}]}, {"name": "Malicious PowerShell Process - Execution Policy Bypass", "id": "9be56c82-b1cc-4318-87eb-d138afaaca39", "version": 5, "date": "2020-07-21", "author": "Rico Valdez, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for PowerShell processes started with parameters used to bypass the local execution policy for scripts. These parameters are often observed in attacks leveraging PowerShell scripts as they override the default PowerShell execution policy.", "search": "| tstats `security_content_summariesonly` values(Processes.process_id) as process_id, values(Processes.parent_process_id) as parent_process_id values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=\"* -ex*\" OR Processes.process=\"* bypass *\") by Processes.process_id, Processes.user, Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_powershell_process___execution_policy_bypass_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "There may be legitimate reasons to bypass the PowerShell execution policy. The PowerShell script being run with this parameter should be validated to ensure that it is legitimate.", "references": [], "tags": {"analytic_story": ["DHS Report TA18-074A", "HAFNIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 7", "CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/encoded_powershell/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "PowerShell local execution policy bypass attempt on $dest$", "mitre_attack_id": ["T1059", "T1059.001"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "malicious_powershell_process___execution_policy_bypass_filter"}]}, {"name": "GPUpdate with no Command Line Arguments with Network", "id": "2c853856-a140-11eb-a5b5-acde48001122", "version": 1, "date": "2021-04-19", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies gpupdate.exe with no command line arguments and with a network connection. It is unusual for gpupdate.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. gpupdate.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=gpupdate.exe by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(gpupdate\\.exe.{0,4}$)\" | join  process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port| `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process process_guid connection_to_CNC dest_port | `gpupdate_with_no_command_line_arguments_with_network_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited false positives may be present in small environments. Tuning may be required based on parent process.", "references": ["https://raw.githubusercontent.com/xx0hcd/Malleable-C2-Profiles/0ef8cf4556e26f6d4190c56ba697c2159faa5822/crimeware/trick_ryuk.profile", "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Execution", "Stage:Command And Control"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "Process gpupdate.exe  with parent_process $parent_process_name$ is executed on $dest$ by user $user$, followed by an outbound network connection to $connection_to_CNC$ on port $dest_port$. This behaviour is seen with cobaltstrike.", "mitre_attack_id": ["T1055"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Process Name", "role": ["Parent Process", "Attacker"]}, {"name": "connection_to_CNC", "type": "IP Address", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "process_name", "process_id", "parent_process_name", "dest_port", "process_path"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gpupdate_with_no_command_line_arguments_with_network_filter"}]}, {"name": "ETW Registry Disabled", "id": "8ed523ac-276b-11ec-ac39-acde48001122", "version": 1, "date": "2021-10-07", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a registry modification to disable ETW feature of windows. This technique is to evade EDR appliance to evade detections and hide its execution from audit logs.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=\"*\\\\SOFTWARE\\\\Microsoft\\\\.NETFramework*\") Registry.registry_value_name = ETWEnabled Registry.registry_value_data=0x00000000 by Registry.dest Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.registry_value_data | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `etw_registry_disabled_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "unknown", "references": ["https://gist.github.com/Cyb3rWard0g/a4a115fd3ab518a0e593525a379adee3"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127/etw_disable/sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1562.006", "T1127", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.registry_value_data"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Blocking", "Trusted Developer Utilities Proxy Execution", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "etw_registry_disabled_filter"}]}, {"name": "Windows Security Account Manager Stopped", "id": "69c12d59-d951-431e-ab77-ec426b8d65e6", "version": 1, "date": "2020-11-06", "author": "Rod Soto, Jose Hernandez, Splunk", "type": "TTP", "datamodel": [], "description": "The search looks for a Windows Security Account Manager (SAM) was stopped via command-line. This is consistent with Ryuk infections across a fleet of endpoints.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE (\"Processes.process_name\"=\"net*.exe\" \"Processes.process\"=\"*stop \\\"samss\\\"*\") BY \"Processes.dest\", \"Processes.user\", \"Processes.process\" | `drop_dm_object_name(Processes)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `windows_security_account_manager_stopped_filter`", "how_to_implement": "You must be ingesting data that records the process-system activity from your hosts to populate the Endpoint Processes data-model object. If you are using Sysmon, you will need a Splunk Universal Forwarder on each endpoint from which you want to collect data.", "known_false_positives": "SAM is a critical windows service, stopping it would cause major issues on an endpoint this makes false positive rare. AlthoughNo false positives have been identified.", "references": [], "tags": {"analytic_story": ["Ryuk Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ryuk/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Delivery"], "message": "The Windows Security Account Manager (SAM) was stopped via cli by $user$ on $dest$ by this command: $processs$", "mitre_attack_id": ["T1489"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Service Stop"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Lazarus Group"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_security_account_manager_stopped_filter"}]}, {"name": "Shim Database Installation With Suspicious Parameters", "id": "404620de-46d8-48b6-90cc-8a8d7b0876a3", "version": 4, "date": "2020-11-23", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects the process execution and arguments required to silently create a shim database.  The sdbinst.exe application is used to install shim database files (.sdb). A shim is a small library which transparently intercepts an API, changes the parameters passed, handles the operation itself, or redirects the operation elsewhere.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = sdbinst.exe by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `shim_database_installation_with_suspicious_parameters_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Windows Persistence Techniques"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 90, "context": ["source:endpoint", {"stage": "Privilege Escalation"}, "Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.011/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "A process $process_name$ that possible create a shim db silently in host $dest$", "mitre_attack_id": ["T1546.011", "T1546"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.user"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Application Shimming", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["FIN7", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "shim_database_installation_with_suspicious_parameters_filter"}]}, {"name": "High File Deletion Frequency", "id": "45b125c4-866f-11eb-a95a-acde48001122", "version": 1, "date": "2021-03-16", "author": "Teoderick Contreras", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search looks for high frequency of file deletion relative to process name and process id. These events usually happen when the ransomware tries to encrypt the files with the ransomware file extensions and sysmon treat the original files to be deleted as soon it was replace as encrypted data.", "search": "`sysmon` EventCode=23 TargetFilename IN (\"*\\.cmd\", \"*\\.ini\",\"*\\.gif\", \"*\\.jpg\", \"*\\.jpeg\", \"*\\.db\", \"*\\.ps1\", \"*\\.doc*\", \"*\\.xls*\", \"*\\.ppt*\", \"*\\.bmp\",\"*\\.zip\", \"*\\.rar\", \"*\\.7z\", \"*\\.chm\", \"*\\.png\", \"*\\.log\", \"*\\.vbs\", \"*\\.js\") | stats values(TargetFilename) as deleted_files min(_time) as firstTime max(_time) as lastTime count by Computer user EventCode Image ProcessID |where count >=100 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `high_file_deletion_frequency_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the deleted target file name, process name and process id  from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "user may delete bunch of pictures or files in a folder.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "High frequency file deletion activity detected on host $Computer$", "mitre_attack_id": ["T1485"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "deleted_files", "type": "File Name", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "TargetFilename", "Computer", "user", "Image", "ProcessID", "_time"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "high_file_deletion_frequency_filter"}]}, {"name": "Windows InstallUtil Uninstall Option", "id": "cfa7b9ac-43f0-11ec-9b48-acde48001122", "version": 1, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Windows InstallUtil.exe binary. This will execute code while bypassing application control using the `/u` (uninstall) switch. \\\nInstallUtil uses the functions install and uninstall within the System.Configuration.Install namespace to process .net assembly. Install function requires admin privileges, however, uninstall function can be run as an unprivileged user.\\\nWhen `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \\\nIf used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \\\nDuring triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (\"*/u*\", \"*uninstall*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_uninstall_option_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present. Filter as needed by parent process or application.", "references": ["https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_12", "https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/md/Installutil.exe.md", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md"], "tags": {"analytic_story": ["Signed Binary Proxy Execution InstallUtil"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.004/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ performing an uninstall.", "mitre_attack_id": ["T1218.004", "T1218"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["InstallUtil", "Signed Binary Proxy Execution"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=installutil.exe OR Processes.original_file_name=InstallUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_installutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_installutil_uninstall_option_filter"}]}, {"name": "Hunting for Log4Shell", "id": "158b68fa-5d1a-11ec-aac8-acde48001122", "version": 1, "date": "2021-12-14", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Web"], "description": "The following hunting query assists with quickly assessing CVE-2021-44228, or Log4Shell, activity mapped to the Web Datamodel. This is a combination query attempting to identify, score and dashboard. Because the Log4Shell vulnerability requires the string to be in the logs, this will work to identify the activity anywhere in the HTTP headers using _raw. Modify the first line to use the same pattern matching against other log sources. Scoring is based on a simple rubric of 0-5. 5 being the best match, and less than 5 meant to identify additional patterns that will equate to a higher total score. \\\nThe first jndi match identifies the standard pattern of `{jndi:` \\\njndi_fastmatch is meant to identify any jndi in the logs. The score is set low and is meant to be the \"base\" score used later. \\\njndi_proto is a protocol match that identifies `jndi` and one of `ldap, ldaps, rmi, dns, nis, iiop, corba, nds, http, https.` \\\nall_match is a very well written regex by https://gist.github.com/Schvenn that identifies nearly all patterns of this attack behavior. \\\nenv works to identify environment variables in the header, meant to capture `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and `env`. \\\nuri_detect is string match looking for the common uri paths currently being scanned/abused in the wild. \\\nkeywords matches on enumerated values that, like `$ctx:loginId`, that may be found in the header used by the adversary. \\\nlookup matching is meant to catch some basic obfuscation that has been identified using upper, lower and date. \\\nScoring will then occur based on any findings. The base score is meant to be 2 , created by jndi_fastmatch. Everything else is meant to increase that score. \\\nFinally, a simple table is created to show the scoring and the _raw field. Sort based on score or columns of interest.", "search": "| from datamodel Web.Web | eval jndi=if(match(_raw, \"(\\{|%7B)[jJnNdDiI]{4}:\"),4,0) | eval jndi_fastmatch=if(match(_raw, \"[jJnNdDiI]{4}\"),2,0) | eval jndi_proto=if(match(_raw,\"(?i)jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http|https):\"),5,0) | eval all_match = if(match(_raw, \"(?i)(%(25){0,}20|\\s)*(%(25){0,}24|\\$)(%(25){0,}20|\\s)*(%(25){0,}7B|{)(%(25){0,}20|\\s)*(%(25){0,}(6A|4A)|J)(%(25){0,}(6E|4E)|N)(%(25){0,}(64|44)|D)(%(25){0,}(69|49)|I)(%(25){0,}20|\\s)*(%(25){0,}3A|:)[\\w\\%]+(%(25){1,}3A|:)(%(25){1,}2F|\\/)[^\\n]+\"),5,0) | eval env_var = if(match(_raw, \"env:\") OR match(_raw, \"env:AWS_ACCESS_KEY_ID\") OR match(_raw, \"env:AWS_SECRET_ACCESS_KEY\"),5,0) | eval uridetect = if(match(_raw, \"(?i)Basic\\/Command\\/Base64|Basic\\/ReverseShell|Basic\\/TomcatMemshell|Basic\\/JBossMemshell|Basic\\/WebsphereMemshell|Basic\\/SpringMemshell|Basic\\/Command|Deserialization\\/CommonsCollectionsK|Deserialization\\/CommonsBeanutils|Deserialization\\/Jre8u20\\/TomcatMemshell|Deserialization\\/CVE_2020_2555\\/WeblogicMemshell|TomcatBypass|GroovyBypass|WebsphereBypass\"),4,0) | eval keywords = if(match(_raw,\"(?i)\\$\\{ctx\\:loginId\\}|\\$\\{map\\:type\\}|\\$\\{filename\\}|\\$\\{date\\:MM-dd-yyyy\\}|\\$\\{docker\\:containerId\\}|\\$\\{docker\\:containerName\\}|\\$\\{docker\\:imageName\\}|\\$\\{env\\:USER\\}|\\$\\{event\\:Marker\\}|\\$\\{mdc\\:UserId\\}|\\$\\{java\\:runtime\\}|\\$\\{java\\:vm\\}|\\$\\{java\\:os\\}|\\$\\{jndi\\:logging/context-name\\}|\\$\\{hostName\\}|\\$\\{docker\\:containerId\\}|\\$\\{k8s\\:accountName\\}|\\$\\{k8s\\:clusterName\\}|\\$\\{k8s\\:containerId\\}|\\$\\{k8s\\:containerName\\}|\\$\\{k8s\\:host\\}|\\$\\{k8s\\:labels.app\\}|\\$\\{k8s\\:labels.podTemplateHash\\}|\\$\\{k8s\\:masterUrl\\}|\\$\\{k8s\\:namespaceId\\}|\\$\\{k8s\\:namespaceName\\}|\\$\\{k8s\\:podId\\}|\\$\\{k8s\\:podIp\\}|\\$\\{k8s\\:podName\\}|\\$\\{k8s\\:imageId\\}|\\$\\{k8s\\:imageName\\}|\\$\\{log4j\\:configLocation\\}|\\$\\{log4j\\:configParentLocation\\}|\\$\\{spring\\:spring.application.name\\}|\\$\\{main\\:myString\\}|\\$\\{main\\:0\\}|\\$\\{main\\:1\\}|\\$\\{main\\:2\\}|\\$\\{main\\:3\\}|\\$\\{main\\:4\\}|\\$\\{main\\:bar\\}|\\$\\{name\\}|\\$\\{marker\\}|\\$\\{marker\\:name\\}|\\$\\{spring\\:profiles.active[0]|\\$\\{sys\\:logPath\\}|\\$\\{web\\:rootDir\\}|\\$\\{sys\\:user.name\\}\"),4,0) | eval obf = if(match(_raw, \"(\\$|%24)[^ /]*({|%7b)[^ /]*(j|%6a)[^ /]*(n|%6e)[^ /]*(d|%64)[^ /]*(i|%69)[^ /]*(:|%3a)[^ /]*(:|%3a)[^ /]*(/|%2f)\"),5,0) | eval lookups = if(match(_raw, \"date:\") OR match(_raw, \"upper:\") OR match(_raw, \"lower:\"),4,0) | addtotals fieldname=Score, jndi, jndi_proto, env_var, uridetect, all_match, jndi_fastmatch, keywords, obf, lookups | where Score > 2 | stats values(Score) by  jndi, jndi_proto, env_var, uridetect, all_match, jndi_fastmatch, keywords, lookups, obf, _raw | `hunting_for_log4shell_filter`", "how_to_implement": "Out of the box, the Web datamodel is required to be pre-filled. However, tested was performed against raw httpd access logs. Change the first line to any dataset to pass the regex's against.", "known_false_positives": "It is highly possible you will find false positives, however, the base score is set to 2 for _any_ jndi found in raw logs. tune and change as needed, include any filtering.", "references": ["https://gist.github.com/olafhartong/916ebc673ba066537740164f7e7e1d72", "https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b#gistcomment-3994449", "https://regex101.com/r/OSrm0q/1/", "https://github.com/Neo23x0/signature-base/blob/master/yara/expl_log4j_cve_2021_44228.yar", "https://news.sophos.com/en-us/2021/12/12/log4shell-hell-anatomy-of-an-exploit-outbreak/", "https://gist.github.com/MHaggis/1899b8554f38c8692a9fb0ceba60b44c", "https://twitter.com/sasi2103/status/1469764719850442760?s=20"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "asset_type": "Web Server", "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:network"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/java/log4shell-nginx.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Hunting for Log4Shell exploitation has occurred.", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "http_method", "type": "Other", "role": ["other"]}, {"name": "src", "type": "Other", "role": ["other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.http_method", "Web.url", "Web.url_length", "Web.src", "Web.dest", "Web.http_user_agent", "_raw"], "risk_score": 40, "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "hunting_for_log4shell_filter"}]}, {"name": "Suspicious writes to windows Recycle Bin", "id": "b5541828-8ffd-4070-9d95-b3da4de924cb", "version": 4, "date": "2020-07-22", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects writes to the recycle bin by a process other than explorer.exe.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.file_path) as file_path values(Filesystem.file_name) as file_name FROM datamodel=Endpoint.Filesystem where Filesystem.file_path = \"*$Recycle.Bin*\" by Filesystem.process_id Filesystem.dest | `drop_dm_object_name(\"Filesystem\")`| search [| tstats `security_content_summariesonly` values(Processes.user) as user values(Processes.process_name) as process_name values(Processes.parent_process_name) as parent_process_name FROM datamodel=Endpoint.Processes where Processes.process_name != \"explorer.exe\" by Processes.process_id Processes.dest| `drop_dm_object_name(\"Processes\")` | table process_id dest] | `suspicious_writes_to_windows_recycle_bin_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on filesystem and process logs responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `Filesystem` nodes.", "known_false_positives": "Because the Recycle Bin is a hidden folder in modern versions of Windows, it would be unusual for a process other than explorer.exe to write to it. Incidents should be investigated as appropriate.", "references": [], "tags": {"analytic_story": ["Collection and Staging"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036/write_to_recycle_bin/windows-sysmon.log"], "impact": 40, "message": "Suspicious writes to windows Recycle Bin process $Processes.process_name$", "mitre_attack_id": ["T1036"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_name", "type": "Process", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_path", "Filesystem.file_name", "Filesystem.process_id", "Filesystem.dest", "Processes.user", "Processes.process_name", "Processes.parent_process_name", "Processes.process_id", "Processes.dest"], "risk_score": 28, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_writes_to_windows_recycle_bin_filter"}]}, {"name": "Remote Process Instantiation via DCOM and PowerShell", "id": "d4f42098-4680-11ec-ad07-3e22fbd008af", "version": 1, "date": "2021-11-15", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with arguments utilized to start a process on a remote endpoint by abusing the DCOM protocol. Specifically, this search looks for the abuse of ShellExecute and ExecuteShellCommand. Red Teams and adversaries alike may abuse DCOM and `powershell.exe` for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=\"*Document.ActiveView.ExecuteShellCommand*\" OR Processes.process=\"*Document.Application.ShellExecute*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_dcom_and_powershell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may leverage DCOM to start a process on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://attack.mitre.org/techniques/T1021/003/", "https://www.cybereason.com/blog/dcom-lateral-movement-techniques"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1021.003/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $dest by abusing DCOM using PowerShell.exe", "mitre_attack_id": ["T1021", "T1021.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Remote Services", "Distributed Component Object Model"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_dcom_and_powershell_filter"}]}, {"name": "Remote System Discovery with Dsquery", "id": "9fb562f4-42f8-4139-8e11-a82edf7ed718", "version": 1, "date": "2021-08-31", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to discover remote systems. The `computer` argument returns a list of all computers registered in the domain. Red Teams and adversaries alike engage in remote system discovery for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"dsquery.exe\") (Processes.process=\"*computer*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_dsquery_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc732952(v=ws.11)"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_system_discovery_with_dsquery_filter"}]}, {"name": "Clop Common Exec Parameter", "id": "5a8a2a72-8322-11eb-9ee9-acde48001122", "version": 1, "date": "2021-03-17", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytics are designed to identifies some CLOP ransomware variant that using arguments to execute its main code or feature of its code. In this variant if the parameter is \"runrun\", CLOP ransomware will try to encrypt files in network shares and if it is \"temp.dat\", it will try to read from some stream pipe or file start encrypting files within the infected local machines. This technique can be also identified as an anti-sandbox technique to make its code non-responsive since it is waiting for some parameter to execute properly.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as cmdline values(Processes.parent_process_name) as parent_process values(Processes.process_name) count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name != \"*temp.dat*\" Processes.process = \"*runrun*\" OR Processes.process = \"*temp.dat*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clop_common_exec_parameter_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Operators can execute third party tools using these parameters.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_b/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Obfuscation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting using arguments to execute its main code or feature of its code related to Clop ransomware.", "mitre_attack_id": ["T1204"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 100, "security_domain": "endpoint", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "clop_common_exec_parameter_filter"}]}, {"name": "Delete A Net User", "id": "8776d79c-d26e-11eb-9a56-acde48001122", "version": 3, "date": "2021-11-30", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "This analytic will detect a suspicious net.exe/net1.exe command-line to delete a user on a system. This technique may be use by an administrator for legitimate purposes, however this behavior has been used in the wild to impair some user or deleting adversaries tracks created during its lateral movement additional systems. During triage, review parallel processes for additional behavior. Identify any other user accounts created before or after.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"), \"string\", null)), process_name=lower(ucast(map_get(input_event, \"process_name\"), \"string\", null)), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null) | where cmd_line IS NOT NULL AND like(cmd_line, \"%/delete%\") AND (process_name=\"net1.exe\" OR process_name=\"net.exe\") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)), body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed net.exe may be used.", "known_false_positives": "System administrators or scripts may delete user accounts via this technique. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "cis20": ["CIS 4", "CIS 16"], "confidence": 70, "context": ["Source:Endpoint", "stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/ransomware_ttp/ssa_data1/net_user_del.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1531/atomic_red_team/security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ attempting to delete a user account.", "mitre_attack_id": ["T1531"], "nist": ["PR.AC", "PR.IP"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 49, "risk_severity": "high", "security_domain": "endpoint", "mitre_attack_technique": ["Account Access Removal"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "delete_a_net_user_filter"}]}, {"name": "Multiple Users Failing To Authenticate From Process", "id": "9015385a-9c84-11eb-bef2-acde48001122", "version": 1, "date": "2021-04-13", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies a source process name failing to authenticate with multiple users. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4625 generates on domain controllers, member servers, and workstations when an account fails to logon. Logon Type 2 describes an iteractive logon attempt.\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will trigger on the potenfially malicious host, perhaps controlled via a trojan or operated by an insider threat, from where a password spraying attack is being executed. This could be a domain controller as well as a member server or workstation.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source process name, source account and attempted user accounts.", "search": " `wineventlog_security` EventCode=4625 Logon_Type=2 Caller_Process_Name!=\"-\" | bucket span=2m _time | eval Source_Account = mvindex(Account_Name, 0) | eval Destination_Account = mvindex(Account_Name, 1) | stats dc(Destination_Account) AS unique_accounts values(Account_Name) as tried_accounts by _time, Caller_Process_Name, Source_Account, ComputerName | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Caller_Process_Name, Source_Account, ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_process_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Event Logs from domain controllers aas well as member servers and workstations. The Advanced Security Audit policy setting `Audit Logon` within `Logon/Logoff` needs to be enabled.", "known_false_positives": "A process failing to authenticate with multiple users is not a common behavior for legitimate user sessions. Possible false positive scenarios include but are not limited to vulnerability scanners and missconfigured systems.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4625", "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4625", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_multiple_users_from_process/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential password spraying attack from $ComputerName$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Logon_Type", "Caller_Process_Name", "Security_ID", "Account_Name", "ComputerName"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_users_failing_to_authenticate_from_process_filter"}]}, {"name": "PetitPotam Suspicious Kerberos TGT Request", "id": "e3ef244e-0a67-11ec-abf2-acde48001122", "version": 1, "date": "2021-08-31", "author": "Michael Haag, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifes Event Code 4768, A `Kerberos authentication ticket (TGT) was requested`, successfull occurs. This behavior has been identified to assist with detecting PetitPotam, CVE-2021-36942. Once an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes. One way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus. This request will generate a 4768 event with some unusual fields depending on the environment. This analytic will require tuning, we recommend filtering Account_Name to Domain Controllers for your environment.", "search": "`wineventlog_security` EventCode=4768 Client_Address!=\"::1\" Certificate_Thumbprint!=\"\" Account_Name=*$ | stats count min(_time) as firstTime max(_time) as lastTime by dest, Account_Name, Client_Address, action, Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `petitpotam_suspicious_kerberos_tgt_request_filter`", "how_to_implement": "The following analytic requires Event Code 4768. Ensure that it is logging no Domain Controllers and appearing in Splunk.", "known_false_positives": "False positives are possible if the environment is using certificates for authentication.", "references": ["https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=4768", "https://isc.sans.edu/forums/diary/Active+Directory+Certificate+Services+ADCS+PKI+domain+admin+vulnerability/27668/"], "tags": {"analytic_story": ["PetitPotam NTLM Relay on Active Directory Certificate Services"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Credential Access"], "cve": ["CVE-2021-36942"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1187/petitpotam/windows-security.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Lateral Movement"], "message": "A Kerberos TGT was requested in a non-standard manner against $dest$, potentially related to CVE-2021-36942, PetitPotam.", "mitre_attack_id": ["T1003"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Account_Name", "Client_Address", "action", "Message"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "petitpotam_suspicious_kerberos_tgt_request_filter"}]}, {"name": "GetWmiObject User Account with PowerShell Script Block", "id": "640b0eda-0429-11ec-accd-acde48001122", "version": 1, "date": "2021-08-23", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet used with specific parameters. The `Win32_UserAccount` parameter is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message=\"*Get-WmiObject*\" AND Message=\"*Win32_UserAccount*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getwmiobject_user_account_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1087/001/"], "tags": {"analytic_story": ["Active Directory Discovery"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1087.001/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Local user discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1087", "T1087.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Account Discovery", "Local Account"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["no", "Turla", "Poseidon Group", "OilRig", "Ke3chang", "APT32", "APT1", "Threat Group-3390", "APT3", "admin@338"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_user_account_with_powershell_script_block_filter"}]}, {"name": "Disable UAC Remote Restriction", "id": "9928b732-210e-11ec-b65e-acde48001122", "version": 1, "date": "2021-09-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification of registry to disable UAC remote restriction. This technique was well documented in Microsoft page where attacker may modify this registry value to bypassed UAC feature of windows host. This is a good indicator that some tries to bypassed UAC to suspicious process or gain privilege escalation.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =\"*\\\\CurrentVersion\\\\Policies\\\\System*\" Registry.registry_value_name=\"LocalAccountTokenFilterPolicy\" Registry.registry_value_data=\"0x00000001\" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.registry_value_data | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `disable_uac_remote_restriction_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "admin may set this policy for non-critical machine.", "references": ["https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/user-account-control-and-remote-restriction"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics", "Suspicious Windows Registry Activities"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/LocalAccountTokenFilterPolicy/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name", "Registry.registry_value_data"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_uac_remote_restriction_filter"}]}, {"name": "MSHTML Module Load in Office Product", "id": "5f1c168e-118b-11ec-84ff-acde48001122", "version": 1, "date": "2021-09-09", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the module load of mshtml.dll into an Office product. This behavior has been related to CVE-2021-40444, whereas the malicious document will load ActiveX, which activates the MSHTML component. The vulnerability resides in the MSHTML component. During triage, identify parallel processes and capture any file modifications for analysis.", "search": "`sysmon` EventID=7  process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\",\"wordpad.exe\",\"wordview.exe\") ImageLoaded IN (\"*\\\\mshtml.dll\", \"*\\\\Microsoft.mshtml.dll\",\"*\\\\IE.Interop.MSHTML.dll\",\"*\\\\MshtmlDac.dll\",\"*\\\\MshtmlDed.dll\",\"*\\\\MshtmlDer.dll\") | stats count min(_time) as firstTime max(_time) as lastTime by Computer, process_name, ImageLoaded, OriginalFileName, process_id | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mshtml_module_load_in_office_product_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process names and image loads from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Limited false positives will be present, however, tune as necessary.", "references": ["https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://strontic.github.io/xcyclopedia/index-dll"], "tags": {"analytic_story": ["Spearphishing Attachments", "Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_mshtml.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $process_name$ was identified on endpoint $dest$ loading mshtml.dll.", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "ImageLoaded", "process_name", "OriginalFileName", "process_id", "dest"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "mshtml_module_load_in_office_product_filter"}]}, {"name": "Disable Defender AntiVirus Registry", "id": "aa4f695a-3024-11ec-9987-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\Policies\\\\Microsoft\\\\Windows Defender*\" Registry.registry_value_name = DisableAntiVirus Registry.registry_value_data = 0x00000001 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_antivirus_registry_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_antivirus_registry_filter"}]}, {"name": "Office Product Spawning MSHTA", "id": "6078fa20-a6d2-11eb-b662-acde48001122", "version": 2, "date": "2021-04-26", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `mshta.exe`. In malicious instances, the command-line of `mshta.exe` will contain the `hta` file locally, or a URL to the remote destination. In addition, Threat Research has released a detections identifying suspicious use of `mshta.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `mshta.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") `process_mshta` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_mshta_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "No false positives known. Filter as needed.", "references": ["https://redcanary.com/threat-detection-report/threats/TA551/"], "tags": {"analytic_story": ["Spearphishing Attachments", "IcedID"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_macros.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "office parent process $parent_process_name$ will execute a suspicious child process $process_name$ with process id $process_id$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process_name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "(Processes.process_name=mshta.exe OR Processes.original_file_name=MSHTA.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_mshta"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawning_mshta_filter"}]}, {"name": "Office Product Spawning Wmic", "id": "ffc236d6-a6c9-11eb-95f1-acde48001122", "version": 3, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the latest behavior utilized by Ursnif malware family. This detection identifies any Windows Office Product spawning `wmic.exe`. In malicious instances, the command-line of `wmic.exe` will contain `wmic process call create`. In addition, Threat Research has released a detection identifying the use of `wmic process call create` on the command-line of `wmic.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `wmic.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") `process_wmic` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_wmic_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "No false positives known. Filter as needed.", "references": ["https://app.any.run/tasks/fb894ab8-a966-4b72-920b-935f41756afd/", "https://attack.mitre.org/techniques/T1047/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/T1047.md"], "tags": {"analytic_story": ["Spearphishing Attachments", "FIN7"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_macros.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "office parent process $parent_process_name$ will execute a suspicious child process $process_name$ with process id $process_id$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process_name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=wmic.exe OR Processes.original_file_name=wmic.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_wmic"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawning_wmic_filter"}]}, {"name": "Access LSASS Memory for Dump Creation", "id": "fb4c31b0-13e8-4155-8aa5-24de4b8d6717", "version": 2, "date": "2019-12-06", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "Detect memory dumping of the LSASS process.", "search": "`sysmon` EventCode=10 TargetImage=*lsass.exe CallTrace=*dbgcore.dll* OR CallTrace=*dbghelp.dll* | stats count min(_time) as firstTime max(_time) as lastTime by Computer, TargetImage, TargetProcessId, SourceImage, SourceProcessId | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `access_lsass_memory_for_dump_creation_filter` ", "how_to_implement": "This search requires Sysmon Logs and a Sysmon configuration, which includes EventCode 10 for lsass.exe. This search uses an input macro named `sysmon`. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Sysmon logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "Administrators can create memory dumps for debugging purposes, but memory dumps of the LSASS process would be unusual.", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 6", "CIS 8"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "process $SourceImage$ injected into $TargetImage$ and was attempted dump LSASS on $dest$. Adversaries tend to do this when trying to accesss credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS).", "mitre_attack_id": ["T1003.001", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "TargetImage", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "TargetImage", "CallTrace", "Computer", "TargetProcessId", "SourceImage", "SourceProcessId"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["LSASS Memory", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Blue Mockingbird", "Silence", "Threat Group-3390", "Leviathan", "APT41", "Soft Cell", "TEMP.Veles", "APT33", "APT39", "Stolen Pencil", "APT32", "Lazarus Group", "Leafminer", "Magic Hound", "MuddyWater", "PLATINUM", "FIN8", "BRONZE BUTLER", "OilRig", "FIN6", "APT3", "APT28", "APT1", "Ke3chang", "Cleaver", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "access_lsass_memory_for_dump_creation_filter"}]}, {"name": "ICACLS Grant Command", "id": "b1b1e316-accc-11eb-a9b4-acde48001122", "version": 1, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies potential adversaries that modify the security permission of a specific file or directory. This technique is commonly seen in APT tradecraft and coinminer scripts to evade detections and restrict access to their component files.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"icacls.exe\" OR Processes.process_name = \"cacls.exe\" OR Processes.process_name = \"xcacls.exe\" AND Processes.process = \"*/grant*\" by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icacls_grant_command_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed icacls.exe may be used.", "known_false_positives": "Unknown. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig", "Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Process name $process_name$ with grant argument executed by $user$ to change security permission of a specific file or directory on host $dest$", "mitre_attack_id": ["T1222"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.process_name", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["File and Directory Permissions Modification"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "icacls_grant_command_filter"}]}, {"name": "Powershell Using memory As Backing Store", "id": "c396a0c4-c9f2-11eb-b4f5-acde48001122", "version": 1, "date": "2021-06-10", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is using memory stream as new object backstore. The malicious PowerShell script will contain stream flate data and will be decompressed in memory to run or drop the actual payload. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 Message = \"*New-Object IO.MemoryStream*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_using_memory_as_backing_store_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "powershell may used this function to store out object into memory.", "references": ["https://www.carbonblack.com/blog/decoding-malicious-powershell-streams/", "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains memorystream command in $Message$ as new object backstore with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1140"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Deobfuscate/Decode Files or Information"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "Gamaredon Group", "Molerats", "Frankenstein", "Turla", "WIRTE", "Darkhotel", "Tropic Trooper", "menuPass", "Honeybee", "Threat Group-3390", "APT19", "Gorgon Group", "Leviathan", "MuddyWater", "APT28", "OilRig", "BRONZE BUTLER"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_using_memory_as_backing_store_filter"}]}, {"name": "Elevated Group Discovery with PowerView", "id": "10d62950-0de5-4199-a710-cff9ea79b413", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainGroupMember` commandlet. `Get-DomainGroupMember` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. As the name suggests, `Get-DomainGroupMember` is used to list the members of an specific domain group. Red Teams and adversaries alike use PowerView to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.", "search": "`powershell` EventCode=4104 (Message = \"*Get-DomainGroupMember*\") AND Message IN (\"*Domain Admins*\",\"*Enterprise Admins*\", \"*Schema Admins*\", \"*Account Operators*\" , \"*Server Operators*\", \"*Protected Users*\",  \"*Dns Admins*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `elevated_group_discovery_with_powerview_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerView for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1069/002/", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainGroupMember/", "https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-b--privileged-accounts-and-groups-in-active-directory", "https://attack.mitre.org/techniques/T1069/002/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Elevated group discovery using PowerView on $dest$ by $user$", "mitre_attack_id": ["T1069", "T1069.002"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Permission Groups Discovery", "Domain Groups"], "mitre_attack_tactics": ["Discovery", "Discovery"], "mitre_attack_groups": ["TA505", "APT3", "Turla", "Wizard Spider", "Inception", "OilRig", "FIN6", "Dragonfly 2.0", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "elevated_group_discovery_with_powerview_filter"}]}, {"name": "Detect Regsvcs with No Command Line Arguments", "id": "6b74d578-a02e-4e94-a0d1-39440d0bf254", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies regsvcs.exe with no command line arguments. This particular behavior occurs when another process injects into regsvcs.exe, no command line arguments will be present. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Regasm.exe are natively found in C:\\Windows\\Microsoft.NET\\Framework\\v*\\regasm|regsvcs.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v*\\regasm|regsvcs.exe.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_regsvcs` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(regsvcs\\.exe.{0,4}$)\"| `detect_regsvcs_with_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, limited instances of regsvcs.exe may cause a false positive. Filter based endpoint usage, command line arguments, or process lineage.", "references": ["https://attack.mitre.org/techniques/T1218/009/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.009/T1218.009.md", "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/"], "tags": {"analytic_story": ["Suspicious Regsvcs Regasm Activity"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.009/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "The process $process_name$ was spawned by $parent_process_name$ without any command-line arguments on $dest$ by $user$.", "mitre_attack_id": ["T1218", "T1218.009"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvcs/Regasm"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvcs.exe OR Processes.original_file_name=RegSvcs.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvcs"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_regsvcs_with_no_command_line_arguments_filter"}]}, {"name": "Windows Service Initiation on Remote Endpoint", "id": "3f519894-4276-11ec-ab02-3e22fbd008af", "version": 1, "date": "2021-11-10", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `sc.exe` with command-line arguments utilized to start a Windows Service on a remote endpoint. Red Teams and adversaries alike may abuse the Service Control Manager for lateral movement and remote code execution.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sc.exe OR Processes.original_file_name=sc.exe) (Processes.process=*\\\\\\\\* AND Processes.process=*start*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_service_initiation_on_remote_endpoint_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints.", "known_false_positives": "Administrators may start Windows Services on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://docs.microsoft.com/en-us/windows/win32/services/controlling-a-service-using-sc", "https://attack.mitre.org/techniques/T1543/003/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1543.003/lateral_movement/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A Windows Service was started on a remote endpoint from $dest", "mitre_attack_id": ["T1543", "T1543.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_service_initiation_on_remote_endpoint_filter"}]}, {"name": "DLLHost with no Command Line Arguments with Network", "id": "f1c07594-a141-11eb-8407-acde48001122", "version": 2, "date": "2021-10-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies DLLHost.exe with no command line arguments with a network connection. It is unusual for DLLHost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. DLLHost.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=dllhost.exe by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(dllhost\\.exe.{0,4}$)\" | join  process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port | `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process process_guid connection_to_CNC dest_port | `dllhost_with_no_command_line_arguments_with_network_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `port` node.", "known_false_positives": "Although unlikely, some legitimate third party applications may use a moved copy of dllhost, triggering a false positive.", "references": ["https://raw.githubusercontent.com/threatexpress/malleable-c2/c3385e481159a759f79b8acfe11acf240893b830/jquery-c2.4.2.profile", "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon_dllhost.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "The process $process_name$ was spawned by $parent_image$ without any command-line arguments on $dest$ by $user$.", "mitre_attack_id": ["T1055"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_image", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventID", "process_name", "process_id", "parent_process_name", "dest_port", "process_path"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dllhost_with_no_command_line_arguments_with_network_filter"}]}, {"name": "Registry Keys Used For Privilege Escalation", "id": "c9f4b923-f8af-4155-b697-1354f5bcbc5e", "version": 4, "date": "2020-11-27", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for modifications to registry keys that can be used to elevate privileges. The registry keys under \"Image File Execution Options\" are used to intercept calls to an executable and can be used to attach malicious binaries to benign system binaries.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=\"*Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options*\") AND (Registry.registry_value_name=GlobalFlag OR Registry.registry_value_name=Debugger) by Registry.dest  Registry.user Registry.registry_path Registry.registry_value_name | `security_content_ctime(lastTime)`  | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `registry_keys_used_for_privilege_escalation_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "There are many legitimate applications that must execute upon system startup and will use these registry keys to accomplish that task.", "references": ["https://blog.malwarebytes.com/101/2015/12/an-introduction-to-image-file-execution-options/"], "tags": {"analytic_story": ["Windows Privilege Escalation", "Suspicious Windows Registry Activities", "Cloud Federated Credential Abuse"], "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 95, "context": ["source:endpoint", {"stage": "Persistence"}, "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.012/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "A registry activity in $registry_path$ related to privilege escalation in host $dest$", "mitre_attack_id": ["T1546.012", "T1546"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.dest", "Registry.user"], "risk_score": 76, "security_domain": "endpoint", "mitre_attack_technique": ["Image File Execution Options Injection", "Event Triggered Execution"], "mitre_attack_tactics": ["Privilege Escalation", "Persistence", "Privilege Escalation", "Persistence"], "mitre_attack_groups": ["TEMP.Veles", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "registry_keys_used_for_privilege_escalation_filter"}]}, {"name": "Rundll32 Control RunDLL Hunt", "id": "c8e7ced0-10c5-11ec-8b03-acde48001122", "version": 1, "date": "2021-09-08", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting detection identifies rundll32.exe with `control_rundll` within the command-line, loading a .cpl or another file type. Developed in relation to CVE-2021-40444. Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \\ This is written to be a bit more broad by not including .cpl. \\ During triage, review parallel processes to identify any further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE) Processes.process=*Control_RunDLL*  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_control_rundll_hunt_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "This is a hunting detection, meant to provide a understanding of how voluminous control_rundll is within the environment.", "references": ["https://strontic.github.io/xcyclopedia/library/rundll32.exe-111474C61232202B5B588D2B512CBB25.html", "https://app.any.run/tasks/36c14029-9df8-439c-bba0-45f2643b0c70/", "https://attack.mitre.org/techniques/T1218/011/", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.002/T1218.002.yaml"], "tags": {"analytic_story": ["Suspicious Rundll32 Activity", "Microsoft MSHTML Remote Code Execution CVE-2021-40444"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-40444"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.002/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to load a suspicious file from disk.", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "rundll32_control_rundll_hunt_filter"}]}, {"name": "Detect Copy of ShadowCopy with Script Block Logging", "id": "9251299c-ea5b-11eb-a8de-acde48001122", "version": 1, "date": "2021-07-21", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies `copy` or `[System.IO.File]::Copy` being used to capture the SAM, SYSTEM or SECURITY hives identified in script block. This will catch the most basic use cases for credentials being taken for offline cracking. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message IN (\"*copy*\",\"*[System.IO.File]::Copy*\") AND Message IN (\"*System32\\\\config\\\\SAM*\", \"*System32\\\\config\\\\SYSTEM*\",\"*System32\\\\config\\\\SECURITY*\") | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_copy_of_shadowcopy_with_script_block_logging_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Limited false positives as the scope is limited to SAM, SYSTEM and SECURITY hives.", "references": ["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36934", "https://github.com/GossiTheDog/HiveNightmare", "https://github.com/JumpsecLabs/Guidance-Advice/tree/main/SAM_Permissions"], "tags": {"analytic_story": ["Credential Dumping"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-36934"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.002/serioussam/windows-powershell.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "PowerShell was identified running a script to capture the SAM hive on endpoint $ComputerName$ by user $user$.", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_copy_of_shadowcopy_with_script_block_logging_filter"}]}, {"name": "Multiple Invalid Users Failing To Authenticate From Host Using NTLM", "id": "57ad5a64-9df7-11eb-a290-acde48001122", "version": 1, "date": "2021-04-15", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies one source endpoint failing to authenticate with multiple invalid users using the NTLM protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using NTLM to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack using an invalid list of users. Event 4776 is generated on the computer that is authoritative for the provided credentials. For domain accounts, the domain controller is authoritative. For local accounts, the local computer is authoritative. Error code 0xC0000064 stands for `The username you typed does not exist` (the attempted user is a legitimate domain user).\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will only trigger on domain controllers, not on member servers or workstations.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source workstation name and attempted user accounts.", "search": " `wineventlog_security` EventCode=4776 Logon_Account!=\"*$\" 0xC0000064 action=failure | bucket span=2m _time | stats dc(Logon_Account) AS unique_accounts values(Logon_Account) as tried_accounts by _time, Source_Workstation | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Workstation | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_invalid_users_failing_to_authenticate_from_host_using_ntlm_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller events. The Advanced Security Audit policy setting `Audit Credential Validation' within `Account Logon` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple invalid domain users is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners and missconfigured systems. If this detection triggers on a host other than a Domain Controller, the behavior could represent a password spraying attack against the host's local accounts.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-credential-validation", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4776"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_invalid_users_ntlm/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential NTLM based password spraying attack from $Source_Workstation$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "Source_Workstation", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "action", "Logon_Account", "Source_Workstation"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_invalid_users_failing_to_authenticate_from_host_using_ntlm_filter"}]}, {"name": "Ryuk Wake on LAN Command", "id": "538d0152-7aaa-11eb-beaa-acde48001122", "version": 1, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This Splunk query identifies the use of Wake-on-LAN utilized by Ryuk ransomware. The Ryuk Ransomware uses the Wake-on-Lan feature to turn on powered off devices on a compromised network to have greater success encrypting them. This is a high fidelity indicator of Ryuk ransomware executing on an endpoint. Upon triage, isolate the endpoint. Additional file modification events will be within the users profile (\\appdata\\roaming) and in public directories (users\\public\\). Review all Scheduled Tasks on the isolated endpoint and across the fleet. Suspicious Scheduled Tasks will include a path to a unknown binary and those endpoints should be isolated until triaged.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=\"*8 LAN*\" OR Processes.process=\"*9 REP*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `ryuk_wake_on_lan_command_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Limited to no known false positives.", "references": ["https://www.bleepingcomputer.com/news/security/ryuk-ransomware-uses-wake-on-lan-to-encrypt-offline-devices/", "https://www.bleepingcomputer.com/news/security/ryuk-ransomware-now-self-spreads-to-other-windows-lan-devices/", "https://www.cert.ssi.gouv.fr/uploads/CERTFR-2021-CTI-006.pdf"], "tags": {"analytic_story": ["Ryuk Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Execution"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.003/ryuk/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation", "Lateral Movement"], "message": "A process $process_name$ with wake on LAN commandline $process$ in host $dest$", "mitre_attack_id": ["T1059", "T1059.003"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Windows Command Shell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "TA505", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "OilRig", "Lazarus Group", "Honeybee", "Cobalt Group", "FIN7", "APT41", "Soft Cell", "Turla", "Silence", "APT32", "APT39", "Darkhotel", "MuddyWater", "APT18", "APT38", "Dark Caracal", "Gorgon Group", "Dragonfly 2.0", "Rancor", "Ke3chang", "APT37", "Leviathan", "FIN8", "APT28", "Magic Hound", "Sowbug", "BRONZE BUTLER", "FIN10", "Threat Group-3390", "menuPass", "Gamaredon Group", "Suckfly", "Patchwork", "Threat Group-1314", "APT3", "admin@338", "APT1"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ryuk_wake_on_lan_command_filter"}]}, {"name": "Excessive number of service control start as disabled", "id": "77592bec-d5cc-11eb-9e60-acde48001122", "version": 1, "date": "2021-06-25", "author": "Michael Hart, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This detection targets behaviors observed when threat actors have used sc.exe to modify services. We observed malware in a honey pot spawning numerous sc.exe processes in a short period of time, presumably to impair defenses, possibly to block others from compromising the same machine.  This detection will alert when we see both an excessive number of sc.exe processes launched with specific commandline arguments to disable the start of certain services.", "search": "| tstats `security_content_summariesonly` distinct_count(Processes.process) as distinct_cmdlines values(Processes.process_id) as process_ids min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name = \"sc.exe\" AND Processes.process=\"*start= disabled*\" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.parent_process_id, _time span=30m | where distinct_cmdlines >= 8 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_number_of_service_control_start_as_disabled_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must be ingesting logs with both the process name and command line from your endpoints. The complete process name with command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Legitimate programs and administrators will execute sc.exe with the start disabled flag.  It is possible, but unlikely from the telemetry of normal Windows operation we observed, that sc.exe will be called more than seven times in a short period of time.", "references": ["https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create", "https://attack.mitre.org/techniques/T1562/001/"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/sc_service_start_disabled/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An excessive amount of $process_name$ was executed on $dest$ attempting to disable services.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_number_of_service_control_start_as_disabled_filter"}]}, {"name": "Powershell Fileless Script Contains Base64 Encoded Content", "id": "8acbc04c-c882-11eb-b060-acde48001122", "version": 1, "date": "2021-06-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \\\nThis analytic identifies `FromBase64String` within the script block. A typical malicious instance will include additional code. \\\nCommand example - `[Byte[]]$var_code = [System.Convert]::FromBase64String(38uqIyMjQ6rG....` \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message=*frombase64string* | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_fileless_script_contains_base64_encoded_content_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "False positives should be limited. Filter as needed.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 70, "kill_chain_phases": ["Exploitation", "Privilege Escalation"], "message": "A suspicious powershell script contains base64 command in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1059", "T1027", "T1059.001"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Obfuscated Files or Information", "PowerShell"], "mitre_attack_tactics": ["Execution", "Defense Evasion", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Gamaredon Group", "Rocke", "Sandworm Team", "Blue Mockingbird", "Whitefly", "Molerats", "Wizard Spider", "Mofang", "Frankenstein", "Inception", "APT-C-36", "APT41", "Machete", "Soft Cell", "Turla", "TA505", "Silence", "APT33", "Night Dragon", "Darkhotel", "Gallmaker", "APT29", "APT18", "Tropic Trooper", "Cobalt Group", "Patchwork", "Leafminer", "APT37", "Threat Group-3390", "Honeybee", "Dark Caracal", "menuPass", "APT19", "BlackOasis", "FIN8", "Leviathan", "Elderwood", "MuddyWater", "FIN7", "Magic Hound", "OilRig", "APT3", "APT32", "Group5", "Dust Storm", "Lazarus Group", "Putter Panda", "APT28", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_fileless_script_contains_base64_encoded_content_filter"}]}, {"name": "Detect Exchange Web Shell", "id": "8c14eeee-2af1-4a4b-bda8-228da0f4862a", "version": 3, "date": "2021-10-05", "author": "Michael Haag, Shannon Davis, David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following query identifies suspicious .aspx created in 3 paths identified by Microsoft as known drop locations for Exchange exploitation related to HAFNIUM group and recently disclosed vulnerablity named ProxyShell. Paths include: `\\HttpProxy\\owa\\auth\\`, `\\inetpub\\wwwroot\\aspnet_client\\`, and `\\HttpProxy\\OAB\\`. Upon triage, the suspicious .aspx file will likely look obvious on the surface. inspect the contents for script code inside. Identify additional log sources, IIS included, to review source and other potential exploitation. It is often the case that a particular threat is only applicable to a specific subset of systems in your environment. Typically analytics to detect those threats are written without the benefit of being able to only target those systems as well. Writing analytics against all systems when those behaviors are limited to identifiable subsets of those systems is suboptimal. Consider the case ProxyShell vulnerability on Microsoft Exchange Servers. With asset information, a hunter can limit their analytics to systems that have been identified as Exchange servers. A hunter may start with the theory that the exchange server is communicating with new systems that it has not previously. If this theory is run against all publicly facing systems, the amount of noise it will generate will likely render this theory untenable. However, using the asset information to limit this analytic to just the Exchange servers will reduce the noise allowing the hunter to focus only on the systems where this behavioral change is relevant.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=System  by _time span=1h Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (\"*\\\\HttpProxy\\\\owa\\\\auth\\\\*\", \"*\\\\inetpub\\\\wwwroot\\\\aspnet_client\\\\*\", \"*\\\\HttpProxy\\\\OAB\\\\*\") Filesystem.file_name=\"*.aspx\" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name | `detect_exchange_web_shell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node and `Filesystem` node.", "known_false_positives": "The query is structured in a way that `action` (read, create) is not defined. Review the results of this query, filter, and tune as necessary. It may be necessary to generate this query specific to your endpoint product.", "references": ["https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/MSTICIoCs-ExchangeServerVulnerabilitiesDisclosedMarch2021.csv", "https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell", "https://www.youtube.com/watch?v=FC6iHw258RI", "https://www.huntress.com/blog/rapid-response-microsoft-exchange-servers-still-vulnerable-to-proxyshell-exploit#what-should-you-do"], "tags": {"analytic_story": ["HAFNIUM Group", "ProxyShell"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Exploitation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1505.003/windows-sysmon_proxylogon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "A file - $file_name$ was written to disk that is related to IIS exploitation previously performed by HAFNIUM. Review further file modifications on endpoint $dest$ by user $user$.", "mitre_attack_id": ["T1505", "T1505.003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "file_name", "type": "File Name", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_path", "Filesystem.process_id", "Filesystem.file_name", "Filesystem.file_hash", "Filesystem.user"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["Server Software Component", "Web Shell"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "Tropic Trooper", "Soft Cell", "Threat Group-3390", "TEMP.Veles", "Leviathan", "APT39", "Dragonfly 2.0", "APT32", "OilRig", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_exchange_web_shell_filter"}]}, {"name": "SearchProtocolHost with no Command Line with Network", "id": "b690df8c-a145-11eb-a38b-acde48001122", "version": 2, "date": "2021-10-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies searchprotocolhost.exe with no command line arguments and with a network connection. It is unusual for searchprotocolhost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. searchprotocolhost.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=searchprotocolhost.exe by _time span=1h  Processes.process_guid Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(searchprotocolhost\\.exe.{0,4}$)\" | join  process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Ports where Ports.dest_port !=\"0\" by Ports.process_guid Ports.dest Ports.dest_port | `drop_dm_object_name(Ports)` | rename  dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process process_guid connection_to_CNC dest_port | `searchprotocolhost_with_no_command_line_with_network_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` and `ports` node.", "known_false_positives": "Limited false positives may be present in small environments. Tuning may be required based on parent process.", "references": ["https://github.com/fireeye/red_team_tool_countermeasures/blob/master/rules/PGF/supplemental/hxioc/SUSPICIOUS%20EXECUTION%20OF%20SEARCHPROTOCOLHOST%20(METHODOLOGY).ioc"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Defense Evasion"}, "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon_searchprotocolhost.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A searchprotocolhost.exe process $process_name$ with no commandline in host $dest$", "mitre_attack_id": ["T1055"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "processname", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "process_id", "parent_process_name", "dest_port", "process_path"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "searchprotocolhost_with_no_command_line_with_network_filter"}]}, {"name": "Remcos client registry install entry", "id": "f2a1615a-1d63-11ec-97d2-acde48001122", "version": 1, "date": "2021-09-24", "author": "Bhavin Patel, Rod Soto, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects registry key license at host where Remcos RAT agent is installed.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Registry.registry_path) as  registry_path FROM datamodel=Endpoint.Registry where (Registry.registry_key_name=*\\\\Software\\\\Remcos*) by Registry.dest  Registry.user Registry.registry_key_name Registry.process_id| `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`|`remcos_client_registry_install_entry_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "unknown", "references": ["https://attack.mitre.org/software/S0332/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_panel_client/remcos_registry_entry.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "A registry entry $registry_path$ with registry keyname $registry_key_name$ related to Remcos RAT in host $dest$", "mitre_attack_id": ["T1112"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_path", "Registry.registry_key_name", "Registry.process_id", "Registry.dest", "Registry.user"], "risk_score": 90, "security_domain": "endpoint", "mitre_attack_technique": ["Modify Registry"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "Turla", "APT32", "APT38", "Dragonfly 2.0", "APT19", "Threat Group-3390", "Honeybee", "Patchwork", "Gorgon Group", "FIN8"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remcos_client_registry_install_entry_filter"}]}, {"name": "Winword Spawning Cmd", "id": "6fcbaedc-a37b-11eb-956b-acde48001122", "version": 2, "date": "2021-04-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies Microsoft Word spawning `cmd.exe`. Typically, this is not common behavior and not default with winword.exe. Winword.exe will generally be found in the following path `C:\\Program Files\\Microsoft Office\\root\\Office16` (version will vary). Cmd.exe spawning from winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line will indicate what is being executed. During triage, review parallel processes and identify any files that may have been written. It is possible that COM is utilized to trampoline the child process to `explorer.exe` or `wmiprvse.exe`.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=winword.exe `process_cmd` by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winword_spawning_cmd_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited, but if any are present, filter as needed.", "references": ["https://app.any.run/tasks/73af0064-a785-4c0a-ab0d-cde593fe16ef/"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "$parent_process_name$ on $dest$ by $user$ launched command: $process_name$ which is very common in spearphishing attacks.", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Target"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winword_spawning_cmd_filter"}]}, {"name": "Disable Defender BlockAtFirstSeen Feature", "id": "2dd719ac-3021-11ec-97b4-acde48001122", "version": 1, "date": "2021-10-18", "author": "Teoderick Contreras", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the BlockAtFirstSeen feature where it block suspicious file first seen in the host.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = \"*\\\\Microsoft\\\\Windows Defender\\\\SpyNet*\" Registry.registry_value_name = DisableBlockAtFirstSeen Registry.registry_value_data = 0x00000001 by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `disable_defender_blockatfirstseen_feature_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the registry value name, registry path, and registry value data from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "admin or user may choose to disable windows defender product", "references": ["https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"], "tags": {"analytic_story": ["IceID"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/disable_av/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $registry_path$ in $dest$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_value_name", "Registry.registry_key_name", "Registry.registry_path", "Registry.registry_value_data"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disable_defender_blockatfirstseen_feature_filter"}]}, {"name": "Suspicious Copy on System32", "id": "ce633e56-25b2-11ec-9e76-acde48001122", "version": 1, "date": "2021-10-05", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious copy of file from systemroot folder of the windows OS. This technique is commonly used by APT or other malware as part of execution (LOLBIN) to run its malicious code using the available legitimate tool in OS. this type of event may seen or may execute of normal user in some instance but this is really a anomaly that needs to be check within the network.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN(\"cmd.exe\", \"powershell*\",\"pwsh.exe\", \"sqlps.exe\", \"sqltoolsps.exe\", \"powershell_ise.exe\") AND `process_copy` AND Processes.process IN(\"*\\\\Windows\\\\System32\\*\", \"*\\\\Windows\\\\SysWow64\\\\*\") AND Processes.process = \"*copy*\" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `suspicious_copy_on_system32_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "every user may do this event but very un-ussual.", "references": ["https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120"], "tags": {"analytic_story": ["Unusual Processes"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036.003/copy_sysmon/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "execution of copy exe to copy file from $process$ in $dest$", "mitre_attack_id": ["T1036.003", "T1036"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Rename System Utilities", "Masquerading"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["menuPass", "APT32", "Soft Cell", "PLATINUM", "Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=copy.exe OR Processes.original_file_name=copy.exe OR Processes.process_name=xcopy.exe OR Processes.original_file_name=xcopy.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_copy"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_copy_on_system32_filter"}]}, {"name": "Suspicious GPUpdate no Command Line Arguments", "id": "f308490a-473a-40ef-ae64-dd7a6eba284a", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies gpupdate.exe with no command line arguments. It is unusual for gpupdate.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. gpupdate.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_gpupdate` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(gpupdate\\.exe.{0,4}$)\"  | `suspicious_gpupdate_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Limited false positives may be present in small environments. Tuning may be required based on parent process.", "references": ["https://raw.githubusercontent.com/xx0hcd/Malleable-C2-Profiles/0ef8cf4556e26f6d4190c56ba697c2159faa5822/crimeware/trick_ryuk.profile", "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious gpupdate.exe process with no command line arguments executed on $dest$ by $user$", "mitre_attack_id": ["T1055"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=gpupdate.exe OR Processes.original_file_name=GPUpdate.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_gpupdate"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_gpupdate_no_command_line_arguments_filter"}]}, {"name": "Regsvr32 with Known Silent Switch Cmdline", "id": "c9ef7dc4-eeaf-11eb-b2b6-acde48001122", "version": 2, "date": "2021-07-27", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies Regsvr32.exe utilizing the silent switch to load DLLs. This technique has most recently been seen in IcedID campaigns to load its initial dll that will download the 2nd stage loader that will download and decrypt the config payload. The switch type may be either a hyphen `-` or forward slash `/`. This behavior is typically found with `-s`, and it is possible there are more switch types that may be used. \\ During triage, review parallel processes and capture any artifacts that may have landed on disk. Isolate and contain the endpoint as necessary.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,\"(?i)[\\-|\\/][Ss]{1}\") | `regsvr32_with_known_silent_switch_cmdline_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "minimal. but network operator can use this application to load dll.", "references": ["https://app.any.run/tasks/56680cba-2bbc-4b34-8633-5f7878ddf858/", "https://regexr.com/699e2"], "tags": {"analytic_story": ["IcedID", "Suspicious Regsvr32 Activity", "Remcos"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to load a DLL using the silent parameter.", "mitre_attack_id": ["T1218", "T1218.010"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Regsvr32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Blue Mockingbird", "Inception", "WIRTE", "Cobalt Group", "APT19", "Leviathan", "APT32", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=regsvr32.exe OR Processes.original_file_name=REGSVR32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_regsvr32"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "regsvr32_with_known_silent_switch_cmdline_filter"}]}, {"name": "Multiple Users Failing To Authenticate From Host Using NTLM", "id": "7ed272a4-9c77-11eb-af22-acde48001122", "version": 1, "date": "2021-04-13", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies one source endpoint failing to authenticate with multiple valid users using the NTLM protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using NTLM to obtain initial access or elevate privileges. Event 4776 is generated on the computer that is authoritative for the provided credentials. For domain accounts, the domain controller is authoritative. For local accounts, the local computer is authoritative. Error code 0xC000006A means: misspelled or bad password (the attempted user is a legitimate domain user).\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will only trigger on domain controllers, not on member servers or workstations.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source workstation name and attempted user accounts.", "search": " `wineventlog_security` EventCode=4776 Logon_Account!=\"*$\" 0xC000006A action=failure | bucket span=2m _time | stats dc(Logon_Account) AS unique_accounts values(Logon_Account) as tried_accounts by _time, Source_Workstation | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Workstation | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_host_using_ntlm_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller events. The Advanced Security Audit policy setting `Audit Credential Validation` within `Account Logon` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple valid domain users is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners and missconfigured systems. If this detection triggers on a host other than a Domain Controller, the behavior could represent a password spraying attack against the host's local accounts.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-credential-validation", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4776"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_valid_users_ntlm/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential NTLM based password spraying attack from $Source_Workstation$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "Source_Workstation", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "action", "Logon_Account", "Source_Workstation"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_users_failing_to_authenticate_from_host_using_ntlm_filter"}]}, {"name": "High File Deletion Frequency", "id": "b6200efd-13bd-4336-920a-057b25bbcfaf", "version": 1, "date": "2021-12-07", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Filesystem"], "description": "This detection detects a high amount of file deletions in a short time for specific file types. This can be an indicator for a malicious insider.", "search": "| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval action=ucast(map_get(input_event, \"action\"), \"string\", null), process=ucast(map_get(input_event, \"process\"), \"string\", null), file_name=ucast(map_get(input_event, \"file_name\"), \"string\", null), file_path=ucast(map_get(input_event, \"file_path\"), \"string\", null), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null) | where \"Endpoint_Filesystem\" IN(_datamodels) | where action=\"deleted\" | where like(file_name, \"%.cmd\") OR like(file_name, \"%.ini\") OR like(file_name, \"%.gif\") OR like(file_name, \"%.jpg\") OR like(file_name, \"%.jpeg\") OR like(file_name, \"%.db\") OR like(file_name, \"%.doc%\") OR like(file_name, \"%.ps1\") OR like(file_name, \"%.xls%\") OR like(file_name, \"%.ppt%\") OR like(file_name, \"%.bmp\") OR like(file_name, \"%.zip\") OR like(file_name, \"%.rar\") OR like(file_name, \"%.7z\") OR like(file_name, \"%.chm\") OR like(file_name, \"%.png\") OR like(file_name, \"%.log\") OR like(file_name, \"%.vbs\") OR like(file_name, \"%.js\") | stats count(file_name) AS count BY dest_user_id, dest_device_id, span(timestamp, 10m) | where count > 20 | eval start_time=window_start, end_time=window_end, entities=mvappend(dest_user_id, dest_device_id), body=create_map([\"count\", count]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Filesytem` node.", "known_false_positives": "user may delete bunch of pictures or files in a folder.", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1485/excessive_file_deletions/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Exploitation"], "message": "High frequency file deletion activity detected on host $Computer$", "mitre_attack_id": ["T1485"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Endpoint", "role": ["Victim"]}, {"name": "deleted_files", "type": "File Name", "role": ["Target"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["action", "process", "file_name", "file_path"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Data Destruction"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["Sandworm Team", "Lazarus Group", "APT38"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "high_file_deletion_frequency_filter"}]}, {"name": "Deleting Of Net Users", "id": "1c8c6f66-acce-11eb-aafb-acde48001122", "version": 2, "date": "2021-05-04", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious net.exe/net1.exe command-line to delete a user on a system. This technique may be use by an administrator for legitimate purposes, however this behavior has been used in the wild to impair some user or deleting adversaries tracks created during its lateral movement additional systems. During triage, review parallel processes for additional behavior. Identify any other user accounts created before or after.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process=\"*user*\" AND  Processes.process=\"*/delete*\" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `deleting_of_net_users_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "System administrators or scripts may delete user accounts via this technique. Filter as needed.", "references": ["https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to delete accounts.", "mitre_attack_id": ["T1531"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Account Access Removal"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=\"net.exe\" OR Processes.original_file_name=\"net.exe\" OR Processes.process_name=\"net1.exe\" OR Processes.original_file_name=\"net1.exe\")", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_net"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "deleting_of_net_users_filter"}]}, {"name": "Spoolsv Writing a DLL - Sysmon", "id": "347fd388-da87-11eb-836d-acde48001122", "version": 1, "date": "2021-07-01", "author": "Mauricio Velazco, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies a `.dll` being written by `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously(CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to write a `.dll`. Current POC code used will write the suspicious DLL to disk within a path of `\\spool\\drivers\\x64\\`. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.", "search": "`sysmon` EventID=11 process_name=spoolsv.exe file_path=\"*\\\\spool\\\\drivers\\\\x64\\\\*\" file_name=*.dll | stats count min(_time) as firstTime max(_time) as lastTime by dest, UserID, process_name, file_path, file_name, TargetFilename, process_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_writing_a_dll___sysmon_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "Limited false positives. Filter as needed.", "references": ["https://github.com/cube0x0/impacket/commit/73b9466c17761384ece11e1028ec6689abad6818", "https://blog.truesec.com/2021/06/30/fix-for-printnightmare-cve-2021-1675-exploit-to-keep-your-print-servers-running-while-a-patch-is-not-available/", "https://blog.truesec.com/2021/06/30/exploitable-critical-rce-vulnerability-allows-regular-users-to-fully-compromise-active-directory-printnightmare-cve-2021-1675/", "https://www.reddit.com/r/msp/comments/ob6y02/critical_vulnerability_printnightmare_exposes"], "tags": {"analytic_story": ["PrintNightmare CVE-2021-34527"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Privilege Escalation", "Stage:Defense Evasion", "Scope:Local"], "cve": ["CVE-2021-34527"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/printnightmare/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "$process_name$ has been identified writing dll's to $file_path$ on endpoint $dest$. This behavior is suspicious and related to PrintNightmare.", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_id", "type": "Process", "role": ["Process"]}, {"name": "file_path", "type": "File", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "UserID", "process_name", "file_path", "file_name", "TargetFilename"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spoolsv_writing_a_dll___sysmon_filter"}]}, {"name": "Powershell Fileless Process Injection via GetProcAddress", "id": "a26d9db4-c883-11eb-9d75-acde48001122", "version": 1, "date": "2021-06-08", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \\\nThis analytic identifies `GetProcAddress` in the script block. This is not normal to be used by most PowerShell scripts and is typically unsafe/malicious. Many attack toolkits use GetProcAddress to obtain code execution. \\\nIn use, `$var_gpa = $var_unsafe_native_methods.GetMethod(GetProcAddress` and later referenced/executed elsewhere. \\\nDuring triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.", "search": "`powershell` EventCode=4104 Message=*getprocaddress* | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_fileless_process_injection_via_getprocaddress_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Limited false positives. Filter as needed.", "references": ["https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63", "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf", "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell script contains GetProcAddress API in $Message$ with EventCode $EventCode$ in host $ComputerName$", "mitre_attack_id": ["T1059", "T1055", "T1059.001"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 48, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "Process Injection", "PowerShell"], "mitre_attack_tactics": ["Execution", "Defense Evasion", "Privilege Escalation", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_fileless_process_injection_via_getprocaddress_filter"}]}, {"name": "Clop Ransomware Known Service Name", "id": "07e08a12-870c-11eb-b5f9-acde48001122", "version": 1, "date": "2021-03-17", "author": "Teoderick Contreras", "type": "TTP", "datamodel": ["Endpoint"], "description": "This detection is to identify the common service name created by the CLOP ransomware as part of its persistence and high privilege code execution in the infected machine. Ussually CLOP ransomware use StartServiceCtrlDispatcherW API in creating this service entry.", "search": "`wineventlog_system` EventCode=7045 Service_Name IN (\"SecurityCenterIBM\", \"WinCheckDRVs\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clop_ransomware_known_service_name_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Service name, Service File Name Service Start type, and Service Type from your endpoints.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html", "https://blog.virustotal.com/2020/11/keep-your-friends-close-keep-ransomware.html"], "tags": {"analytic_story": ["Clop Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/clop/clop_a/windows-system.log"], "impact": 100, "kill_chain_phases": ["Privilege Escalation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ executing known Clop Ransomware service names.", "mitre_attack_id": ["T1543"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["EventCode", "cmdline", "_time", "parent_process_name", "process_name", "OriginalFileName", "process_path"], "risk_score": 100, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "clop_ransomware_known_service_name_filter"}]}, {"name": "CertUtil With Decode Argument", "id": "bfe94226-8c10-11eb-a4b3-acde48001122", "version": 2, "date": "2021-03-23", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "CertUtil.exe may be used to `encode` and `decode` a file, including PE and script code. Encoding will convert a file to base64 with `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` tags. Malicious usage will include decoding a encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Note that there are two additional command switches that may be used - `encodehex` and `decodehex`. Similarly, the file will be encoded in HEX and later decoded for further execution. During triage, identify the source of the file being decoded. Review its contents or execution behavior for further analysis.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` Processes.process=*decode* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_with_decode_argument_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Typically seen used to `encode` files, but it is possible to see legitimate use of `decode`. Filter based on parent-child relationship, file paths, endpoint or user.", "references": ["https://attack.mitre.org/techniques/T1140/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1140/T1140.md", "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil", "https://www.bleepingcomputer.com/news/security/certutilexe-could-allow-attackers-to-download-malware-while-bypassing-av/"], "tags": {"analytic_story": ["Deobfuscate-Decode Files or Information"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1140/atomic_red_team/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to decode a file.", "mitre_attack_id": ["T1140"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Deobfuscate/Decode Files or Information"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "Gamaredon Group", "Molerats", "Frankenstein", "Turla", "WIRTE", "Darkhotel", "Tropic Trooper", "menuPass", "Honeybee", "Threat Group-3390", "APT19", "Gorgon Group", "Leviathan", "MuddyWater", "APT28", "OilRig", "BRONZE BUTLER"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=certutil.exe OR Processes.original_file_name=CertUtil.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_certutil"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "certutil_with_decode_argument_filter"}]}, {"name": "GetNetTcpconnection with PowerShell", "id": "e02af35c-1de5-4afe-b4be-f45aba57272b", "version": 1, "date": "2021-08-25", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line utilized to get a listing of network connections on a compromised system. The `Get-NetTcpConnection` commandlet lists the current TCP connections. Red Teams and adversaries alike may use this commandlet for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-NetTcpConnection*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getnettcpconnection_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1049/", "https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-nettcpconnection?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1049/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Network Connection discovery on $dest$ by $user$", "mitre_attack_id": ["T1049"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["System Network Connections Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Tropic Trooper", "APT41", "APT38", "Soft Cell", "APT32", "APT1", "OilRig", "APT3", "menuPass", "Threat Group-3390", "Poseidon Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getnettcpconnection_with_powershell_filter"}]}, {"name": "Suspicious DLLHost no Command Line Arguments", "id": "ff61e98c-0337-4593-a78f-72a676c56f26", "version": 2, "date": "2021-09-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies DLLHost.exe with no command line arguments. It is unusual for DLLHost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. DLLHost.exe is natively found in C:\\Windows\\system32 and C:\\Windows\\syswow64.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_dllhost` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=\"(dllhost\\.exe.{0,4}$)\" | `suspicious_dllhost_no_command_line_arguments_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives may be present in small environments. Tuning may be required based on parent process.", "references": ["https://raw.githubusercontent.com/threatexpress/malleable-c2/c3385e481159a759f79b8acfe11acf240893b830/jquery-c2.4.2.profile", "https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/"], "tags": {"analytic_story": ["Cobalt Strike"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1055/cobalt_strike/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious dllhost.exe process with no command line arguments executed on $dest$ by $user$", "mitre_attack_id": ["T1055"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=dllhost.exe OR Processes.original_file_name=dllhost.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_dllhost"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_dllhost_no_command_line_arguments_filter"}]}, {"name": "Detect Prohibited Applications Spawning cmd exe", "id": "c10a18cb-fd80-4ffa-a844-25026e0a0c94", "version": 2, "date": "2020-11-10", "author": "Ignacio Bermudez Corrales, Splunk", "type": "Anomaly", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies parent processes, browsers, Windows terminal applications, Office Products and Java spawning cmd.exe. By its very nature, many applications spawn cmd.exe natively or built into macros. Much of this will need to be tuned to further enhance the risk.", "search": "| from read_ssa_enriched_events()\n| eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)) | eval process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), parent_process=lower(ucast(map_get(input_event, \"parent_process_name\"), \"string\", null)), cmd_line=lower(ucast(map_get(input_event, \"process\"),\"string\", null)), dest_user_id=ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), dest_device_id=ucast(map_get(input_event, \"dest_device_id\"), \"string\", null), event_id=ucast(map_get(input_event,\"event_id\"), \"string\", null) | where process_name=\"cmd.exe\" | rex field=parent_process \"(?<ParentBaseFileName>[^\\\\\\\\]+)$\" | where ParentBaseFileName=\"winword.exe\" OR ParentBaseFileName=\"excel.exe\" OR ParentBaseFileName=\"outlook.exe\" OR ParentBaseFileName=\"powerpnt.exe\" OR ParentBaseFileName=\"visio.exe\" OR ParentBaseFileName=\"mspub.exe\" OR ParentBaseFileName=\"acrobat.exe\" OR ParentBaseFileName=\"acrord32.exe\" OR ParentBaseFileName=\"iexplore.exe\" OR ParentBaseFileName=\"opera.exe\" OR ParentBaseFileName=\"firefox.exe\" OR (ParentBaseFileName=\"java.exe\" AND (cmd_line IS NULL OR (cmd_line IS NOT NULL AND NOT like(cmd_line, \"%patch1-Hotfix1a%\")))) OR ParentBaseFileName=\"powershell.exe\" OR (ParentBaseFileName=\"chrome.exe\" AND (cmd_line IS NULL OR (cmd_line IS NOT NULL AND NOT like(cmd_line, \"%chrome-extension%\")))) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(dest_device_id, dest_user_id), body=create_map([\"event_id\", event_id,  \"process_name\", process_name, \"parent_process_name\", parent_process, \"cmd_line\", cmd_line]) | into write_ssa_detected_events();", "how_to_implement": "In order to successfully implement this analytic, you will need endpoint process data from a EDR product or Sysmon. This search has been modified to process raw sysmon data from attack_range's nxlogs on DSP.", "known_false_positives": "There are circumstances where an application may legitimately execute and interact with the Windows command-line interface.", "references": ["https://attack.mitre.org/techniques/T1059/"], "tags": {"analytic_story": ["Suspicious Command-Line Executions"], "cis20": ["CIS 8"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$, producing a suspicious event that warrants investigating.", "mitre_attack_id": ["T1059"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Actor"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["process_name", "parent_process_name", "_time", "dest_device_id", "dest_user_id", "cmd_line"], "risk_score": 35, "risk_severity": "low", "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_prohibited_applications_spawning_cmd_exe_filter"}]}, {"name": "UAC Bypass With Colorui COM Object", "id": "2bcccd20-fc2b-11eb-8d22-acde48001122", "version": 1, "date": "2021-08-13", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a possible uac bypass using the colorui.dll COM Object. this technique was seen in so many malware and ransomware like lockbit where it make use of the colorui.dll COM CLSID to bypass UAC.", "search": "`sysmon` EventCode=7 ImageLoaded=\"*\\\\colorui.dll\" process_name != \"colorcpl.exe\" NOT(Image IN(\"*\\\\windows\\\\*\", \"*\\\\program files*\")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uac_bypass_with_colorui_com_object_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "not so common. but 3rd part app may load this dll.", "references": ["https://news.sophos.com/en-us/2020/04/24/lockbit-ransomware-borrows-tricks-to-keep-up-with-revil-and-maze/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546.015/uac_colorui/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "The following module $ImageLoaded$ was loaded by a non-standard application on endpoint $Computer$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "ImageLoaded", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "ImageLoaded", "process_name", "Computer", "EventCode", "Signed", "ProcessId"], "risk_score": 48, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "CMSTP"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Cobalt Group", "MuddyWater"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "uac_bypass_with_colorui_com_object_filter"}]}, {"name": "Windows Curl Upload to Remote Destination", "id": "42f8f1a2-4228-11ec-aade-acde48001122", "version": 1, "date": "2021-11-10", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of Windows Curl.exe uploading a file to a remote destination. \\\n`-T` or `--upload-file` is used when a file is to be uploaded to a remotge destination. \\\n`-d` or `--data` POST is the HTTP method that was invented to send data to a receiving web application, and it is, for example, how most common HTML forms on the web work. \\\nHTTP multipart formposts are done with `-F`, but this appears to not be compatible with the Windows version of Curl. Will update if identified adversary tradecraft. \\\nAdversaries may use one of the three methods based on the remote destination and what they are attempting to upload (zip vs txt). During triage, review parallel processes for further behavior. In addition, identify if the upload was successful in network logs. If a file was uploaded, isolate the endpoint and review.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_curl` Processes.process IN (\"*-T *\",\"*--upload-file *\", \"*-d *\", \"*--data *\", \"*-F *\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_curl_upload_to_remote_destination_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be limited to source control applications and may be required to be filtered out.", "references": ["https://everything.curl.dev/usingcurl/uploads", "https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409", "https://twitter.com/d1r4c/status/1279042657508081664?s=20"], "tags": {"analytic_story": ["Ingress Tool Transfer"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/windows-sysmon_curl_upload.log"], "impact": 80, "kill_chain_phases": ["Exfiltration"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ uploading a file to a remote destination.", "mitre_attack_id": ["T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=curl.exe OR Processes.original_file_name=Curl.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_curl"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_curl_upload_to_remote_destination_filter"}]}, {"name": "SAM Database File Access Attempt", "id": "57551656-ebdb-11eb-afdf-acde48001122", "version": 1, "date": "2021-07-23", "author": "Michael Haag, Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies access to SAM, SYSTEM or SECURITY databases' within the file path of `windows\\system32\\config` using Windows Security EventCode 4663. This particular behavior is related to credential access, an attempt to either use a Shadow Copy or recent CVE-2021-36934 to access the SAM database. The Security Account Manager (SAM) is a database file in Windows XP, Windows Vista, Windows 7, 8.1 and 10 that stores users' passwords.", "search": "`wineventlog_security` (EventCode=4663)  process_name!=*\\\\dllhost.exe Object_Name IN (\"*\\\\Windows\\\\System32\\\\config\\\\SAM*\",\"*\\\\Windows\\\\System32\\\\config\\\\SYSTEM*\",\"*\\\\Windows\\\\System32\\\\config\\\\SECURITY*\") | stats values(Accesses) count by process_name Object_Name  dest user | `sam_database_file_access_attempt_filter`", "how_to_implement": "To successfully implement this search, you must ingest Windows Security Event logs and track event code 4663. For 4663, enable \"Audit Object Access\" in Group Policy. Then check the two boxes listed for both \"Success\" and \"Failure.\"", "known_false_positives": "Natively, `dllhost.exe` will access the files. Every environment will have additional native processes that do as well. Filter by process_name. As an aside, one can remove process_name entirely and add `Object_Name=*ShadowCopy*`.", "references": ["https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4663", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4663", "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36934", "https://github.com/GossiTheDog/HiveNightmare", "https://github.com/JumpsecLabs/Guidance-Advice/tree/main/SAM_Permissions", "https://en.wikipedia.org/wiki/Security_Account_Manager"], "tags": {"analytic_story": ["Credential Dumping"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Credential Access"], "cve": ["CVE-2021-36934"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "The following process $process_name$ accessed the object $Object_Name$ attempting to gain access to credentials on $dest$ by user $user$.", "mitre_attack_id": ["T1003.002", "T1003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}, {"name": "Object_Name", "type": "File", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "process_name", "Object_Name", "dest", "user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Security Account Manager", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["Threat Group-3390", "Ke3chang", "Soft Cell", "Night Dragon", "Dragonfly 2.0", "menuPass", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sam_database_file_access_attempt_filter"}]}, {"name": "Suspicious msbuild path", "id": "f5198224-551c-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-12", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies msbuild.exe executing from a non-standard path. Msbuild.exe is natively found in C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 and C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319. Instances of Visual Studio will run a copy of msbuild.exe. A moved instance of MSBuild is suspicious, however there are instances of build applications that will move or use a copy of MSBuild.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msbuild` AND (Processes.process_path!=c:\\\\windows\\\\microsoft.net\\\\framework*\\\\v*\\\\*) by Processes.dest Processes.original_file_name Processes.parent_process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `suspicious_msbuild_path_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Some legitimate applications may use a moved copy of msbuild.exe, triggering a false positive. Baselining of MSBuild.exe usage is recommended to better understand it's path usage. Visual Studio runs an instance out of a path that will need to be filtered on.", "references": ["https://lolbas-project.github.io/lolbas/Binaries/Msbuild/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1127.001/T1127.001.md"], "tags": {"analytic_story": ["Trusted Developer Utilities Proxy Execution MSBuild", "Cobalt Strike", "Masquerading - Rename System Utilities"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127.001/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Msbuild.exe ran from an uncommon path on $dest$ execyted by $user$", "mitre_attack_id": ["T1036", "T1127", "T1036.003", "T1127.001"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Masquerading", "Trusted Developer Utilities Proxy Execution", "Rename System Utilities", "MSBuild"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion", "Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Windshift", "APT32", "BRONZE BUTLER", "menuPass", "Dragonfly 2.0", "no", "menuPass", "APT32", "Soft Cell", "PLATINUM", "Frankenstein"]}, "macros": [{"definition": "(Processes.process_name=msbuild.exe OR Processes.original_file_name=MSBuild.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_msbuild"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_msbuild_path_filter"}]}, {"name": "Detect Renamed PSExec", "id": "683e6196-b8e8-11eb-9a79-acde48001122", "version": 3, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic identifies renamed instances of `PsExec.exe` being utilized on an endpoint. Most instances, it is highly probable to capture `Psexec.exe` or other SysInternal utility usage with the command-line argument of `-accepteula`. During triage, validate this is the legitimate version of `PsExec` by reviewing the PE metadata. In addition, review parallel processes for further suspicious behavior.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_psexec` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_psexec_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives should be present. It is possible some third party applications may use older versions of PsExec, filter as needed.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1569.002/T1569.002.yaml", "https://redcanary.com/blog/threat-hunting-psexec-lateral-movement/"], "tags": {"analytic_story": ["SamSam Ransomware", "DHS Report TA18-074A", "HAFNIUM Group", "DarkSide Ransomware", "Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1569.002/atomic_red_team/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Exploitation", "Lateral Movement", "Execution"], "message": "The following $process_name$ has been identified as renamed, spawning from $parent_process_name$ on $dest$ by $user$.", "mitre_attack_id": ["T1569", "T1569.002"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 27, "security_domain": "endpoint", "mitre_attack_technique": ["System Services", "Service Execution"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT41", "Silence", "FIN6", "APT32", "Honeybee", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(Processes.process_name=psexec.exe OR Processes.process_name=psexec64.exe OR Processes.original_file_name=psexec.c)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_psexec"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_renamed_psexec_filter"}]}, {"name": "Windows Curl Upload to Remote Destination", "id": "cc8d046a-543b-11ec-b864-acde48001122", "version": 1, "date": "2021-12-03", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint_Processes"], "description": "The following analytic identifies the use of Windows Curl.exe uploading a file to a remote destination. \\\n`-T` or `--upload-file` is used when a file is to be uploaded to a remotge destination. \\\n`-d` or `--data` POST is the HTTP method that was invented to send data to a receiving web application, and it is, for example, how most common HTML forms on the web work. \\\nHTTP multipart formposts are done with `-F`, but this appears to not be compatible with the Windows version of Curl. Will update if identified adversary tradecraft. \\\nAdversaries may use one of the three methods based on the remote destination and what they are attempting to upload (zip vs txt). During triage, review parallel processes for further behavior. In addition, identify if the upload was successful in network logs. If a file was uploaded, isolate the endpoint and review.", "search": "| from read_ssa_enriched_events() | where \"Endpoint_Processes\" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, \"_time\"), \"string\", null)), cmd_line=ucast(map_get(input_event, \"process\"), \"string\", null), process_name=ucast(map_get(input_event, \"process_name\"), \"string\", null), process_path=ucast(map_get(input_event, \"process_path\"), \"string\", null), parent_process_name=ucast(map_get(input_event, \"parent_process_name\"), \"string\", null), event_id=ucast(map_get(input_event, \"event_id\"), \"string\", null)\n| where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=\"curl.exe\" AND (like (cmd_line, \"%-T %\") OR like (cmd_line, \"%--upload-file %\")OR like (cmd_line, \"%-d %\") OR like (cmd_line, \"%--data %\") OR like (cmd_line, \"%-F %\"))\n| eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, \"dest_user_id\"), \"string\", null), ucast(map_get(input_event, \"dest_device_id\"), \"string\", null)) | eval body=create_map([\"event_id\", event_id, \"cmd_line\", cmd_line, \"process_name\", process_name, \"parent_process_name\", parent_process_name, \"process_path\", process_path]) | into write_ssa_detected_events();", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint_Processess` datamodel.", "known_false_positives": "False positives may be limited to source control applications and may be required to be filtered out.", "references": ["https://everything.curl.dev/usingcurl/uploads", "https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409", "https://twitter.com/d1r4c/status/1279042657508081664?s=20"], "tags": {"analytic_story": ["Ingress Tool Transfer"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1105/atomic_red_team/windows-security.log"], "impact": 80, "kill_chain_phases": ["Exfiltration"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest_device_id$ by user $dest_user_id$ uploading a file to a remote destination.", "mitre_attack_id": ["T1105"], "observable": [{"name": "dest_user_id", "type": "User", "role": ["Victim"]}, {"name": "dest_device_id", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Behavioral Analytics"], "required_fields": ["_time", "dest_device_id", "process_name", "parent_process_name", "process_path", "dest_user_id", "process", "cmd_line"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_curl_upload_to_remote_destination_filter"}]}, {"name": "Winhlp32 Spawning a Process", "id": "d17dae9e-2618-11ec-b9f5-acde48001122", "version": 1, "date": "2021-10-05", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies winhlp32.exe, found natively in `c:\\windows\\`, spawning a child process that loads a file out of appdata, programdata, or temp. Winhlp32.exe has a rocky past in that multiple vulnerabilities were found and added to MetaSploit. WinHlp32.exe is required to display 32-bit Help files that have the \".hlp\" file name extension. This particular instance is related to a Remcos sample where dynwrapx.dll is added to the registry under inprocserver32, and later module loaded by winhlp32.exe to spawn wscript.exe and load a vbs or file from disk. During triage, review parallel processes to identify further suspicious behavior. Review module loads for unsuspecting unsigned modules. Capture any file modifications and analyze.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=winhlp32.exe Processes.process IN (\"*\\\\appdata\\\\*\",\"*\\\\programdata\\\\*\", \"*\\\\temp\\\\*\") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winhlp32_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives should be limited as winhlp32.exe is typically not used with the latest flavors of Windows OS. However, filter as needed.", "references": ["https://www.exploit-db.com/exploits/16541", "https://tria.ge/210929-ap75vsddan", "https://www.virustotal.com/gui/file/cb77b93150cb0f7fe65ce8a7e2a5781e727419451355a7736db84109fa215a89"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$, and is not typical activity for this process.", "mitre_attack_id": ["T1055"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winhlp32_spawning_a_process_filter"}]}, {"name": "Powershell Windows Defender Exclusion Commands", "id": "907ac95c-4dd9-11ec-ba2c-acde48001122", "version": 1, "date": "2021-11-25", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic will detect a suspicious process commandline related to windows defender exclusion feature. This command is abused by adversaries, malware author and red teams to bypassed Windows Defender Anti-Virus product by excluding  folder path, file path, process, extensions and etc. from its real time or schedule scan to execute their malicious code. This is a good indicator for defense evasion and to look further for events after this behavior.", "search": "`powershell` EventCode=4104 (Message = \"*Add-MpPreference *\" OR Message = \"*Set-MpPreference *\") AND Message = \"*-exclusion*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_windows_defender_exclusion_commands_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin or user may choose to use this windows features.", "references": ["https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html", "https://app.any.run/tasks/cf1245de-06a7-4366-8209-8e3006f2bfe5/"], "tags": {"analytic_story": ["Remcos", "Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/defender_exclusion_powershell/powershell.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "exclusion command $Message$ executed on $ComputerName$", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "User", "type": "User", "role": ["Victim"]}, {"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_windows_defender_exclusion_commands_filter"}]}, {"name": "Fsutil Zeroing File", "id": "4e5e024e-fabb-11eb-8b8f-acde48001122", "version": 1, "date": "2021-08-11", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious fsutil process to zeroing a target file. This technique was seen in lockbit ransomware where it tries to zero out its malware path as part of its defense evasion after encrypting the compromised host.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe Processes.process=\"*setzerodata*\" by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  Processes.process Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `fsutil_zeroing_file_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://app.any.run/tasks/e0ac072d-58c9-4f53-8a3b-3e491c7ac5db/"], "tags": {"analytic_story": ["Ransomware"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1070/fsutil_file_zero/windows-sysmon.log"], "impact": 60, "kill_chain_phases": ["Exploitation"], "message": "Possible file data deletion on $dest$ using $process$", "mitre_attack_id": ["T1070"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.user", "Processes.process_name", "Processes.parent_process_name", "Processes.dest", "Processes.process", "Processes.parent_process"], "risk_score": 54, "security_domain": "endpoint", "mitre_attack_technique": ["Indicator Removal on Host"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "fsutil_zeroing_file_filter"}]}, {"name": "BITSAdmin Download File", "id": "80630ff4-8e4c-11eb-aab5-acde48001122", "version": 2, "date": "2021-09-16", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` using the `transfer` parameter to download a remote object. In addition, look for `download` or `upload` on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Note that the network connection or file modification events related will not spawn or create from `bitsadmin.exe`, but the artifacts will appear in a parallel process of `svchost.exe` with a command-line similar to `svchost.exe -k netsvcs -s BITS`. It's important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_bitsadmin` Processes.process=*transfer* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bitsadmin_download_file_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Limited false positives, however it may be required to filter based on parent process name or network connection.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/8eb52117b748d378325f7719554a896e37bccec7/atomics/T1105/T1105.md#atomic-test-9---windows---bitsadmin-bits-download", "https://github.com/redcanaryco/atomic-red-team/blob/bc705cb7aaa5f26f2d96585fac8e4c7052df0ff9/atomics/T1197/T1197.md", "https://docs.microsoft.com/en-us/windows/win32/bits/bitsadmin-tool", "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/"], "tags": {"analytic_story": ["Ingress Tool Transfer", "BITS Jobs", "DarkSide Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1197/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to download a file.", "mitre_attack_id": ["T1197", "T1105"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["BITS Jobs", "Ingress Tool Transfer"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Command And Control"], "mitre_attack_groups": ["Patchwork", "APT41", "Leviathan", "Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=bitsadmin.exe OR Processes.original_file_name=bitsadmin.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_bitsadmin"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "bitsadmin_download_file_filter"}]}, {"name": "Excessive number of distinct processes created in Windows Temp folder", "id": "23587b6a-c479-11eb-b671-acde48001122", "version": 1, "date": "2021-06-03", "author": "Michael Hart, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This analytic will identify suspicious series of process executions.  We have observed that post exploit framework tools like Koadic and Meterpreter will launch an excessive number of processes with distinct file paths from Windows\\Temp to execute actions on objective.  This behavior is extremely anomalous compared to typical application behaviors that use Windows\\Temp.", "search": "| tstats `security_content_summariesonly` values(Processes.process) as process distinct_count(Processes.process) as distinct_process_count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = \"*\\\\Windows\\\\Temp\\\\*\" by Processes.dest Processes.user  _time span=20m | where distinct_process_count > 37 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_number_of_distinct_processes_created_in_windows_temp_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the full process path in the process field of CIM's Process data model. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed sc.exe may be used.", "known_false_positives": "Many benign applications will create processes from executables in Windows\\Temp, although unlikely to exceed the given threshold.  Filter as needed.", "references": ["https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/"], "tags": {"analytic_story": ["Meterpreter"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059/meterpreter/windows_temp_processes/logExcessiveWindowsTemp.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Multiple processes were executed out of windows\\temp within a short amount of time on $dest$.", "mitre_attack_id": ["T1059"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.dest", "Processes.user"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_number_of_distinct_processes_created_in_windows_temp_folder_filter"}]}, {"name": "Unusually Long Command Line", "id": "c77162d3-f93c-45cc-80c8-22f6a4264e7f", "version": 5, "date": "2020-12-08", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": [], "description": "Command lines that are extremely long may be indicative of malicious activity on your hosts.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes by Processes.user Processes.dest Processes.process_name Processes.process | `drop_dm_object_name(\"Processes\")` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`|  eval processlen=len(process) | eventstats stdev(processlen) as stdev, avg(processlen) as avg by dest | stats max(processlen) as maxlen, values(stdev) as stdevperhost, values(avg) as avgperhost by dest, user, process_name, process | `unusually_long_command_line_filter` |eval threshold = 3 | where maxlen > ((threshold*stdevperhost) + avgperhost)", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships, from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the process field in the Endpoint data model.", "known_false_positives": "Some legitimate applications start with long command lines.", "references": [], "tags": {"analytic_story": ["Suspicious Command-Line Executions", "Unusual Processes", "Possible Backdoor Activity Associated With MUDCARP Espionage Campaigns", "Ransomware"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1036.003/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Unusually long command line $Processes.process_name$ on $dest$", "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "Processes.process_name", "type": "Process", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.user", "Processes.dest", "Processes.process_name", "Processes.process"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusually_long_command_line_filter"}]}, {"name": "Suspicious Process DNS Query Known Abuse Web Services", "id": "3cf0dc36-484d-11ec-a6bc-acde48001122", "version": 1, "date": "2021-11-18", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious process having a dns query on known abuse text paste web services, or VoIP, instant messaging and digital distribution platform to download some files. This technique is abused by adversaries, malware attacker and red team to download a malicious file on the target host. This is a good TTP indicator for possible initial access technique. Noise and false positive can be seen if the following instant messaging is allowed or common application in corporate network.", "search": "`sysmon` EventCode=22 QueryName IN (\"*pastebin*\", \"*discord*\", \"*telegram*\", \"*t.me*\") process_name IN (\"cmd.exe\", \"*powershell*\", \"pwsh.exe\", \"wscript.exe\", \"cscript.exe\") | stats count min(_time) as firstTime max(_time) as lastTime by Image QueryName QueryStatus process_name QueryResults Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_process_dns_query_known_abuse_web_services_filter`", "how_to_implement": "his detection relies on sysmon logs with the Event ID 7, Driver loaded. Please tune your sysmon config that you DriverLoad event for SolarWinds.Orion.Core.BusinessLayer.dll is captured by Sysmon. Additionally, you need sysmon logs for Event ID 22, DNS Query. We suggest to run this detection at least once a day over the last 14 days.", "known_false_positives": "Noise and false positive can be seen if the following instant messaging is allowed to use within corporate network. filter is needed.", "references": ["https://urlhaus.abuse.ch/url/1798923/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_pastebin_download/sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "suspicious process $process_name$ has a dns query in $QueryName$ on $Computer$", "mitre_attack_id": ["T1059.005", "T1059"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "QueryName", "QueryStatus", "process_name", "QueryResults", "Computer"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Visual Basic", "Command and Scripting Interpreter"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Gamaredon Group", "Sharpshooter", "Molerats", "Frankenstein", "Inception", "APT-C-36", "Rancor", "Patchwork", "MuddyWater", "Honeybee", "FIN7", "APT37", "BRONZE BUTLER", "APT32", "Turla", "TA505", "Silence", "WIRTE", "FIN4", "Cobalt Group", "Gorgon Group", "Leviathan", "TA459", "Magic Hound", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_process_dns_query_known_abuse_web_services_filter"}]}, {"name": "Remote Process Instantiation via WMI and PowerShell Script Block", "id": "2a048c14-4634-11ec-a618-3e22fbd008af", "version": 1, "date": "2021-11-15", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Invoke-WmiMethod` commandlet with arguments utilized to start a process on a remote endpoint by abusing WMI. Red Teams and adversaries alike may abuse WMI and this commandlet for lateral movement and remote code execution.", "search": "`powershell` EventCode=4104 (Message=\"*Invoke-WmiMethod*\" AND Message=\"*-CN*\" AND Message=\"*-Class Win32_Process*\" AND Message=\"*-Name create*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `remote_process_instantiation_via_wmi_and_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup instructions can be found https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators may leverage WWMI and powershell.exe to start a process on remote systems, but this activity is usually limited to a small set of hosts or users.", "references": ["https://attack.mitre.org/techniques/T1047/", "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/invoke-wmimethod?view=powershell-5.1"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1047/lateral_movement/windows-powershell.log"], "impact": 90, "kill_chain_phases": ["Lateral Movement"], "message": "A process was started on a remote endpoint from $ComputerName by abusing WMI using PowerShell.exe", "mitre_attack_id": ["T1047"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_process_instantiation_via_wmi_and_powershell_script_block_filter"}]}, {"name": "XMRIG Driver Loaded", "id": "90080fa6-a8df-11eb-91e4-acde48001122", "version": 1, "date": "2021-04-29", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic identifies XMRIG coinminer driver installation on the system. The XMRIG driver name by default is `WinRing0x64.sys`. This cpu miner is an open source project that is commonly abused by adversaries to infect and mine bitcoin.", "search": "`sysmon` EventCode=6 Signature=\"Noriyuki MIYAZAKI\" OR ImageLoaded= \"*\\\\WinRing0x64.sys\" |  stats  min(_time) as firstTime max(_time) as lastTime count by  Computer ImageLoaded Hashes IMPHASH Signature Signed | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `xmrig_driver_loaded_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the driver loaded and Signature from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "False positives should be limited.", "references": ["https://www.trendmicro.com/vinfo/hk/threat-encyclopedia/malware/trojan.ps1.powtran.a/"], "tags": {"analytic_story": ["XMRig"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Privilege Escalation"}, "Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/xmrig_miner/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "A driver $ImageLoaded$ related to xmrig crytominer loaded in host $Computer$", "mitre_attack_id": ["T1543.003", "T1543"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "ImageLoaded", "type": "ImageLoaded", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Computer", "ImageLoaded", "Hashes", "IMPHASH", "Signature", "Signed"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Windows Service", "Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "xmrig_driver_loaded_filter"}]}, {"name": "Detect Rundll32 Inline HTA Execution", "id": "91c79f14-5b41-11eb-ae93-0242ac130002", "version": 2, "date": "2021-01-20", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies \"rundll32.exe\" execution with inline protocol handlers. \"JavaScript\", \"VBScript\", and \"About\" are the only supported options when invoking HTA content directly on the command-line. This type of behavior is commonly observed with fileless malware or application whitelisting bypass techniques. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process \"rundll32.exe\" and its parent process.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` (Processes.process=*vbscript* OR Processes.process=*javascript* OR Processes.process=*about*) by Processes.user Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_rundll32_inline_hta_execution_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Although unlikely, some legitimate applications may exhibit this behavior, triggering a false positive.", "references": ["https://github.com/redcanaryco/AtomicTestHarnesses", "https://redcanary.com/blog/introducing-atomictestharnesses/", "https://docs.microsoft.com/en-us/windows/win32/search/-search-3x-wds-extidx-prot-implementing"], "tags": {"analytic_story": ["Suspicious MSHTA Activity", "NOBELIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.005/atomic_red_team/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious rundll32.exe inline HTA execution on $dest$", "mitre_attack_id": ["T1218", "T1218.005"], "nist": ["PR.PT", "DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Mshta"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Inception", "Kimsuky", "APT32", "MuddyWater", "FIN7"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rundll32_inline_hta_execution_filter"}]}, {"name": "Multiple Users Remotely Failing To Authenticate From Host", "id": "80f9d53e-9ca1-11eb-b0d6-acde48001122", "version": 1, "date": "2021-04-13", "author": "Mauricio Velazco, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "The following analytic identifies a source host failing to authenticate against a remote host with multiple users. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4625 documents each and every failed attempt to logon to the local computer. This event generates on domain controllers, member servers, and workstations. Logon Type 3 describes an remote authentication attempt.\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\\\nThis detection will trigger on the host that is the target of the password spraying attack. This could be a domain controller as well as a member server or workstation.\\\nThe analytics returned fields allow analysts to investigate the event further by providing fields like source process name, source account and attempted user accounts.", "search": " `wineventlog_security` EventCode=4625 Logon_Type=3 Source_Network_Address!=\"-\" | bucket span=2m _time | eval Destination_Account = mvindex(Account_Name, 1) | stats dc(Destination_Account) AS unique_accounts values(Destination_Account) as tried_accounts by _time, Source_Network_Address, ComputerName | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Network_Address, ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_remotely_failing_to_authenticate_from_host_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Event Logs from domain controllers as as well as member servers and workstations. The Advanced Security Audit policy setting `Audit Logon` within `Logon/Logoff` needs to be enabled.", "known_false_positives": "A host failing to authenticate with multiple valid users against a remote host is not a common behavior for legitimate systems. Possible false positive scenarios include but are not limited to vulnerability scanners, remote administration tools, missconfigyred systems, etc.", "references": ["https://attack.mitre.org/techniques/T1110/003/", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4625", "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4625", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events"], "tags": {"analytic_story": ["Active Directory Password Spraying"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_remote_spray/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Potential password spraying attack on $ComputerName$", "mitre_attack_id": ["T1110.003", "T1110"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Logon_Type", "Security_ID", "Account_Name", "ComputerName", "Source_Network_Address"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Password Spraying", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["APT33", "Leafminer", "Lazarus Group", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_users_remotely_failing_to_authenticate_from_host_filter"}]}, {"name": "Detect Excessive User Account Lockouts", "id": "95a7f9a5-6096-437e-a19e-86f42ac609bd", "version": 3, "date": "2020-07-21", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search detects user accounts that have been locked out a relatively high number of times in a short period.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Change.All_Changes where nodename=All_Changes.Account_Management All_Changes.result=\"lockout\" by All_Changes.user All_Changes.result |`drop_dm_object_name(\"All_Changes\")` |`drop_dm_object_name(\"Account_Management\")`| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search count > 5 | `detect_excessive_user_account_lockouts_filter`", "how_to_implement": "ou must ingest your Windows security event logs in the `Change` datamodel under the nodename is `Account_Management`, for this search to execute successfully. Please consider updating the cron schedule and the count of lockouts you want to monitor, according to your environment.", "known_false_positives": "It is possible that a legitimate user is experiencing an issue causing multiple account login failures leading to lockouts.", "references": [], "tags": {"analytic_story": ["Account Monitoring and Controls"], "asset_type": "Windows", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078.002/account_lockout/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078.002/account_lockout/windows-system.log"], "impact": 60, "message": "Multiple accounts have been locked out. Review $nodename$ and $result$ related to $user$.", "mitre_attack_id": ["T1078", "T1078.003"], "nist": ["PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "result", "type": "Other", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.result", "nodename", "All_Changes.user"], "risk_score": 36, "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Local Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "Tropic Trooper", "FIN10", "Stolen Pencil", "APT32"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_excessive_user_account_lockouts_filter"}]}, {"name": "Powershell Remote Thread To Known Windows Process", "id": "ec102cb2-a0f5-11eb-9b38-acde48001122", "version": 1, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is designed to detect suspicious powershell process that tries to inject code and to known/critical windows process and execute it using CreateRemoteThread. This technique is seen in several malware like trickbot and offensive tooling like cobaltstrike where it load a shellcode to svchost.exe to execute reverse shell to c2 and download another payload", "search": "`sysmon` EventCode = 8 process_name IN (\"powershell_ise.exe\", \"powershell.exe\") TargetImage IN (\"*\\\\svchost.exe\",\"*\\\\csrss.exe\" \"*\\\\gpupdate.exe\", \"*\\\\explorer.exe\",\"*\\\\services.exe\",\"*\\\\winlogon.exe\",\"*\\\\smss.exe\",\"*\\\\wininit.exe\",\"*\\\\userinit.exe\",\"*\\\\spoolsv.exe\",\"*\\\\taskhost.exe\") | stats  min(_time) as firstTime max(_time) as lastTime count by SourceImage process_name SourceProcessId SourceProcessGuid TargetImage TargetProcessId NewThreadId StartAddress Computer EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_remote_thread_to_known_windows_process_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, Create Remote thread from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances of create remote thread may be used.", "known_false_positives": "unknown", "references": ["https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/"], "tags": {"analytic_story": ["Trickbot"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Defense Evasion"}, "Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/infection/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A suspicious powershell process $process_name$ that tries to create a remote thread on target process $TargetImage$ with eventcode $EventCode$ in host $Computer$", "mitre_attack_id": ["T1055"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "SourceImage", "process_name", "SourceProcessId", "SourceProcessGuid", "TargetImage", "TargetProcessId", "NewThreadId", "StartAddress", "Computer", "EventCode"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Process Injection"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["APT32", "Sharpshooter", "Silence", "APT41", "Kimsuky", "Turla", "Cobalt Group", "APT37", "Honeybee", "PLATINUM"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "powershell_remote_thread_to_known_windows_process_filter"}]}, {"name": "W3WP Spawning Shell", "id": "0f03423c-7c6a-11eb-bc47-acde48001122", "version": 2, "date": "2021-03-03", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This query identifies a shell, PowerShell.exe or Cmd.exe, spawning from W3WP.exe, or IIS. In addition to IIS logs, this behavior with an EDR product will capture potential webshell activity, similar to the HAFNIUM Group abusing CVEs, on publicly available Exchange mail servers. During triage, review the parent process and child process of the shell being spawned. Review the command-line arguments and any file modifications that may occur. Identify additional parallel process, child processes, that may highlight further commands executed. After triaging, work to contain the threat and patch the system that is vulnerable.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=w3wp.exe AND `process_cmd` OR `process_powershell` by Processes.dest Processes.parent_process Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `w3wp_spawning_shell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "Baseline your environment before production. It is possible build systems using IIS will spawn cmd.exe to perform a software build. Filter as needed.", "references": ["https://www.microsoft.com/security/blog/2020/02/04/ghost-in-the-shell-investigating-web-shell-attacks/", "https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell", "https://www.youtube.com/watch?v=FC6iHw258RI", "https://www.huntress.com/blog/rapid-response-microsoft-exchange-servers-still-vulnerable-to-proxyshell-exploit#what-should-you-do"], "tags": {"analytic_story": ["HAFNIUM Group", "ProxyShell"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Initial Access", "Stage:Execution"], "cve": ["CVE-2021-34473", "CVE-2021-34523", "CVE-2021-31207"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1505.003/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Possible Web Shell execution on $dest$", "mitre_attack_id": ["T1505", "T1505.003"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Server Software Component", "Web Shell"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "Tropic Trooper", "Soft Cell", "Threat Group-3390", "TEMP.Veles", "Leviathan", "APT39", "Dragonfly 2.0", "APT32", "OilRig", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "w3wp_spawning_shell_filter"}]}, {"name": "GetWmiObject Ds Computer with PowerShell", "id": "7141122c-3bc2-4aaa-ab3b-7a85a0bbefc3", "version": 1, "date": "2021-09-07", "author": "Mauricio Velazco, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. The `Get-WmiObject` commandlet combined with the `DS_Computer` parameter can be used to return a list of all domain computers. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain groups for situational awareness and Active Directory Discovery.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=\"powershell.exe\") (Processes.process=*Get-WmiObject* AND Processes.process=\"*namespace root\\\\directory\\\\ldap*\" AND Processes.process=\"*class ds_computer*\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_computer_with_powershell_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-sysmon.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration using WMI on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getwmiobject_ds_computer_with_powershell_filter"}]}, {"name": "Credential Dumping via Copy Command from Shadow Copy", "id": "d8c406fe-23d2-45f3-a983-1abe7b83ff3b", "version": 2, "date": "2021-09-16", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search detects credential dumping using copy command from a shadow copy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` (Processes.process=*\\\\system32\\\\config\\\\sam* OR Processes.process=*\\\\system32\\\\config\\\\security* OR Processes.process=*\\\\system32\\\\config\\\\system* OR Processes.process=*\\\\windows\\\\ntds\\\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `credential_dumping_via_copy_command_from_shadow_copy_filter` ", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "unknown", "references": ["https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf"], "tags": {"analytic_story": ["Credential Dumping"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.003/atomic_red_team/windows-sysmon.log"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$ attempting to copy SAM and NTDS.dit for offline password cracking.", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 81, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=cmd.exe OR Processes.original_file_name=Cmd.Exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_cmd"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "credential_dumping_via_copy_command_from_shadow_copy_filter"}]}, {"name": "Any Powershell DownloadFile", "id": "1a93b7ea-7af7-11eb-adb5-acde48001122", "version": 2, "date": "2021-03-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of PowerShell downloading a file using `DownloadFile` method. This particular method is utilized in many different PowerShell frameworks to download files and output to disk. Identify the source (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell transaction logs are available, review for further details of the implant.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*DownloadFile* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `any_powershell_downloadfile_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "False positives may be present and filtering will need to occur by parent process or command line argument. It may be required to modify this query to an EDR product for more granular coverage.", "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-5.0", "https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/", "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md"], "tags": {"analytic_story": ["Malicious PowerShell", "Ingress Tool Transfer", "Log4Shell CVE-2021-44228"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Exploitation"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/atomic_red_team/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ by user $user$. This behavior identifies the use of DownloadFile within PowerShell.", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=pwsh.exe OR Processes.process_name=sqlps.exe OR Processes.process_name=sqltoolsps.exe OR Processes.process_name=powershell.exe OR Processes.process_name=powershell_ise.exe OR Processes.original_file_name=pwsh.dll OR Processes.original_file_name=PowerShell.EXE OR Processes.original_file_name=powershell_ise.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_powershell"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "any_powershell_downloadfile_filter"}]}, {"name": "PetitPotam Network Share Access Request", "id": "95b8061a-0a67-11ec-85ec-acde48001122", "version": 1, "date": "2021-08-31", "author": "Michael Haag, Mauricio Velazco, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes Windows Event Code 5145, \"A network share object was checked to see whether client can be granted desired access\". During our research into PetitPotam, CVE-2021-36942, we identified the ocurrence of this event on the target host with specific values. \\\nTo enable 5145 events via Group Policy - Computer Configuration->Polices->Windows Settings->Security Settings->Advanced Audit Policy Configuration. Expand this node, go to Object Access (Audit Polices->Object Access), then select the Setting Audit Detailed File Share Audit \\\nIt is possible this is not enabled by default and may need to be reviewed and enabled. \\\nDuring triage, review parallel security events to identify further suspicious activity.", "search": "`wineventlog_security` Account_Name=\"ANONYMOUS LOGON\" EventCode=5145 Relative_Target_Name=lsarpc | stats count min(_time) as firstTime max(_time) as lastTime by dest, Security_ID, Share_Name, Source_Address, Accesses, Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `petitpotam_network_share_access_request_filter`", "how_to_implement": "Windows Event Code 5145 is required to utilize this analytic and it may not be enabled in most environments.", "known_false_positives": "False positives have been limited when the Anonymous Logon is used for Account Name.", "references": ["https://attack.mitre.org/techniques/T1187/", "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=5145", "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-5145"], "tags": {"analytic_story": ["PetitPotam NTLM Relay on Active Directory Certificate Services"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Credential Access"], "cve": ["CVE-2021-36942"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1187/petitpotam/windows-security.log"], "impact": 80, "kill_chain_phases": ["Exploitation", "Lateral Movement"], "message": "A remote host is enumerating a $dest$ to identify permissions. This is a precursor event to CVE-2021-36942, PetitPotam.", "mitre_attack_id": ["T1187"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Security_ID", "Share_Name", "Source_Address", "Accesses", "Message"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Forced Authentication"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["DarkHydrus", "Dragonfly 2.0"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "petitpotam_network_share_access_request_filter"}]}, {"name": "WMI Recon Running Process Or Services", "id": "b5cd5526-cce7-11eb-b3bd-acde48001122", "version": 1, "date": "2021-06-14", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies suspicious PowerShell script execution via EventCode 4104, where WMI is performing an event query looking for running processes or running services. This technique is commonly found in malware and APT events where the adversary will map all running security applications or services on the compromised machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.", "search": "`powershell` EventCode=4104 Message= \"*SELECT*\" AND (Message=\"*Win32_Process*\" OR Message=\"*Win32_Service*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmi_recon_running_process_or_services_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "network administrator may used this command for checking purposes", "references": ["https://news.sophos.com/en-us/2020/05/12/maze-ransomware-1-year-counting/", "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/", "https://github.com/trustedsec/SysmonCommunityGuide/blob/master/WMI-events.md", "https://in.security/an-intro-into-abusing-and-identifying-wmi-event-subscriptions-for-persistence/"], "tags": {"analytic_story": ["Malicious PowerShell"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/pwsh/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Suspicious powerShell script execution by $user$ on $ComputerName$ via EventCode 4104, where WMI is performing an event query looking for running processes or running services", "mitre_attack_id": ["T1592"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmi_recon_running_process_or_services_filter"}]}, {"name": "Schedule Task with Rundll32 Command Trigger", "id": "75b00fd8-a0ff-11eb-8b31-acde48001122", "version": 1, "date": "2021-04-19", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed with a Rundll32. This technique is common in new trickbot that uses rundll32 to load is trickbot downloader. The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\\Windows\\system32` and `C:\\Windows\\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'", "search": "`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (\"*rundll32*\") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden, Arguments | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schedule_task_with_rundll32_command_trigger_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the task schedule (Exa. Security Log EventCode 4698) endpoints. Tune and filter known instances of Task schedule used in your environment.", "known_false_positives": "unknown", "references": ["https://labs.vipre.com/trickbot-and-its-modules/", "https://blog.whitehat.eu/2019/05/incident-trickbot-ryuk-2.html"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Trickbot", "IcedID"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Defense Evasion"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/trickbot/tasksched/windows-security.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A schedule task process commandline rundll32 arguments $Arguments$ in host $dest$", "mitre_attack_id": ["T1053"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "Arguments", "type": "Arguments", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Task_Name", "Command", "Author", "Enabled", "Hidden", "Arguments"], "risk_score": 70, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "schedule_task_with_rundll32_command_trigger_filter"}]}, {"name": "CMLUA Or CMSTPLUA UAC Bypass", "id": "f87b5062-b405-11eb-a889-acde48001122", "version": 1, "date": "2021-05-13", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic detects a potential process using COM Object like CMLUA or CMSTPLUA to bypass UAC. This technique has been used by ransomware adversaries to gain administrative privileges to its running process.", "search": "`sysmon` EventCode=7  ImageLoaded IN (\"*\\\\CMLUA.dll\", \"*\\\\CMSTPLUA.dll\", \"*\\\\CMLUAUTIL.dll\") NOT(process_name IN(\"CMSTP.exe\", \"CMMGR32.exe\")) NOT(Image IN(\"*\\\\windows\\\\*\", \"*\\\\program files*\")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmlua_or_cmstplua_uac_bypass_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and imageloaded executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "Legitimate windows application that are not on the list loading this dll. Filter as needed.", "references": ["https://attack.mitre.org/techniques/T1218/003/"], "tags": {"analytic_story": ["DarkSide Ransomware", "Ransomware"], "automated_detection_testing": "passed", "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548/darkside_cmstp_com/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "The following module $ImageLoaded$ was loaded by a non-standard application on endpoint $Computer$ by user $user$.", "mitre_attack_id": ["T1218", "T1218.003"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "ImageLoaded", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "ImageLoaded", "process_name", "Computer", "EventCode", "Signed", "ProcessId"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "CMSTP"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Cobalt Group", "MuddyWater"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cmlua_or_cmstplua_uac_bypass_filter"}]}, {"name": "SLUI Spawning a Process", "id": "879c4330-b3e0-11eb-b1b1-acde48001122", "version": 1, "date": "2021-05-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the Microsoft Software Licensing User Interface Tool, `slui.exe`, spawning a child process. This behavior is associated with publicly known UAC bypass. `slui.exe` is commonly associated with software updates and is most often spawned by `svchost.exe`. The `slui.exe` process should not have child processes, and any processes spawning from it will be running with elevated privileges. During triage, review the child process and additional parallel processes. Identify any file modifications that may have lead to the bypass.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=slui.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `slui_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Certain applications may spawn from `slui.exe` that are legitimate. Filtering will be needed to ensure proper monitoring.", "references": ["https://www.exploit-db.com/exploits/46998", "https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_sluihijack/", "https://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html"], "tags": {"analytic_story": ["DarkSide Ransomware", "Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "Privilege Escalation"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/slui/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "A slui process $parent_process_name$ spawning child process $process_name$ in host $dest$", "mitre_attack_id": ["T1548.002", "T1548"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Bypass User Access Control", "Abuse Elevation Control Mechanism"], "mitre_attack_tactics": ["Privilege Escalation", "Defense Evasion", "Privilege Escalation", "Defense Evasion"], "mitre_attack_groups": ["APT37", "MuddyWater", "Honeybee", "Cobalt Group", "Threat Group-3390", "BRONZE BUTLER", "Patchwork", "APT29", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "slui_spawning_a_process_filter"}]}, {"name": "Bcdedit Command Back To Normal Mode Boot", "id": "dc7a8004-0f18-11ec-8c54-acde48001122", "version": 1, "date": "2021-09-06", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious bcdedit commandline to configure the host from safe mode back to normal boot configuration. This technique was seen in blackMatter ransomware where it force the compromised host to boot in safe mode to continue its encryption and bring back to normal boot using bcdedit deletevalue command. This TTP can be a good alert for host that booted from safe mode forcefully since it need to modify the boot configuration to bring it back to normal.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=\"*/deletevalue*\" Processes.process=\"*{current}*\"  Processes.process=\"*safeboot*\" by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bcdedit_command_back_to_normal_mode_boot_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA. Tune and filter known instances where renamed rundll32.exe may be used.", "known_false_positives": "unknown", "references": ["https://news.sophos.com/en-us/2021/08/09/blackmatter-ransomware-emerges-from-the-shadow-of-darkside/"], "tags": {"analytic_story": ["BlackMatter Ransomware"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Impact"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1552.002/autoadminlogon/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "bcdedit process with commandline $process$ to bring back to normal boot configuration the $dest$", "mitre_attack_id": ["T1490"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.dest", "Processes.user"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Inhibit System Recovery"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "bcdedit_command_back_to_normal_mode_boot_filter"}]}, {"name": "Suspicious IcedID Rundll32 Cmdline", "id": "bed761f8-ee29-11eb-8bf3-acde48001122", "version": 2, "date": "2021-07-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious rundll32.exe commandline to execute dll file. This technique was seen in IcedID malware to load its payload dll with the following parameter to load encrypted dll payload which is the license.dat.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*/i:* by  Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_icedid_rundll32_cmdline_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "limitted. this parameter is not commonly used by windows application but can be used by the network operator.", "references": ["https://threatpost.com/icedid-banking-trojan-surges-emotet/165314/"], "tags": {"analytic_story": ["IcedID"], "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/icedid/inf_icedid/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "rundll32 process $process_name$ with commandline $process$ in host $dest$", "mitre_attack_id": ["T1218", "T1218.011"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 56, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "Rundll32"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "APT32", "Sandworm Team", "Blue Mockingbird", "TA505", "MuddyWater", "APT29", "APT19", "CopyKittens", "APT3", "Carbanak", "APT28"]}, "macros": [{"definition": "(Processes.process_name=rundll32.exe OR Processes.original_file_name=RUNDLL32.EXE)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_rundll32"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_icedid_rundll32_cmdline_filter"}]}, {"name": "Wbemprox COM Object Execution", "id": "9d911ce0-c3be-11eb-b177-acde48001122", "version": 1, "date": "2021-06-02", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "this search is designed to detect potential malicious process loading COM object to wbemprox.dll,", "search": "`sysmon` EventCode=7  ImageLoaded IN (\"*\\\\fastprox.dll\", \"*\\\\wbemprox.dll\", \"*\\\\wbemcomn.dll\") NOT (process_name IN (\"wmiprvse.exe\", \"WmiApSrv.exe\", \"unsecapp.exe\")) NOT(Image IN(\"*\\\\windows\\\\*\",\"*\\\\program files*\", \"*\\\\wbem\\\\*\")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId Hashes IMPHASH | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wbemprox_com_object_execution_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name and imageloaded executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "legitimate process that are not in the exception list may trigger this event.", "references": ["https://krebsonsecurity.com/2021/05/a-closer-look-at-the-darkside-ransomware-gang/", "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/mcafee-atr-analyzes-sodinokibi-aka-revil-ransomware-as-a-service-what-the-code-tells-us/"], "tags": {"analytic_story": ["Ransomware", "Revil Ransomware"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/revil/inf2/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "Suspicious COM Object Execution on $Computer$", "mitre_attack_id": ["T1218", "T1218.003"], "observable": [{"name": "Computer", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Image", "ImageLoaded", "process_name", "Computer", "EventCode", "Signed", "ProcessId", "Hashes", "IMPHASH"], "risk_score": 35, "security_domain": "endpoint", "mitre_attack_technique": ["Signed Binary Proxy Execution", "CMSTP"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "Cobalt Group", "MuddyWater"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wbemprox_com_object_execution_filter"}]}, {"name": "Ntdsutil Export NTDS", "id": "da63bc76-61ae-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-28", "author": "Michael Haag, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "Monitor for signs that Ntdsutil is being used to Extract Active Directory database - NTDS.dit, typically used for offline password cracking. It may be used in normal circumstances with no command line arguments or shorthand variations of more common arguments. Ntdsutil.exe is typically seen run on a Windows Server. Typical command used to dump ntds.dit \\\nntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\Temp\" q q \\\nThis technique uses \"Install from Media\" (IFM), which will extract a copy of the Active Directory database. A successful export of the Active Directory database will yield a file modification named ntds.dit to the destination.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=ntdsutil.exe Processes.process=*ntds* Processes.process=*create*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `ntdsutil_export_ntds_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints, to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "Highly possible Server Administrators will troubleshoot with ntdsutil.exe, generating false positives.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.003/T1003.003.md#atomic-test-3---dump-active-directory-database-with-ntdsutil", "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc753343(v=ws.11)", "https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf", "https://strontic.github.io/xcyclopedia/library/vss_ps.dll-97B15BDAE9777F454C9A6BA25E938DB3.html"], "tags": {"analytic_story": ["Credential Dumping", "HAFNIUM Group"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 16"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.003/atomic_red_team/windows-sysmon.log"], "impact": 100, "kill_chain_phases": ["Actions on Objectives"], "message": "Active Directory NTDS export on $dest$", "mitre_attack_id": ["T1003.003", "T1003"], "nist": ["DE.CM"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 50, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "ntdsutil_export_ntds_filter"}]}, {"name": "SecretDumps Offline NTDS Dumping Tool", "id": "5672819c-be09-11eb-bbfb-acde48001122", "version": 1, "date": "2021-05-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic detects a potential usage of secretsdump.py tool for dumping credentials (ntlm hash) from a copy of ntds.dit and SAM.Security,SYSTEM registrry hive. This technique was seen in some attacker that dump ntlm hashes offline after having a copy of ntds.dit and SAM/SYSTEM/SECURITY registry hive.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = \"python*.exe\" Processes.process = \"*.py*\" Processes.process = \"*-ntds*\" (Processes.process = \"*-system*\" OR Processes.process = \"*-sam*\" OR Processes.process = \"*-security*\" OR Processes.process = \"*-bootkey*\") by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `secretdumps_offline_ntds_dumping_tool_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py"], "tags": {"analytic_story": ["Credential Dumping"], "automated_detection_testing": "passed", "confidence": 100, "context": ["source:endpoint", {"stage": "Credential Access"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/honeypots/casper/datasets1/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "A secretdump process $process_name$ with secretdump commandline $process$ to dump credentials in host $dest$", "mitre_attack_id": ["T1003.003", "T1003"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.parent_process", "Processes.dest", "Processes.user", "Processes.process_id", "Processes.process_guid"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["NTDS", "OS Credential Dumping"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["FIN6", "Dragonfly 2.0", "APT39", "Frankenstein", "APT32", "APT28", "Leviathan", "Sowbug", "Suckfly", "Poseidon Group", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "secretdumps_offline_ntds_dumping_tool_filter"}]}, {"name": "GetAdComputer with PowerShell Script Block", "id": "a9a1da02-8e27-4bf7-a348-f4389c9da487", "version": 1, "date": "2021-09-01", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGroup` commandlet. The `Get-AdGroup` commandlet is used to return a list of all domain computers. Red Teams and adversaries may leverage this commandlet to enumerate domain computers for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 (Message = \"*Get-AdComputer*\") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `getadcomputer_with_powershell_script_block_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://attack.mitre.org/techniques/T1018/", "https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2019-ps"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1018/AD_discovery/windows-powershell.log"], "impact": 30, "kill_chain_phases": ["Reconnaissance"], "message": "Remote system discovery enumeration on $dest$ by $user$", "mitre_attack_id": ["T1018"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Remote System Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Sandworm Team", "Rocke", "Wizard Spider", "Silence", "Soft Cell", "APT39", "APT32", "Deep Panda", "Threat Group-3390", "Dragonfly 2.0", "Leafminer", "Ke3chang", "FIN8", "APT3", "FIN5", "BRONZE BUTLER", "menuPass", "FIN6", "Turla"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "getadcomputer_with_powershell_script_block_filter"}]}, {"name": "Suspicious Image Creation In Appdata Folder", "id": "f6f904c4-1ac0-11ec-806b-acde48001122", "version": 1, "date": "2021-09-21", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to detect a suspicious creation of image in appdata folder made by process that also has a file reference in appdata folder. This technique was seen in remcos rat that capture screenshot of the compromised machine and place it in the appdata and will be send to its C2 server. This TTP is really a good indicator to check that process because it is in suspicious folder path and image files are not commonly created by user in this folder path.", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*.exe Processes.process_path=\"*\\\\appdata\\\\Roaming\\\\*\" by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (\"*.png\",\"*.jpg\",\"*.bmp\",\"*.gif\",\"*.tiff\") Filesystem.file_path = \"*\\\\appdata\\\\Roaming\\\\*\" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | `suspicious_image_creation_in_appdata_folder_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the Sysmon TA.", "known_false_positives": "unknown", "references": ["https://success.trendmicro.com/solution/1123281-remcos-malware-information", "https://blog.malwarebytes.com/threat-intelligence/2021/07/remcos-rat-delivered-via-visual-basic/"], "tags": {"analytic_story": ["Remcos"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Collection"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/remcos/remcos_agent/sysmon.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "process $process_name$ creating image file $file_path$ in $dest$", "mitre_attack_id": ["T1113"], "observable": [{"name": "Computer", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "file_create_time", "file_name", "file_path", "process_name", "process_path", "process"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Screen Capture"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["Gamaredon Group", "APT39", "Silence", "MuddyWater", "Dragonfly 2.0", "OilRig", "Dark Caracal", "FIN7", "BRONZE BUTLER", "Magic Hound", "Group5", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_image_creation_in_appdata_folder_filter"}]}, {"name": "Disabling FolderOptions Windows Feature", "id": "83776de4-921a-11eb-868a-acde48001122", "version": 1, "date": "2021-03-31", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search is to identify registry modification to disable folder options feature of windows to show hidden files, file extension and etc. This technique used by malware in combination if disabling show hidden files feature to hide their files and also to hide the file extension to lure the user base on file icons or fake file extensions.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= \"*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoFolderOptions\" Registry.registry_value_data = \"0x00000001\" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_folderoptions_windows_feature_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Registry` node. Also make sure that this registry was included in your config files ex. sysmon config to be monitored.", "known_false_positives": "admin may disable this application for non technical user.", "references": ["https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry"], "tags": {"analytic_story": ["Windows Defense Evasion Tactics"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-security.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-system.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.001/win_app_defender_disabling/windows-sysmon.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "The Windows Folder Options, to hide files, was disabled on $dest$ by $user$.", "mitre_attack_id": ["T1562.001", "T1562"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.registry_key_name", "Registry.registry_path", "Registry.user", "Registry.dest", "Registry.registry_value_name"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Disable or Modify Tools", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["Gamaredon Group", "BRONZE BUTLER", "Rocke", "Kimsuky", "Turla", "Night Dragon", "Gorgon Group", "Lazarus Group", "Putter Panda", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "disabling_folderoptions_windows_feature_filter"}]}, {"name": "Office Product Spawning BITSAdmin", "id": "e8c591f4-a6d7-11eb-8cf7-acde48001122", "version": 2, "date": "2021-04-26", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `bitsadmin.exe`. In malicious instances, the command-line of `bitsadmin.exe` will contain a URL to a remote destination or similar command-line arguments as transfer, Download, priority, Foreground. In addition, Threat Research has released a detections identifying suspicious use of `bitsadmin.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `bitsadmin.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (\"winword.exe\",\"excel.exe\",\"powerpnt.exe\",\"mspub.exe\",\"visio.exe\") `process_bitsadmin` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_bitsadmin_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "No false positives known. Filter as needed.", "references": ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1197/T1197.md"], "tags": {"analytic_story": ["Spearphishing Attachments"], "automated_detection_testing": "passed", "confidence": 90, "context": ["source:endpoint", {"stage": "recon"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/macro/windows-sysmon_macros.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "office parent process $parent_process_name$ will execute a suspicious child process $process_name$ with process id $process_id$ in host $dest$", "mitre_attack_id": ["T1566", "T1566.001"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "process_name", "type": "process_name", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 63, "security_domain": "endpoint", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=bitsadmin.exe OR Processes.original_file_name=bitsadmin.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_bitsadmin"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "office_product_spawning_bitsadmin_filter"}]}, {"name": "Get DomainPolicy with Powershell Script Block", "id": "a360d2b2-065a-11ec-b0bf-acde48001122", "version": 1, "date": "2021-08-26", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get DomainPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.", "search": "`powershell` EventCode=4104 Message =\"*Get-DomainPolicy*\" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainpolicy_with_powershell_script_block_filter`", "how_to_implement": "The following Hunting analytic requires PowerShell operational logs to be imported. Modify the powershell macro as needed to match the sourcetype or add index. This analytic is specific to 4104, or PowerShell Script Block Logging.", "known_false_positives": "Administrators or power users may use this command for troubleshooting.", "references": ["https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainPolicy/", "https://attack.mitre.org/techniques/T1201/"], "tags": {"analytic_story": ["Active Directory Discovery"], "automated_detection_testing": "passed", "confidence": 60, "context": ["source:endpoint", "stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1201/pwd_policy_discovery/windows-powershell.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance"], "message": "powershell process having commandline $Message$ to query domain policy.", "mitre_attack_id": ["T1201"], "observable": [{"name": "ComputerName", "type": "Hostname", "role": ["Victim"]}, {"name": "User", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "ComputerName", "User"], "risk_score": 30, "security_domain": "endpoint", "mitre_attack_technique": ["Password Policy Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Turla", "OilRig"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "get_domainpolicy_with_powershell_script_block_filter"}]}, {"name": "Runas Execution in CommandLine", "id": "4807e716-43a4-11ec-a0e7-acde48001122", "version": 1, "date": "2021-11-12", "author": "Teoderick Contreras, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This analytic look for a spawned runas.exe process with a administrator user option parameter. This parameter was abused by adversaries, malware author or even red teams to gain elevated privileges in target host. This is a good hunting query to figure out privilege escalation tactics that may used for different stages like lateral movement but take note that administrator may use this command in purpose so its better to see other event context before and after this analytic.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_runas` AND Processes.process = \"*/user:*\" AND Processes.process = \"*admin*\" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `runas_execution_in_commandline_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition, confirm the latest CIM App 4.20 or higher is installed and the latest TA for the endpoint product.", "known_false_positives": "A network operator or systems administrator may utilize an automated or manual execute this command that may generate false positives. filter is needed.", "references": ["https://app.any.run/tasks/ad4c3cda-41f2-4401-8dba-56cc2d245488/#"], "tags": {"analytic_story": ["Windows Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/malware/vilsel/sysmon.log"], "impact": 50, "kill_chain_phases": ["Privilege Escalation"], "message": "elevated process using runas on $dest$ by $user$", "mitre_attack_id": ["T1134", "T1134.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Access Token Manipulation", "Token Impersonation/Theft"], "mitre_attack_tactics": ["Defense Evasion", "Privilege Escalation", "Defense Evasion", "Privilege Escalation"], "mitre_attack_groups": ["Blue Mockingbird", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name=runas.exe OR Processes.original_file_name=runas.exe)", "description": "Matches the process with its original file name, data for this macro came from https://strontic.github.io/", "name": "process_runas"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "runas_execution_in_commandline_filter"}]}, {"name": "Log4Shell JNDI Payload Injection Attempt", "id": "c184f12e-5c90-11ec-bf1f-497c9a704a72", "version": 1, "date": "2021-12-13", "author": "Jose Hernandez", "type": "Anomaly", "datamodel": ["Web"], "description": "CVE-2021-44228 Log4Shell payloads can be injected via various methods, but on of the most common vectors injection is via Web calls. Many of the vulnerable java web applications that are using log4j have a web component to them are specially targets of this injection, specifically projects like Apache Struts, Flink, Druid, and Solr. The exploit is triggered by a LDAP lookup function in the log4j package, its invocation is similar to `${jndi:ldap://PAYLOAD_INJECTED}`, when executed against vulnerable web applications the invocation can be seen in various part of web logs. Specifically it has been successfully exploited via headers like X-Forwarded-For, User-Agent, Referer, and X-Api-Version. In this detection we first limit the scope of our search to the Web Datamodel and use the `| from datamodel` function to benefit from schema accelerated searching capabilities, mainly because the second part of the detection is pretty heavy, it runs a regex across all _raw events that looks for `${jndi:ldap://` pattern across all potential web fields available to the raw data, like http headers for example. If you see results for this detection, it means that there was a attempt at a injection, which could be a reconnaissance activity or a valid expliotation attempt, but this does not exactly mean that the host was indeed successfully exploited.", "search": "| from datamodel Web.Web | regex _raw=\"[jJnNdDiI]{4}(\\:|\\%3A|\\/|\\%2F)\\w+(\\:\\/\\/|\\%3A\\%2F\\%2F)(\\$\\{.*?\\}(\\.)?)?\" | fillnull | stats count by action, category, dest, dest_port, http_content_type, http_method, http_referrer, http_user_agent, site, src, url, url_domain, user | `log4shell_jndi_payload_injection_attempt_filter`", "how_to_implement": "This detection requires the Web datamodel to be populated from a supported Technology Add-On like Splunk for Apache or Splunk for Nginx.", "known_false_positives": "If there is a vulnerablility scannner looking for log4shells this will trigger, otherwise likely to have low false positives.", "references": ["https://www.lunasec.io/docs/blog/log4j-zero-day/"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 30, "context": ["Source:Application Log", "Stage:Execution"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/log4j_proxy_logs/log4j_proxy_logs.log"], "impact": 50, "kill_chain_phases": ["Reconnaissance", "Exploitation"], "message": "CVE-2021-44228 Log4Shell triggered for host $dest$", "mitre_attack_id": ["T1190"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["action", "category", "dest", "dest_port", "http_content_type", "http_method", "http_referrer", "http_user_agent", "site", "src", "url", "url_domain", "user"], "risk_score": 15, "security_domain": "threat", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "log4shell_jndi_payload_injection_attempt_filter"}]}, {"name": "Log4Shell JNDI Payload Injection with Outbound Connection", "id": "69afee44-5c91-11ec-bf1f-497c9a704a72", "version": 1, "date": "2021-12-13", "author": "Jose Hernandez", "type": "Anomaly", "datamodel": ["Network_Traffic", "Web"], "description": "CVE-2021-44228 Log4Shell payloads can be injected via various methods, but on of the most common vectors injection is via Web calls. Many of the vulnerable java web applications that are using log4j have a web component to them are specially targets of this injection, specifically projects like Apache Struts, Flink, Druid, and Solr. The exploit is triggered by a LDAP lookup function in the log4j package, its invocation is similar to `${jndi:ldap://PAYLOAD_INJECTED}`, when executed against vulnerable web applications the invocation can be seen in various part of web logs. Specifically it has been successfully exploited via headers like X-Forwarded-For, User-Agent, Referer, and X-Api-Version. In this detection we match the invocation function with a network connection to a malicious ip address.", "search": "| from datamodel Web.Web | rex field=_raw max_match=0 \"[jJnNdDiI]{4}(\\:|\\%3A|\\/|\\%2F)(?<proto>\\w+)(\\:\\/\\/|\\%3A\\%2F\\%2F)(\\$\\{.*?\\}(\\.)?)?(?<affected_host>[a-zA-Z0-9\\.\\-\\_\\$]+)\" | join affected_host type=inner [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic.All_Traffic by All_Traffic.dest | `drop_dm_object_name(All_Traffic)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename dest AS affected_host] | fillnull | stats count by action, category, dest, dest_port, http_content_type, http_method, http_referrer, http_user_agent, site, src, url, url_domain, user | `log4shell_jndi_payload_injection_with_outbound_connection_filter`", "how_to_implement": "This detection requires the Web datamodel to be populated from a supported Technology Add-On like Splunk for Apache or Splunk for Nginx.", "known_false_positives": "If there is a vulnerablility scannner looking for log4shells this will trigger, otherwise likely to have low false positives.", "references": ["https://www.lunasec.io/docs/blog/log4j-zero-day/"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 5", "CIS 16"], "confidence": 30, "context": ["Source:Application Log", "Stage:Execution"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/log4j_proxy_logs/log4j_proxy_logs.log", "https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/log4j_network_logs/log4j_network_logs.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "CVE-2021-44228 Log4Shell triggered for host $dest$", "mitre_attack_id": ["T1190"], "nist": ["DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["action", "category", "dest", "dest_port", "http_content_type", "http_method", "http_referrer", "http_user_agent", "site", "src", "url", "url_domain", "user"], "risk_score": 15, "security_domain": "threat", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "log4shell_jndi_payload_injection_with_outbound_connection_filter"}]}, {"name": "Multiple Archive Files Http Post Traffic", "id": "4477f3ea-a28f-11eb-b762-acde48001122", "version": 1, "date": "2021-04-21", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search is designed to detect high frequency of archive files data exfiltration through HTTP POST method protocol. This are one of the common techniques used by APT or trojan spy after doing the data collection like screenshot, recording, sensitive data to the infected machines. The attacker may execute archiving command to the collected data, save it a temp folder with a hidden attribute then send it to its C2 through HTTP POST. Sometimes adversaries will rename the archive files or encode/encrypt to cover their tracks. This detection can detect a renamed archive files transfer to HTTP POST since it checks the request body header. Unfortunately this detection cannot support archive that was encrypted or encoded before doing the exfiltration.", "search": "`stream_http` http_method=POST |eval archive_hdr1=substr(form_data,1,2) | eval archive_hdr2 = substr(form_data,1,4) |stats values(form_data) as http_request_body min(_time) as firstTime max(_time) as lastTime count by http_method http_user_agent uri_path url bytes_in bytes_out archive_hdr1 archive_hdr2 |where count >20 AND (archive_hdr1 = \"7z\" OR archive_hdr1 = \"PK\" OR archive_hdr2=\"Rar!\") | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `multiple_archive_files_http_post_traffic_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the stream HTTP logs or network logs that catch network traffic. Make sure that the http-request-body, payload, or request field is enabled in stream http configuration.", "known_false_positives": "Normal archive transfer via HTTP protocol may trip this detection.", "references": ["https://attack.mitre.org/techniques/T1560/001/", "https://www.fireeye.com/blog/threat-research/2019/01/apt39-iranian-cyber-espionage-group-focused-on-personal-information.html", "https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"], "tags": {"analytic_story": ["Command and Control", "Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/archive_http_post/stream_http_events.log"], "impact": 50, "kill_chain_phases": ["Exfiltration"], "message": "A http post $http_method$ sending packet with possible archive bytes header 4form_data$ in uri path $uri_path$", "mitre_attack_id": ["T1048.003", "T1048"], "observable": [{"name": "uri_path", "type": "UriPath", "role": ["Attacker"]}, {"name": "form_data", "type": "formdata", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "http_method", "http_user_agent", "uri_path", "url", "bytes_in", "bytes_out", "archive_hdr1", "archive_hdr2", "form_data"], "risk_score": 25, "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group", "no"]}, "macros": [{"definition": "sourcetype=stream:http", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_http"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_archive_files_http_post_traffic_filter"}]}, {"name": "Detect hosts connecting to dynamic domain providers", "id": "c77162d3-f93c-45cc-80c8-22f6v5464g9f", "version": 3, "date": "2021-01-14", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Network_Resolution"], "description": "Malicious actors often abuse legitimate Dynamic DNS services to host malicious payloads or interactive command and control nodes. Attackers will automate domain resolution changes by routing dynamic domains to countless IP addresses to circumvent firewall blocks, block lists as well as frustrate a network defenders analytic and investigative processes. This search will look for DNS queries made from within your infrastructure to suspicious dynamic domains.", "search": "| tstats `security_content_summariesonly` count values(DNS.answer) as answer min(_time) as firstTime from datamodel=Network_Resolution by DNS.query host | `drop_dm_object_name(\"DNS\")` | `security_content_ctime(firstTime)` | `dynamic_dns_providers` | `detect_hosts_connecting_to_dynamic_domain_providers_filter`", "how_to_implement": "First, you'll need to ingest data from your DNS operations. This can be done by ingesting logs from your server or data, collected passively by Splunk Stream or a similar solution. Specifically, data that contains the domain that is being queried and the IP of the host originating the request must be populating the `Network_Resolution` data model. This search also leverages a lookup file, `dynamic_dns_providers_default.csv`, which contains a non-exhaustive list of Dynamic DNS providers. Please consider updating the local lookup periodically by adding new domains to the list of `dynamic_dns_providers_local.csv`.\\\nThis search produces fields (query, answer, isDynDNS) that are not yet supported by ES Incident Review and therefore cannot be viewed when a notable event is raised. These fields contribute additional context to the notable event. To see the additional metadata, add the following fields, if not already present, to Incident Review. Event Attributes (Configure > Incident Management > Incident Review Settings > Add New Entry):\\\\n1. **Label:** DNS Query, **Field:** query\\\n1. \\\n1. **Label:** DNS Answer, **Field:** answer\\\n1. \\\n1. **Label:** IsDynamicDNS, **Field:** isDynDNS\\\nDetailed documentation on how to create a new field within Incident Review may be found here: `https://docs.splunk.com/Documentation/ES/5.3.0/Admin/Customizenotables#Add_a_field_to_the_notable_event_details`", "known_false_positives": "Some users and applications may leverage Dynamic DNS to reach out to some domains on the Internet since dynamic DNS by itself is not malicious, however this activity must be verified.", "references": [], "tags": {"analytic_story": ["Data Protection", "Prohibited Traffic Allowed or Protocol Mismatch", "DNS Hijacking", "Suspicious DNS Traffic", "Dynamic DNS", "Command and Control"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 12", "CIS 13"], "confidence": 80, "context": ["source:endpoint", {"stage": "Initial Access"}], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1189/dyn_dns_site/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "A dns query $query$ from your infra connecting to suspicious domain in host  $host$", "mitre_attack_id": ["T1189"], "nist": ["PR.DS", "PR.PT", "DE.AE", "DE.CM"], "observable": [{"name": "host", "type": "Hostname", "role": ["Victim"]}, {"name": "query", "type": "dnsquery", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.answer", "DNS.query", "host"], "risk_score": 56, "security_domain": "network", "mitre_attack_technique": ["Drive-by Compromise"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Turla", "Windshift", "RTM", "Darkhotel", "APT38", "Dragonfly 2.0", "BRONZE BUTLER", "Leafminer", "Dark Caracal", "APT19", "APT32", "Lazarus Group", "Threat Group-3390", "Elderwood", "APT37", "Patchwork", "PLATINUM"]}, "macros": [{"definition": "lookup update=true dynamic_dns_providers_default dynamic_dns_domains as query OUTPUTNEW isDynDNS_default | lookup update=true dynamic_dns_providers_local dynamic_dns_domains as query OUTPUTNEW isDynDNS_local| eval isDynDNS = coalesce(isDynDNS_default, isDynDNS_local)|fields - isDynDNS_default, isDynDNS_local| search isDynDNS=True", "description": "This macro limits the output of the query field to dynamic dns domains. It looks up the domains in a file provided by Splunk and one intended to be updated by the end user.", "name": "dynamic_dns_providers", "lookups": [{"case_sensitive_match": "false", "description": "A list of dynammic dns providers that should not be modified", "filename": "dynamic_dns_providers_default.csv", "match_type": "WILDCARD(dynamic_dns_domains)", "name": "dynamic_dns_providers_default", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/dynamic_dns_providers_default.csv"}, {"case_sensitive_match": "false", "description": "A list of dynammic dns providers that can be modified", "filename": "dynamic_dns_providers_local.csv", "match_type": "WILDCARD(dynamic_dns_domains)", "name": "dynamic_dns_providers_local", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/dynamic_dns_providers_local.csv"}]}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_hosts_connecting_to_dynamic_domain_providers_filter"}]}, {"name": "Plain HTTP POST Exfiltrated Data", "id": "e2b36208-a364-11eb-8909-acde48001122", "version": 1, "date": "2021-04-22", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search is to detect potential plain HTTP POST method data exfiltration. This network traffic is commonly used by trickbot, trojanspy, keylogger or APT adversary where arguments or commands are sent in plain text to the remote C2 server using HTTP POST method as part of data exfiltration.", "search": "`stream_http` http_method=POST form_data IN (\"*wermgr.exe*\",\"*svchost.exe*\", \"*name=\\\"proclist\\\"*\",\"*ipconfig*\", \"*name=\\\"sysinfo\\\"*\", \"*net view*\") |stats values(form_data) as http_request_body min(_time) as firstTime max(_time) as lastTime count by http_method http_user_agent uri_path url bytes_in bytes_out | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `plain_http_post_exfiltrated_data_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the stream HTTP logs or network logs that catch network traffic. Make sure that the http-request-body, payload, or request field is enabled.", "known_false_positives": "unknown", "references": ["https://blog.talosintelligence.com/2020/03/trickbot-primer.html"], "tags": {"analytic_story": ["Command and Control", "Data Exfiltration"], "automated_detection_testing": "passed", "confidence": 90, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/plain_exfil_data/stream_http_events.log"], "impact": 70, "kill_chain_phases": ["Exfiltration"], "message": "A http post $http_method$ sending packet with plain text of information $form_data$ in uri path $uri_path$", "mitre_attack_id": ["T1048.003", "T1048"], "observable": [{"name": "uri_path", "type": "UriPath", "role": ["Attacker"]}, {"name": "form_data", "type": "formdata", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "http_method", "http_user_agent", "uri_path", "url", "bytes_in", "bytes_out"], "risk_score": 63, "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group", "no"]}, "macros": [{"definition": "sourcetype=stream:http", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_http"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "plain_http_post_exfiltrated_data_filter"}]}, {"name": "DNS Query Length With High Standard Deviation", "id": "1a67f15a-f4ff-4170-84e9-08cf6f75d6f5", "version": 4, "date": "2021-10-06", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Network_Resolution"], "description": "This search allows you to identify DNS requests and compute the standard deviation on the length of the names being resolved, then filter on two times the standard deviation to show you those queries that are unusually large for your environment.", "search": "| tstats `security_content_summariesonly` count from datamodel=Network_Resolution where NOT DNS.message_type IN(\"Pointer\",\"PTR\") by DNS.query | `drop_dm_object_name(\"DNS\")` | eval tlds=split(query,\".\") | eval tld=mvindex(tlds,-1) | eval tld_len=len(tld) | search tld_len<=24 | eval query_length = len(query) | table query query_length record_type count | eventstats stdev(query_length) AS stdev avg(query_length) AS avg p50(query_length) AS p50| where query_length>(avg+stdev*2) | eval z_score=(query_length-avg)/stdev | `dns_query_length_with_high_standard_deviation_filter`", "how_to_implement": "To successfully implement this search, you will need to ensure that DNS data is populating the Network_Resolution data model.", "known_false_positives": "It's possible there can be long domain names that are legitimate.", "references": [], "tags": {"analytic_story": ["Hidden Cobra Malware", "Suspicious DNS Traffic", "Command and Control"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 8", "CIS 12"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1048.003/long_dns_queries/windows-sysmon.log"], "impact": 70, "kill_chain_phases": ["Command and Control"], "message": "A dns query $query$ with 2 time standard deviation of name len of the dns query in host  $host$", "mitre_attack_id": ["T1048.003", "T1048"], "nist": ["PR.PT", "DE.AE", "DE.CM"], "observable": [{"name": "host", "type": "Hostname", "role": ["Victim"]}, {"name": "query", "type": "dnsquery", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.query"], "risk_score": 56, "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dns_query_length_with_high_standard_deviation_filter"}]}, {"name": "Detect Outbound LDAP Traffic", "id": "c77162d3-f91c-45cc-80c8-22f6v546119f", "version": 1, "date": "2021-12-13", "author": "Bhavin Patel, Johan Bjerke, Splunk", "type": "Hunting", "datamodel": ["Network_Traffic"], "description": "Malicious actors often abuse misconfigured LDAP servers or applications that use the LDAP servers in organizations. Outbound LDAP traffic should not be allowed outbound through your perimeter firewall.  This search will help determine if you have any LDAP connections to IP addresses outside of private (RFC1918) address space.", "search": "| tstats earliest(_time) as earliest_time latest(_time) as latest_time values(All_Traffic.dest_ip) as dest_ip from datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port = 389 OR All_Traffic.dest_port = 636 AND NOT (All_Traffic.dest_ip = 10.0.0.0/8 OR All_Traffic.dest_ip=192.168.0.0/16 OR All_Traffic.dest_ip = 172.16.0.0/12) by All_Traffic.src_ip All_Traffic.dest_ip |`drop_dm_object_name(\"All_Traffic\")` | where src_ip != dest_ip | `security_content_ctime(latest_time)`  | `security_content_ctime(earliest_time)` |`detect_outbound_ldap_traffic_filter`", "how_to_implement": "You must be ingesting Zeek DNS and Zeek Conn data into Splunk. Zeek data should also be getting ingested in JSON format and should be mapped to the Network Traffic datamodels that are in use for this search.", "known_false_positives": "Unknown at this moment. Outbound LDAP traffic should not be allowed outbound through your perimeter firewall. Please check those servers to verify if the activity is legitimate.", "references": ["https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 12", "CIS 13"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Initial Access"], "cve": ["CVE-2021-44228"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/outbound_ldap/bro_conn.json"], "impact": 70, "kill_chain_phases": ["Command and Control", "Actions on Objectives"], "message": "An outbound LDAP connection from $src_ip$ in your infrastructure connecting to dest ip $dest_ip$", "mitre_attack_id": ["T1190", "T1059"], "nist": ["PR.DS", "PR.PT", "DE.AE", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Victim"]}, {"name": "dest_ip", "type": "IP Address", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.dest_ip", "All_Traffic.dest_port", "All_Traffic.src_ip"], "risk_score": 56, "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application", "Command and Scripting Interpreter"], "mitre_attack_tactics": ["Initial Access", "Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom", "APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_outbound_ldap_traffic_filter"}]}, {"name": "Detect Baron Samedit CVE-2021-3156 Segfault", "id": "10f2bae0-bbe6-4984-808c-37dc1c67980d", "version": 1, "date": "2021-01-29", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the heap-based buffer overflow of sudoedit", "search": "`linux_hosts` | search sudoedit segfault | stats count min(_time) as firstTime max(_time) as lastTime by host | search count > 5 | `detect_baron_samedit_cve_2021_3156_segfault_filter`", "how_to_implement": "Splunk Universal Forwarder running on Linux systems (tested on Centos and Ubuntu), where segfaults are being logged.  This also captures instances where the exploit has been compiled into a binary. The detection looks for greater than 5 instances of sudoedit combined with segfault over your search time period on a single host", "known_false_positives": "If sudoedit is throwing segfaults for other reasons this will pick those up too.", "references": ["https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit"], "tags": {"analytic_story": ["Baron Samedit CVE-2021-3156"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 12", "CIS 16"], "cve": ["CVE-2021-3156"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1068"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "host"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"definition": "index=*", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "linux_hosts"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_baron_samedit_cve_2021_3156_segfault_filter"}]}, {"name": "Processes Tapping Keyboard Events", "id": "2a371608-331d-4034-ae2c-21dda8f1d0ec", "version": 1, "date": "2019-01-25", "author": "Jose Hernandez, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for processes in an MacOS system that is tapping keyboard events in MacOS, and essentially monitoring all keystrokes made by a user. This is a common technique used by RATs to log keystrokes from a victim, although it can also be used by legitimate processes like Siri to react on human input", "search": "| from datamodel Alerts.Alerts | search app=osquery:results name=pack_osx-attacks_Keyboard_Event_Taps | rename columns.cmdline as cmd, columns.name as process_name, columns.pid as process_id| dedup host,process_name | table host,process_name, cmd, process_id | `processes_tapping_keyboard_events_filter`", "how_to_implement": "In order to properly run this search, Splunk needs to ingest data from your osquery deployed agents with the [osx-attacks.conf](https://github.com/facebook/osquery/blob/experimental/packs/osx-attacks.conf#L599) pack enabled. Also the [TA-OSquery](https://github.com/d1vious/TA-osquery) must be deployed across your indexers and universal forwarders in order to have the osquery data populate the Alerts data model.", "known_false_positives": "There might be some false positives as keyboard event taps are used by processes like Siri and Zoom video chat, for some good examples of processes to exclude please see [this](https://github.com/facebook/osquery/pull/5345#issuecomment-454639161) comment.", "references": [], "tags": {"analytic_story": ["ColdRoot MacOS RAT"], "asset_type": "Endpoint", "cis20": ["CIS 4", "CIS 8"], "kill_chain_phases": ["Command and Control"], "nist": ["DE.DP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "app", "name", "columns.cmdline", "columns.name", "columns.pid", "host"], "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "processes_tapping_keyboard_events_filter"}]}, {"name": "Remote Desktop Process Running On System", "id": "f5939373-8054-40ad-8c64-cec478a22a4a", "version": 5, "date": "2020-07-21", "author": "David Dorsey, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "This search looks for the remote desktop process mstsc.exe running on systems upon which it doesn't typically run. This is accomplished by filtering out all systems that are noted in the `common_rdp_source category` in the Assets and Identity framework.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=*mstsc.exe AND Processes.dest_category!=common_rdp_source by Processes.dest Processes.user Processes.process | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `remote_desktop_process_running_on_system_filter` ", "how_to_implement": "To successfully implement this search, you must be ingesting data that records process activity from your hosts to populate the endpoint data model in the processes node. The search requires you to identify systems that do not commonly use remote desktop. You can use the included support search \"Identify Systems Using Remote Desktop\" to identify these systems. After identifying them, you will need to add the \"common_rdp_source\" category to that system using the Enterprise Security Assets and Identities framework. This can be done by adding an entry in the assets.csv file located in `SA-IdentityManagement/lookups`.", "known_false_positives": "Remote Desktop may be used legitimately by users on the network.", "references": [], "tags": {"analytic_story": ["Hidden Cobra Malware", "Active Directory Lateral Movement"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 9", "CIS 16"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1021.001", "T1021"], "nist": ["DE.AE", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.dest_category", "Processes.dest", "Processes.user"], "security_domain": "endpoint", "mitre_attack_technique": ["Remote Desktop Protocol", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "TEMP.Veles", "Leviathan", "APT39", "Stolen Pencil", "Cobalt Group", "Dragonfly 2.0", "FIN8", "APT3", "OilRig", "menuPass", "FIN10", "Patchwork", "FIN6", "Lazarus Group", "APT1", "Axiom", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_desktop_process_running_on_system_filter"}]}, {"name": "Detect Rare Executables", "id": "44fddcb2-8d3b-454c-874e-7c6de5a4f7ac", "version": 5, "date": "2020-03-16", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search will return a table of rare processes, the names of the systems running them, and the users who initiated each process.", "search": "| tstats `security_content_summariesonly` count values(Processes.dest) as dest values(Processes.user) as user min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.process_name  | rename Processes.process_name as process | rex field=user \"(?<user_domain>.*)\\\\\\\\(?<user_name>.*)\" | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| search [| tstats count from datamodel=Endpoint.Processes by Processes.process_name | rare Processes.process_name limit=30 | rename Processes.process_name as process| `filter_rare_process_allow_list`| table process ] | `detect_rare_executables_filter` ", "how_to_implement": "To successfully implement this search, you must be ingesting data that records process activity from your hosts and populating the endpoint data model with the resultant dataset. The macro `filter_rare_process_allow_list` searches two lookup files for allowed processes.  These consist of `rare_process_allow_list_default.csv` and `rare_process_allow_list_local.csv`. To add your own processes to the allow list, add them to `rare_process_allow_list_local.csv`. If you wish to remove an entry from the default lookup file, you will have to modify the macro itself to set the allow_list value for that process to false. You can modify the limit parameter and search scheduling to better suit your environment.", "known_false_positives": "Some legitimate processes may be only rarely executed in your environment. As these are identified, update `rare_process_allow_list_local.csv` to filter them out of your search results.", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Unusual Processes", "Cloud Federated Credential Abuse"], "asset_type": "Endpoint", "cis20": ["CIS 2", "CIS 8"], "kill_chain_phases": ["Installation", "Command and Control", "Actions on Objectives"], "nist": ["ID.AM", "PR.PT", "PR.DS", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.process_name"], "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "lookup update=true lookup_rare_process_allow_list_default process as process OUTPUTNEW allow_list | where allow_list=\"false\" | lookup update=true lookup_rare_process_allow_list_local process as process OUTPUT allow_list | where allow_list=\"false\"", "description": "This macro is intended to allow_list processes that have been definied as rare", "name": "filter_rare_process_allow_list", "lookups": [{"case_sensitive_match": "false", "default_match": "false", "description": "A list of rare processes that are legitimate that is provided by Splunk", "filename": "rare_process_allow_list_default.csv", "match_type": "WILDCARD(process)", "min_matches": 1, "name": "lookup_rare_process_allow_list_default", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/rare_process_allow_list_default.csv"}, {"case_sensitive_match": "false", "default_match": "false", "description": "A list of rare processes that are legitimate provided by the end user", "filename": "rare_process_allow_list_local.csv", "match_type": "WILDCARD(process)", "min_matches": 1, "name": "lookup_rare_process_allow_list_local", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/rare_process_allow_list_local.csv"}]}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rare_executables_filter"}]}, {"name": "Unusual Number of Computer Service Tickets Requested", "id": "ac3b81c0-52f4-11ec-ac44-acde48001122", "version": 1, "date": "2021-12-01", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic leverages Event ID 4769, `A Kerberos service ticket was requested`, to identify an unusual number of computer service ticket requests from one source. When a domain joined endpoint connects to a remote endpoint, it first will request a Kerberos Ticket with the computer name as the Service Name. An endpoint requesting a large number of computer service tickets for different endpoints could represent malicious behavior like lateral movement, malware staging, reconnaissance, etc.\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of service requests. To customize this analytic, users can try different combinations of the `bucket` span time,  the calculation of the `upperBound` field as well as the Outlier calculation. This logic can be used for real time security monitoring as well as threat hunting exercises.\\", "search": " `wineventlog_security` EventCode=4769 Service_Name=\"*$\" Account_Name!=\"*$*\" | bucket span=2m _time | stats dc(Service_Name) AS unique_targets values(Service_Name) as host_targets by _time, Client_Address, Account_Name | eventstats avg(unique_targets) as comp_avg , stdev(unique_targets) as comp_std by Client_Address, Account_Name | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_targets >10 and unique_targets >= upperBound, 1, 0) | `unusual_number_of_computer_service_tickets_requested_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Domain Controller and Kerberos events. The Advanced Security Audit policy setting `Audit Kerberos Authentication Service` within `Account Logon` needs to be enabled.", "known_false_positives": "An single endpoint requesting a large number of computer service tickets is not common behavior. Possible false positive scenarios include but are not limited to vulnerability scanners, administration systeams and missconfigured systems.", "references": ["https://attack.mitre.org/techniques/T1078/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "impact": 70, "kill_chain_phases": ["Reconnaissance", "Exploitation", "Lateral Movement"], "message": null, "mitre_attack_id": ["T1078"], "observable": [{"name": "Client_Address", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Ticket_Options", "Ticket_Encryption_Type", "dest", "service", "service_id"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusual_number_of_computer_service_tickets_requested_filter"}]}, {"name": "WMI Temporary Event Subscription", "id": "38cbd42c-1098-41bb-99cf-9d6d2b296d83", "version": 1, "date": "2018-10-23", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for the creation of WMI temporary event subscriptions.", "search": "`wmi` EventCode=5860 Temporary | rex field=Message \"NotificationQuery =\\s+(?<query>[^;|^$]+)\" | search query!=\"SELECT * FROM Win32_ProcessStartTrace WHERE ProcessName = 'wsmprovhost.exe'\" AND query!=\"SELECT * FROM __InstanceOperationEvent WHERE TargetInstance ISA 'AntiVirusProduct' OR TargetInstance ISA 'FirewallProduct' OR TargetInstance ISA 'AntiSpywareProduct'\" | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName, query  | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `wmi_temporary_event_subscription_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting the Windows WMI activity logs. This can be done by adding a stanza to inputs.conf on the system generating logs with a title of [WinEventLog://Microsoft-Windows-WMI-Activity/Operational].", "known_false_positives": "Some software may create WMI temporary event subscriptions for various purposes. The included search contains an exception for two of these that occur by default on Windows 10 systems. You may need to modify the search to create exceptions for other legitimate events.", "references": [], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 5"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "query"], "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "sourcetype=\"wineventlog:microsoft-windows-wmi-activity/operational\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wmi"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmi_temporary_event_subscription_filter"}]}, {"name": "Child Processes of Spoolsv exe", "id": "aa0c4aeb-5b18-41c4-8c07-f1442d7599df", "version": 3, "date": "2020-03-16", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for child processes of spoolsv.exe. This activity is associated with a POC privilege-escalation exploit associated with CVE-2018-8440. Spoolsv.exe is the process associated with the Print Spooler service in Windows and typically runs as SYSTEM.", "search": "| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=spoolsv.exe AND Processes.process_name!=regsvr32.exe by Processes.dest Processes.parent_process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `child_processes_of_spoolsv_exe_filter` ", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model. Update the `children_of_spoolsv_filter` macro to filter out legitimate child processes spawned by spoolsv.exe.", "known_false_positives": "Some legitimate printer-related processes may show up as children of spoolsv.exe. You should confirm that any activity as legitimate and may be added as exclusions in the search.", "references": [], "tags": {"analytic_story": ["Windows Privilege Escalation"], "asset_type": "Endpoint", "cis20": ["CIS 5", "CIS 8"], "cve": ["CVE-2018-8440"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1068"], "nist": ["PR.AC", "PR.PT", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.process_name", "Processes.dest", "Processes.parent_process", "Processes.user"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "child_processes_of_spoolsv_exe_filter"}]}, {"name": "Detect Outlook exe writing a zip file", "id": "a51bfe1a-94f0-4822-b1e4-16ae10145893", "version": 3, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for execution of process `outlook.exe` where the process is writing a `.zip` file to the disk.", "search": "| tstats `security_content_summariesonly`  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_name=outlook.exe OR Processes.process_name=explorer.exe by _time span=5m Processes.parent_process_id Processes.process_id Processes.dest Processes.process_name Processes.parent_process_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename process_id as malicious_id| rename parent_process_id as outlook_id| join malicious_id type=inner[| tstats `security_content_summariesonly` count values(Filesystem.file_path) as file_path values(Filesystem.file_name) as file_name  FROM datamodel=Endpoint.Filesystem where (Filesystem.file_path=*zip*   OR Filesystem.file_name=*.lnk ) AND (Filesystem.file_path=C:\\\\Users* OR Filesystem.file_path=*Local\\\\Temp*) by  _time span=5m Filesystem.process_id Filesystem.file_hash Filesystem.dest  | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename process_id as malicious_id| fields malicious_id outlook_id dest file_path file_name file_hash count file_id] | table firstTime lastTime user malicious_id outlook_id process_name parent_process_name file_name  file_path | where file_name != \"\" | `detect_outlook_exe_writing_a_zip_file_filter` ", "how_to_implement": "You must be ingesting data that records filesystem and process activity from your hosts to populate the Endpoint data model. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or endpoint data sources, such as Sysmon.", "known_false_positives": "It is not uncommon for outlook to write legitimate zip files to the disk.", "references": [], "tags": {"analytic_story": ["Spearphishing Attachments"], "asset_type": "Endpoint", "cis20": ["CIS 7", "CIS 8"], "kill_chain_phases": ["Installation", "Actions on Objectives"], "mitre_attack_id": ["T1566", "T1566.001"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.parent_process_id", "Processes.process_id", "Processes.dest", "Processes.parent_process_name", "Processes.user"], "security_domain": "network", "mitre_attack_technique": ["Phishing", "Spearphishing Attachment"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_outlook_exe_writing_a_zip_file_filter"}]}, {"name": "Linux Java Spawning Shell", "id": "7b09db8a-5c20-11ec-9945-acde48001122", "version": 1, "date": "2021-12-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the process name of Java, Apache, or Tomcat spawning a Linux shell. This is potentially indicative of exploitation of the Java application and may be related to current event CVE-2021-44228 (Log4Shell). The shells included in the macro are \"sh\", \"ksh\", \"zsh\", \"bash\", \"dash\", \"rbash\", \"fish\", \"csh', \"tcsh', \"ion\", \"eshell\". Upon triage, review parallel processes and command-line arguments to determine legitimacy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=java OR Processes.parent_process_name=apache OR Processes.parent_process_name=tomcat `linux_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_java_spawning_shell_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon for Linux, you will need to ensure mapping is occurring correctly. Ensure EDR product is mapping OS Linux to the datamodel properly. Add any additional java process names for your environment to the analytic as needed.", "known_false_positives": "Filtering may be required on internal developer build systems or classify assets as web facing and restrict the analytic based on that.", "references": ["https://blog.netlab.360.com/ten-families-of-malicious-samples-are-spreading-using-the-log4j2-vulnerability-now/", "https://gist.github.com/olafhartong/916ebc673ba066537740164f7e7e1d72"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-44228"], "dataset": [], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ spawning a Linux shell, potentially indicative of exploitation.", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "(Processes.process_name IN (\"sh\", \"ksh\", \"zsh\", \"bash\", \"dash\", \"rbash\", \"fish\", \"csh', \"tcsh', \"ion\", \"eshell\"))", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "linux_shells"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "linux_java_spawning_shell_filter"}]}, {"name": "WinRM Spawning a Process", "id": "a081836a-ba4d-11eb-8593-acde48001122", "version": 1, "date": "2021-05-21", "author": "Drew Church, Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies suspicious processes spawning from WinRM (wsmprovhost.exe). This analytic is related to potential exploitation of CVE-2021-31166. which is a kernel-mode device driver http.sys vulnerability. Current proof of concept code will blue-screen the operating system. However, http.sys used by many different Windows processes, including WinRM. In this case, identifying suspicious process create (child processes) from `wsmprovhost.exe` is what this analytic is identifying.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=wsmprovhost.exe Processes.process_name IN (\"cmd.exe\",\"sh.exe\",\"bash.exe\",\"powershell.exe\",\"pwsh.exe\",\"schtasks.exe\",\"certutil.exe\",\"whoami.exe\",\"bitsadmin.exe\",\"scp.exe\") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winrm_spawning_a_process_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Unknown. Add new processes or filter as needed. It is possible system management software may spawn processes from `wsmprovhost.exe`.", "references": ["https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_access/win_susp_shell_spawn_from_winrm.yml", "https://www.zerodayinitiative.com/blog/2021/5/17/cve-2021-31166-a-wormable-code-execution-bug-in-httpsys", "https://github.com/0vercl0k/CVE-2021-31166/blob/main/cve-2021-31166.py"], "tags": {"analytic_story": ["Unusual Processes"], "cve": ["CVE-2021-31166"], "dataset": [], "kill_chain_phases": ["Exploitation", "Privilege Escalation", "Denial of Service"], "mitre_attack_id": ["T1190"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "winrm_spawning_a_process_filter"}]}, {"name": "Sunburst Correlation DLL and Network Event", "id": "701a8740-e8db-40df-9190-5516d3819787", "version": 1, "date": "2020-12-14", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "The malware sunburst will load the malicious dll by SolarWinds.BusinessLayerHost.exe. After a period of 12-14 days, the malware will attempt to resolve a subdomain of avsvmcloud.com. This detections will correlate both events.", "search": "(`sysmon` EventCode=7 ImageLoaded=*SolarWinds.Orion.Core.BusinessLayer.dll) OR (`sysmon` EventCode=22 QueryName=*avsvmcloud.com) | eventstats dc(EventCode) AS dc_events | where dc_events=2 | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) AS ImageLoaded values(QueryName) AS QueryName by host | rename host as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `sunburst_correlation_dll_and_network_event_filter` ", "how_to_implement": "This detection relies on sysmon logs with the Event ID 7, Driver loaded. Please tune your sysmon config that you DriverLoad event for SolarWinds.Orion.Core.BusinessLayer.dll is captured by Sysmon. Additionally, you need sysmon logs for Event ID 22, DNS Query. We suggest to run this detection at least once a day over the last 14 days.", "known_false_positives": "unknown", "references": ["https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html"], "tags": {"analytic_story": ["NOBELIUM Group"], "asset_type": "Windows", "cis20": ["CIS 6", "CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1203"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "ImageLoaded", "QueryName"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Client Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Sandworm Team", "MuddyWater", "Frankenstein", "Inception", "BlackTech", "APT41", "admin@338", "Threat Group-3390", "APT12", "The White Company", "APT33", "APT32", "APT28", "Tropic Trooper", "Lazarus Group", "BRONZE BUTLER", "Cobalt Group", "APT37", "Patchwork", "Leviathan", "Elderwood", "TA459", "APT29"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational OR source=Syslog:Linux-Sysmon/Operational", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "sysmon"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sunburst_correlation_dll_and_network_event_filter"}]}, {"name": "Unusual Number of Remote Endpoint Authentication Events", "id": "acb5dc74-5324-11ec-a36d-acde48001122", "version": 1, "date": "2021-12-01", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic leverages Event ID 4624, `An account was successfully logged on`, to identify an unusual number of remote authentication attempts coming from one source. An endpoint authenticating to a large number of remote endpoints could represent malicious behavior like lateral movement, malware staging, reconnaissance, etc.\\\nThe detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual high number of authentication events. To customize this analytic, users can try different combinations of the `bucket` span time,  the calculation of the `upperBound` field as well as the Outlier calculation. This logic can be used for real time security monitoring as well as threat hunting exercises.\\", "search": " `wineventlog_security` EventCode=4624 Logon_Type=3 Account_Name!=\"*$\" | eval Source_Account = mvindex(Account_Name, 1) | bucket span=2m _time | stats dc(ComputerName) AS unique_targets values(ComputerName) as target_hosts by _time, Source_Network_Address, Source_Account | eventstats avg(unique_targets) as comp_avg , stdev(unique_targets) as comp_std by Source_Network_Address, Source_Account | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_targets >10 and unique_targets >= upperBound, 1, 0) `unusual_number_of_remote_endpoint_authentication_events_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Event Logs from domain controllers aas well as member servers and workstations. The Advanced Security Audit policy setting `Audit Logon` within `Logon/Logoff` needs to be enabled.", "known_false_positives": "An single endpoint authenticating to a large number of hosts is not common behavior. Possible false positive scenarios include but are not limited to vulnerability scanners, jump servers and missconfigured systems.", "references": ["https://attack.mitre.org/techniques/T1078/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "confidence": 60, "context": ["Source:Endpoint", "Stage:Reconnaissance", "Stage:Lateral Movement"], "impact": 70, "kill_chain_phases": ["Reconnaissance", "Lateral Movement"], "message": null, "mitre_attack_id": ["T1078"], "observable": [{"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Logon_Type", "Caller_Process_Name", "Security_ID", "Account_Name", "ComputerName"], "risk_score": 42, "security_domain": "endpoint", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusual_number_of_remote_endpoint_authentication_events_filter"}]}, {"name": "Unusually Long Command Line - MLTK", "id": "57edaefa-a73b-45e5-bbae-f39c1473f941", "version": 1, "date": "2019-05-08", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": [], "description": "Command lines that are extremely long may be indicative of malicious activity on your hosts. This search leverages the Machine Learning Toolkit (MLTK) to help identify command lines with lengths that are unusual for a given user.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes by Processes.user Processes.dest Processes.process_name Processes.process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| eval processlen=len(process) | search user!=unknown | apply cmdline_pdfmodel threshold=0.01 | rename \"IsOutlier(processlen)\" as isOutlier | search isOutlier > 0 | table firstTime lastTime user dest process_name process processlen count | `unusually_long_command_line___mltk_filter`", "how_to_implement": "You must be ingesting endpoint data that monitors command lines and populates the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model. In addition, MLTK version >= 4.2 must be installed on your search heads, along with any required dependencies. Finally, the support search \"Baseline of Command Line Length - MLTK\" must be executed before this detection search, as it builds an ML model over the historical data used by this search. It is important that this search is run in the same app context as the associated support search, so that the model created by the support search is available for use. You should periodically re-run the support search to rebuild the model with the latest data available in your environment.", "known_false_positives": "Some legitimate applications use long command lines for installs or updates. You should review identified command lines for legitimacy. You may modify the first part of the search to omit legitimate command lines from consideration. If you are seeing more results than desired, you may consider changing the value of threshold in the search to a smaller value. You should also periodically re-run the support search to re-build the ML model on the latest data. You may get unexpected results if the user identified in the results is not present in the data used to build the associated model.", "references": [], "tags": {"analytic_story": ["Suspicious Command-Line Executions", "Unusual Processes", "Possible Backdoor Activity Associated With MUDCARP Espionage Campaigns", "Ransomware"], "asset_type": "", "cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "nist": ["PR.PT", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.user", "Processes.dest", "Processes.process_name", "Processes.process"], "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusually_long_command_line___mltk_filter"}]}, {"name": "Detect Computer Changed with Anonymous Account", "id": "1400624a-d42d-484d-8843-e6753e6e3645", "version": 1, "date": "2020-09-18", "author": "Rod Soto, Jose Hernandez, Splunk", "type": "Hunting", "datamodel": [], "description": "This search looks for Event Code 4742 (Computer Change) or EventCode 4624 (An account was successfully logged on) with an anonymous account.", "search": "`wineventlog_security` EventCode=4624 OR EventCode=4742 TargetUserName=\"ANONYMOUS LOGON\" LogonType=3 | stats count values(host) as host, values(TargetDomainName) as Domain, values(user) as user | `detect_computer_changed_with_anonymous_account_filter`", "how_to_implement": "This search requires audit computer account management to be enabled on the system in order to generate Event ID 4742. We strongly recommend that you specify your environment-specific configurations (index, source, sourcetype, etc.) for Windows Event Logs. Replace the macro definition with configurations for your Splunk environment. The search also uses a post-filter macro designed to filter out known false positives.", "known_false_positives": "None thus far found", "references": ["https://www.lares.com/blog/from-lares-labs-defensive-guidance-for-zerologon-cve-2020-1472/"], "tags": {"analytic_story": ["Detect Zerologon Attack"], "asset_type": "Windows", "cis20": ["CIS 6", "CIS 8"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "cve": ["CVE-2020-1472"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "The following $EventCode$ occurred on $dest$ by $user$ with Logon Type 3, which may be indicative of the an account or group being changed by an anonymous account.", "mitre_attack_id": ["T1210"], "nist": ["DE.AE", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "EventCode", "type": "Other", "role": ["Other"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "TargetUserName", "LogonType", "TargetDomainName", "user"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation of Remote Services"], "mitre_attack_tactics": ["Lateral Movement"], "mitre_attack_groups": ["Threat Group-3390", "APT28"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_computer_changed_with_anonymous_account_filter"}]}, {"name": "Randomly Generated Scheduled Task Name", "id": "9d22a780-5165-11ec-ad4f-3e22fbd008af", "version": 1, "date": "2021-11-29", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic leverages Event ID 4698, `A scheduled task was created`, to identify the creation of a Scheduled Task with a suspicious, high entropy, Task Name. To achieve this, this analytic also leverages the `ut_shannon` function from the URL ToolBox Splunk application. Red teams and adversaries alike may abuse the Task Scheduler to create and start a remote Scheduled Task and obtain remote code execution. To achieve this goal, tools like Impacket or Crapmapexec, typically create a Scheduled Task with a random task name on the victim host. This hunting analytic may help defenders identify Scheduled Tasks created as part of a lateral movement attack. The entropy threshold `ut_shannon > 3` should be customized by users. The Command field can be used to determine if the task has malicious intent or not.", "search": " `wineventlog_security` EventCode=4698 | xmlkv Message | lookup ut_shannon_lookup word as Task_Name | where ut_shannon > 3 | table  _time, dest, Task_Name, ut_shannon, Command, Author, Enabled, Hidden | `randomly_generated_scheduled_task_name_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting Windows Security Event Logs with 4698 EventCode enabled. The Windows TA as well as the URL ToolBox application are also required.", "known_false_positives": "Legitimate applications may use random Scheduled Task names.", "references": ["https://attack.mitre.org/techniques/T1053/005/", "https://splunkbase.splunk.com/app/2734/", "https://en.wikipedia.org/wiki/Entropy_(information_theory)"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Persistence", "Stage:Lateral Movement"], "impact": 90, "kill_chain_phases": ["Privilege Escalation", "Lateral Movement", "Persistence"], "message": "A windows scheduled task with a suspicious task name was created on $dest$", "mitre_attack_id": ["T1053", "T1053.005"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "Task_Name", "Description", "Command"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Scheduled Task/Job", "Scheduled Task"], "mitre_attack_tactics": ["Execution", "Persistence", "Privilege Escalation", "Execution", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Gamaredon Group", "Blue Mockingbird", "MuddyWater", "Wizard Spider", "Frankenstein", "APT-C-36", "BRONZE BUTLER", "APT41", "Machete", "Soft Cell", "Silence", "TEMP.Veles", "APT33", "APT39", "Dragonfly 2.0", "Patchwork", "OilRig", "Rancor", "Cobalt Group", "FIN8", "menuPass", "FIN10", "APT32", "FIN7", "Stealth Falcon", "FIN6", "APT3", "APT29"]}, "macros": [{"definition": "eventtype=wineventlog_security", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_security"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "randomly_generated_scheduled_task_name_filter"}]}, {"name": "Spike in File Writes", "id": "fdb0f805-74e4-4539-8c00-618927333aae", "version": 3, "date": "2020-03-16", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": [], "description": "The search looks for a sharp increase in the number of files written to a particular host", "search": "| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created by _time span=1h, Filesystem.dest | `drop_dm_object_name(Filesystem)` | eventstats max(_time) as maxtime | stats count as num_data_samples max(eval(if(_time >= relative_time(maxtime, \"-1d@d\"), count, null))) as \"count\" avg(eval(if(_time<relative_time(maxtime, \"-1d@d\"), count,null))) as avg stdev(eval(if(_time<relative_time(maxtime, \"-1d@d\"), count, null))) as stdev by \"dest\" | eval upperBound=(avg+stdev*4), isOutlier=if((count > upperBound) AND num_data_samples >=20, 1, 0) | search isOutlier=1 | `spike_in_file_writes_filter` ", "how_to_implement": "In order to implement this search, you must populate the Endpoint file-system data model node. This is typically populated via endpoint detection and response product, such as Carbon Black or endpoint data sources such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the file system.", "known_false_positives": "It is important to understand that if you happen to install any new applications on your hosts or are copying a large number of files, you can expect to see a large increase of file modifications.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware", "Ryuk Ransomware", "Ransomware"], "asset_type": "Endpoint", "cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.action", "Filesystem.dest"], "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "spike_in_file_writes_filter"}]}, {"name": "Exchange PowerShell Module Usage", "id": "2d10095e-05ae-11ec-8fdf-acde48001122", "version": 1, "date": "2021-08-27", "author": "Michael Haag", "type": "TTP", "datamodel": [], "description": "The following analytic identifies the usage of Exchange PowerShell modules that were recently used for a proof of concept related to ProxyShell. Currently, there is no active data shared or data we could re-produce relate to this part of the ProxyShell chain of exploits.  \\\nInherently, the usage of the modules is not malicious, but reviewing parallel processes, and user, of the session will assist with determining the intent. \\\nModule - New-MailboxExportRequest will begin the process of exporting contents of a primary mailbox or archive to a .pst file. \\\nModule - New-managementroleassignment can assign a management role to a management role group, management role assignment policy, user, or universal security group (USG).", "search": "`powershell` EventCode=4104 Message IN (\"*New-MailboxExportRequest*\", \"*New-ManagementRoleAssignment*\") | stats count min(_time) as firstTime max(_time) as lastTime by Path Message OpCode ComputerName User EventCode| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `exchange_powershell_module_usage_filter`", "how_to_implement": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.", "known_false_positives": "Administrators or power users may use this PowerShell commandlet for troubleshooting.", "references": ["https://docs.microsoft.com/en-us/powershell/module/exchange/new-mailboxexportrequest?view=exchange-ps", "https://docs.microsoft.com/en-us/powershell/module/exchange/new-managementroleassignment?view=exchange-ps", "https://blog.orange.tw/2021/08/proxyshell-a-new-attack-surface-on-ms-exchange-part-3.html", "https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell", "https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/"], "tags": {"analytic_story": ["ProxyShell"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Discovery", "Stage:Recon"], "dataset": [], "impact": 30, "kill_chain_phases": ["Reconnaissance", "Exploitation"], "message": "Local user discovery enumeration using PowerShell on $dest$ by $user$", "mitre_attack_id": ["T1059", "T1059.001"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Path", "Message", "OpCode", "ComputerName", "User", "EventCode"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": ["Command and Scripting Interpreter", "PowerShell"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["APT32", "Molerats", "Whitefly", "Dragonfly 2.0", "APT19", "FIN7", "OilRig", "FIN5", "Stealth Falcon", "FIN6", "Ke3chang", "Blue Mockingbird", "APT39", "DarkVishnya", "Molerats", "Wizard Spider", "Frankenstein", "Inception", "Silence", "APT41", "Kimsuky", "Soft Cell", "TA505", "WIRTE", "TEMP.Veles", "APT33", "Gallmaker", "Turla", "APT19", "DarkHydrus", "APT28", "Thrip", "Gorgon Group", "Cobalt Group", "Dragonfly 2.0", "Leviathan", "TA459", "FIN8", "MuddyWater", "Magic Hound", "OilRig", "BRONZE BUTLER", "CopyKittens", "APT32", "FIN7", "FIN10", "Threat Group-3390", "menuPass", "Patchwork", "Stealth Falcon", "FIN6", "Poseidon Group", "APT3", "APT29", "Deep Panda"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "(source=WinEventLog:Microsoft-Windows-PowerShell/Operational OR source=\"XmlWinEventLog:Microsoft-Windows-PowerShell/Operational\")", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "powershell"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "exchange_powershell_module_usage_filter"}]}, {"name": "Detect Baron Samedit CVE-2021-3156 via OSQuery", "id": "1de31d5d-8fa6-4ee0-af89-17069134118a", "version": 1, "date": "2021-01-28", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the heap-based buffer overflow of sudoedit", "search": "`osquery_process` | search \"columns.cmdline\"=\"sudoedit -s \\\\*\" | `detect_baron_samedit_cve_2021_3156_via_osquery_filter`", "how_to_implement": "OSQuery installed and configured to pick up process events (info at https://osquery.io) as well as using the Splunk OSQuery Add-on https://splunkbase.splunk.com/app/4402. The vulnerability is exposed when a non privledged user tries passing in a single \\ character at the end of the command while using the shell and edit flags.", "known_false_positives": "unknown", "references": ["https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit"], "tags": {"analytic_story": ["Baron Samedit CVE-2021-3156"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 12", "CIS 16"], "cve": ["CVE-2021-3156"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1068"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "columns.cmdline"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"definition": "eventtype=\"osquery-process\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "osquery_process"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_baron_samedit_cve_2021_3156_via_osquery_filter"}]}, {"name": "First Time Seen Child Process of Zoom", "id": "e91bd102-d630-4e76-ab73-7e3ba22c5961", "version": 1, "date": "2020-05-20", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Endpoint"], "description": "This search looks for child processes spawned by zoom.exe or zoom.us that has not previously been seen.", "search": "| tstats `security_content_summariesonly` min(_time) as firstTime values(Processes.parent_process_name) as parent_process_name values(Processes.parent_process_id) as parent_process_id values(Processes.process_name) as process_name values(Processes.process) as process from datamodel=Endpoint.Processes where (Processes.parent_process_name=zoom.exe OR Processes.parent_process_name=zoom.us) by Processes.process_id Processes.dest | `drop_dm_object_name(Processes)` | lookup zoom_first_time_child_process dest as dest process_name as process_name OUTPUT firstTimeSeen | where isnull(firstTimeSeen) OR firstTimeSeen > relative_time(now(), \"`previously_seen_zoom_child_processes_window`\") | `security_content_ctime(firstTime)` | table firstTime dest, process_id, process_name, parent_process_id, parent_process_name |`first_time_seen_child_process_of_zoom_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You should run the baseline search `Previously Seen Zoom Child Processes - Initial` to build the initial table of child processes and hostnames for this search to work. You should also schedule at the same interval as this search the second baseline search `Previously Seen Zoom Child Processes - Update` to keep this table up to date and to age out old child processes. Please update the `previously_seen_zoom_child_processes_window` macro to adjust the time window.", "known_false_positives": "A new child process of zoom isn't malicious by that fact alone. Further investigation of the actions of the child process is needed to verify any malicious behavior is taken.", "references": [], "tags": {"analytic_story": ["Suspicious Zoom Child Processes"], "asset_type": "Endpoint", "automated_detection_testing": "passed", "cis20": ["CIS 3", "CIS 8"], "confidence": 80, "context": ["Source:Endpoint", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1068/zoom_child_process/windows-sysmon.log"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "Child process $process_name$ with $process_id$ spawned by zoom.exe or zoom.us which has not been previously on host $dest$", "mitre_attack_id": ["T1068"], "nist": ["PR.PT", "DE.CM", "PR.IP"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "process_name", "type": "Process Name", "role": ["Attacker", "Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.parent_process_name", "Processes.parent_process_id", "Processes.process_name", "Processes.process", "Processes.parent_process_name", "Processes.process_id", "Processes.dest"], "risk_score": 64, "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"description": "Use this macro to determine how far back you should be checking for new zoom child processes", "definition": "\"-70m@m\"", "name": "previously_seen_zoom_child_processes_window"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "first_time_seen_child_process_of_zoom_filter"}], "lookups": [{"description": "A list of suspicious file names", "collection": "zoom_first_time_child_process", "name": "zoom_first_time_child_process", "fields_list": "_key, dest, process_name, firstTimeSeen, lastTimeSeen"}]}, {"name": "First Time Seen Running Windows Service", "id": "823136f2-d755-4b6d-ae04-372b486a5808", "version": 4, "date": "2020-07-21", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for the first and last time a Windows service is seen running in your environment. This table is then cached.", "search": "`wineventlog_system` EventCode=7036 | rex field=Message \"The (?<service>[-\\(\\)\\s\\w]+) service entered the (?<state>\\w+) state\" | where state=\"running\" | lookup previously_seen_running_windows_services service as service OUTPUT firstTimeSeen | where isnull(firstTimeSeen) OR firstTimeSeen > relative_time(now(), `previously_seen_windows_services_window`) | table _time dest service | `first_time_seen_running_windows_service_filter`", "how_to_implement": "While this search does not require you to adhere to Splunk CIM, you must be ingesting your Windows system event logs in order for this search to execute successfully. You should run the baseline search `Previously Seen Running Windows Services - Initial` to build the initial table of child processes and hostnames for this search to work. You should also schedule at the same interval as this search the second baseline search `Previously Seen Running Windows Services - Update` to keep this table up to date and to age out old Windows Services. Please update the `previously_seen_windows_services_window` macro to adjust the time window. Please ensure that the Splunk Add-on for Microsoft Windows is version 8.0.0 or above.", "known_false_positives": "A previously unseen service is not necessarily malicious. Verify that the service is legitimate and that was installed by a legitimate process.", "references": [], "tags": {"analytic_story": ["Windows Service Abuse", "Orangeworm Attack Group", "NOBELIUM Group"], "asset_type": "Endpoint", "cis20": ["CIS 2", "CIS 9"], "kill_chain_phases": ["Installation", "Actions on Objectives"], "mitre_attack_id": ["T1569", "T1569.002"], "nist": ["ID.AM", "PR.DS", "PR.AC", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "dest"], "security_domain": "endpoint", "mitre_attack_technique": ["System Services", "Service Execution"], "mitre_attack_tactics": ["Execution", "Execution"], "mitre_attack_groups": ["no", "Blue Mockingbird", "APT39", "APT41", "Silence", "FIN6", "APT32", "Honeybee", "Ke3chang"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"description": "Use this macro to determine how far back you should be checking for new Windows services", "definition": "\"-70m@m\"", "name": "previously_seen_windows_services_window"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "first_time_seen_running_windows_service_filter"}], "lookups": [{"description": "A placeholder for the list of Windows Services running", "collection": "previously_seen_running_windows_services", "name": "previously_seen_running_windows_services", "fields_list": "_key, service, firstTimeSeen, lastTimeSeen"}]}, {"name": "Randomly Generated Windows Service Name", "id": "2032a95a-5165-11ec-a2c3-3e22fbd008af", "version": 1, "date": "2021-11-29", "author": "Mauricio Velazco, Splunk", "type": "Hunting", "datamodel": ["Endpoint"], "description": "The following hunting analytic leverages Event ID 7045, `A new service was installed in the system`, to identify the installation of a Windows Service with a suspicious, high entropy, Service Name. To achieve this, this analytic also leverages the `ut_shannon` function from the URL ToolBox Splunk application. Red teams and adversaries alike may abuse the Service Control Manager to create and start a remote Windows Service and obtain remote code execution. To achieve this goal, some tools like Metasploit, Cobalt Strike and Impacket, typically create a Windows Service with a random service name on the victim host. This hunting analytic may help defenders identify Windows Services installed as part of a lateral movement attack. The entropy threshold `ut_shannon > 3` should be customized by users. The Service_File_Name field can be used to determine if the Windows Service has malicious intent or not.", "search": " `wineventlog_system` EventCode=7045 | lookup ut_shannon_lookup word as Service_Name | where ut_shannon > 3 | table EventCode ComputerName Service_Name ut_shannon Service_Start_Type Service_Type Service_File_Name | `randomly_generated_windows_service_name_filter` ", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the Service name, Service File Name Service Start type, and Service Type from your endpoints. The Windows TA as well as the URL ToolBox application are also required.", "known_false_positives": "Legitimate applications may use random Windows Service names.", "references": ["https://attack.mitre.org/techniques/T1543/003/"], "tags": {"analytic_story": ["Active Directory Lateral Movement"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Lateral Movement"], "impact": 90, "kill_chain_phases": ["Privilege Escalation", "Lateral Movement"], "message": "A Windows Service with a suspicious service name was installed on $ComputerName$", "mitre_attack_id": ["T1543", "T1543.003"], "observable": [{"name": "Service_File_Name", "type": "Other", "role": ["Other"]}, {"name": "ComputerName", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "ComputerName", "Service_File_Name", "Service_Type", "Service_Name", "Service_Start_Type"], "risk_score": 45, "security_domain": "endpoint", "mitre_attack_technique": ["Create or Modify System Process", "Windows Service"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "Blue Mockingbird", "DarkVishnya", "Wizard Spider", "APT32", "APT41", "Kimsuky", "Tropic Trooper", "Cobalt Group", "Ke3chang", "Honeybee", "FIN7", "Threat Group-3390", "APT19", "APT3", "Lazarus Group", "Carbanak"]}, "macros": [{"definition": "eventtype=wineventlog_system", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wineventlog_system"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "randomly_generated_windows_service_name_filter"}]}, {"name": "MacOS - Re-opened Applications", "id": "40bb64f9-f619-4e3d-8732-328d40377c4b", "version": 1, "date": "2020-02-07", "author": "Jamie Windley, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for processes referencing the plist files that determine which applications are re-opened when a user reboots their machine.", "search": "| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=\"*com.apple.loginwindow*\" by Processes.user Processes.process_name Processes.parent_process_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `macos___re_opened_applications_filter`", "how_to_implement": "In order to properly run this search, Splunk needs to ingest process data from your osquery deployed agents with the [splunk.conf](https://github.com/splunk/TA-osquery/blob/master/config/splunk.conf) pack enabled. Also the [TA-OSquery](https://github.com/splunk/TA-osquery) must be deployed across your indexers and universal forwarders in order to have the data populate the Endpoint data model.", "known_false_positives": "At this stage, there are no known false positives. During testing, no process events refering the com.apple.loginwindow.plist files were observed during normal operation of re-opening applications on reboot. Therefore, it can be asumed that any occurences of this in the process events would be worth investigating. In the event that the legitimate modification by the system of these files is in fact logged to the process log, then the process_name of that process can be added to an allow list.", "references": [], "tags": {"asset_type": "Endpoint", "cis20": ["CIS 8"], "kill_chain_phases": ["Installation", "Command and Control"], "nist": ["DE.DP", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process", "Processes.user", "Processes.process_name", "Processes.parent_process_name", "Processes.dest"], "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "macos___re_opened_applications_filter"}]}, {"name": "Suspicious Curl Network Connection", "id": "3f613dc0-21f2-4063-93b1-5d3c15eef22f", "version": 1, "date": "2021-02-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of a curl contacting suspicious remote domains to checkin to command and control servers or download further implants. In the context of Silver Sparrow, curl is identified contacting s3.amazonaws.com. This particular behavior is common with MacOS adware-malicious software.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl Processes.process=s3.amazonaws.com by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_curl_network_connection_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Unknown. Filter as needed.", "references": ["https://redcanary.com/blog/clipping-silver-sparrows-wings/", "https://marcosantadev.com/manage-plist-files-plistbuddy/"], "tags": {"analytic_story": ["Silver Sparrow", "Ingress Tool Transfer"], "asset_type": "Endpoint", "dataset": [], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1105"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Ingress Tool Transfer"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["Sandworm Team", "Whitefly", "Rocke", "APT39", "Tropic Trooper", "Sharpshooter", "Molerats", "Frankenstein", "Silence", "APT-C-36", "APT41", "Soft Cell", "TA505", "WIRTE", "APT33", "MuddyWater", "APT18", "APT38", "Rancor", "Cobalt Group", "Turla", "Gorgon Group", "OilRig", "Dragonfly 2.0", "APT37", "FIN8", "PLATINUM", "Leviathan", "Elderwood", "Magic Hound", "APT3", "APT32", "BRONZE BUTLER", "menuPass", "FIN7", "Gamaredon Group", "Patchwork", "Lazarus Group", "Threat Group-3390", "APT28"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_curl_network_connection_filter"}]}, {"name": "Exchange PowerShell Abuse via SSRF", "id": "29228ab4-0762-11ec-94aa-acde48001122", "version": 1, "date": "2021-08-27", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "This analytic identifies suspicious behavior related to ProxyShell against on-premise Microsoft Exchange servers. \\\nModification of this analytic is requried to ensure fields are mapped accordingly. \\\nA suspicious event will have `PowerShell`, the method `POST` and `autodiscover.json`. This is indicative of accessing PowerShell on the back end of Exchange with SSRF. \\\nAn event will look similar to `POST /autodiscover/autodiscover.json a=dsxvu@fnsso.flq/powershell/?X-Rps-CAT=VgEAVAdXaW5kb3d...` (abbreviated) \\\nReview the source attempting to perform this activity against your environment. In addition, review PowerShell logs and access recently granted to Exchange roles.", "search": "| `exchange` c_uri=\"*//autodiscover.json*\" cs_uri_query=\"*PowerShell*\" cs_method=\"POST\" | stats count min(_time) as firstTime max(_time) as lastTime by dest, cs_uri_query, cs_method, c_uri | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `exchange_powershell_abuse_via_ssrf_filter`", "how_to_implement": "The following analytic requires on-premise Exchange to be logging to Splunk using the TA - https://splunkbase.splunk.com/app/3225. Ensure logs are parsed correctly, or tune the analytic for your environment.", "known_false_positives": "Limited false positives, however, tune as needed.", "references": ["https://github.com/GossiTheDog/ThreatHunting/blob/master/AzureSentinel/Exchange-Powershell-via-SSRF", "https://blog.orange.tw/2021/08/proxylogon-a-new-attack-surface-on-ms-exchange-part-1.html", "https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1"], "tags": {"analytic_story": ["ProxyShell"], "confidence": 100, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/exchange-events.json"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "Activity related to ProxyShell has been identified on $dest$. Review events and take action accordingly.", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "dest", "cs_uri_query", "cs_method", "c_uri"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "sourcetype=\"MSWindows:IIS\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "exchange"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "exchange_powershell_abuse_via_ssrf_filter"}]}, {"name": "Suspicious PlistBuddy Usage", "id": "c3194009-e0eb-4f84-87a9-4070f8688f00", "version": 1, "date": "2021-02-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of a native MacOS utility, PlistBuddy, creating or modifying a properly list (.plist) file. In the instance of Silver Sparrow, the following commands were executed:\\\n- PlistBuddy -c \"Add :Label string init_verx\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :RunAtLoad bool true\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :StartInterval integer 3600\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments array\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments:0 string /bin/sh\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments:1 string -c\" ~/Library/Launchagents/init_verx.plist \\\nUpon triage, capture the property list file being written to disk and review for further indicators. Contain the endpoint and triage further.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=PlistBuddy (Processes.process=*LaunchAgents* OR Processes.process=*RunAtLoad* OR Processes.process=*true*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |  `suspicious_plistbuddy_usage_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Some legitimate applications may use PlistBuddy to create or modify property lists and possibly generate false positives. Review the property list being modified or created to confirm.", "references": ["https://redcanary.com/blog/clipping-silver-sparrows-wings/", "https://marcosantadev.com/manage-plist-files-plistbuddy/"], "tags": {"analytic_story": ["Silver Sparrow"], "asset_type": "Endpoint", "dataset": [], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1543.001", "T1543"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Launch Agent", "Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_plistbuddy_usage_filter"}]}, {"name": "Suspicious SQLite3 LSQuarantine Behavior", "id": "e1997b2e-655f-4561-82fd-aeba8e1c1a86", "version": 1, "date": "2021-02-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the use of a SQLite3 querying the MacOS preferences to identify the original URL the pkg was downloaded from. This particular behavior is common with MacOS adware-malicious software. Upon triage, review other processes in parallel for suspicious activity. Identify any recent package installations.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=sqlite3 Processes.process=*LSQuarantine* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_sqlite3_lsquarantine_behavior_filter`", "how_to_implement": "To successfully implement this search you need to be ingesting information on process that include the name of the process responsible for the changes from your endpoints into the `Endpoint` datamodel in the `Processes` node.", "known_false_positives": "Unknown.", "references": ["https://redcanary.com/blog/clipping-silver-sparrows-wings/", "https://marcosantadev.com/manage-plist-files-plistbuddy/"], "tags": {"analytic_story": ["Silver Sparrow"], "asset_type": "Endpoint", "dataset": [], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1074"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process_name", "Processes.process", "Processes.dest", "Processes.user", "Processes.parent_process", "Processes.process_id", "Processes.parent_process_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Data Staged"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["Wizard Spider"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_sqlite3_lsquarantine_behavior_filter"}]}, {"name": "Detection of tools built by NirSoft", "id": "1297fb80-f42a-4q4a-9c8b-78c061417cf6", "version": 3, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for specific command-line arguments that may indicate the execution of tools made by Nirsoft, which are legitimate, but may be abused by attackers.", "search": "| tstats `security_content_summariesonly` count min(_time) values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=\"* /stext *\" OR Processes.process=\"* /scomma *\" ) by Processes.parent_process Processes.process_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `detection_of_tools_built_by_nirsoft_filter`", "how_to_implement": "You must be ingesting endpoint data that tracks process activity, including parent-child relationships from your endpoints to populate the Endpoint data model in the Processes node. The command-line arguments are mapped to the \"process\" field in the Endpoint data model.", "known_false_positives": "While legitimate, these NirSoft tools are prone to abuse. You should verfiy that the tool was used for a legitimate purpose.", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A "], "asset_type": "Endpoint", "cis20": ["CIS 3"], "kill_chain_phases": ["Installation", "Actions on Objectives"], "mitre_attack_id": ["T1072"], "nist": ["PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.process", "Processes.parent_process", "Processes.process_name", "Processes.user"], "security_domain": "endpoint", "mitre_attack_technique": ["Software Deployment Tools"], "mitre_attack_tactics": ["Execution", "Lateral Movement"], "mitre_attack_groups": ["Silence", "APT32", "Threat Group-1314"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detection_of_tools_built_by_nirsoft_filter"}]}, {"name": "Windows Java Spawning Shells", "id": "28c81306-5c47-11ec-bfea-acde48001122", "version": 1, "date": "2021-12-13", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The following analytic identifies the process name of java.exe and w3wp.exe spawning a Windows shell. This is potentially indicative of exploitation of the Java application and may be related to current event CVE-2021-44228 (Log4Shell). The shells included in the macro are \"cmd.exe\", \"powershell.exe\". Upon triage, review parallel processes and command-line arguments to determine legitimacy.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=java.exe OR Processes.parent_process_name=w3wp.exe `windows_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_java_spawning_shells_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. Restrict the analytic to publicly facing endpoints to reduce false positives. Add any additional identified web application process name to the query. Add any further Windows process names to the macro (ex. LOLBins) to further expand this query.", "known_false_positives": "Filtering may be required on internal developer build systems or classify assets as web facing and restrict the analytic based on that.", "references": ["https://blog.netlab.360.com/ten-families-of-malicious-samples-are-spreading-using-the-log4j2-vulnerability-now/", "https://gist.github.com/olafhartong/916ebc673ba066537740164f7e7e1d72"], "tags": {"analytic_story": ["Log4Shell CVE-2021-44228"], "confidence": 50, "context": ["Source:Endpoint", "Stage:Defense Evasion"], "cve": ["CVE-2021-44228"], "dataset": [], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$ spawning a Windows shell, potentially indicative of exploitation.", "mitre_attack_id": ["T1190"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "parent_process_name", "type": "Parent Process", "role": ["Parent Process"]}, {"name": "process_name", "type": "Process", "role": ["Child Process"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest", "Processes.user", "Processes.parent_process_name", "Processes.parent_process", "Processes.original_file_name", "Processes.process_name", "Processes.process", "Processes.process_id", "Processes.parent_process_path", "Processes.process_path", "Processes.parent_process_id"], "risk_score": 40, "security_domain": "endpoint", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "(Processes.process_name=cmd.exe OR Processes.process_name=powershell.exe)", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "windows_shells"}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "windows_java_spawning_shells_filter"}]}, {"name": "Detect Baron Samedit CVE-2021-3156", "id": "93fbec4e-0375-440c-8db3-4508eca470c4", "version": 1, "date": "2021-01-27", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the heap-based buffer overflow of sudoedit", "search": "`linux_hosts` | search \"sudoedit -s \\\\\" | `detect_baron_samedit_cve_2021_3156_filter`", "how_to_implement": "Splunk Universal Forwarder running on Linux systems, capturing logs from the /var/log directory. The vulnerability is exposed when a non privledged user tries passing in a single \\ character at the end of the command while using the shell and edit flags.", "known_false_positives": "unknown", "references": ["https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit"], "tags": {"analytic_story": ["Baron Samedit CVE-2021-3156"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 12", "CIS 16"], "cve": ["CVE-2021-3156"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1068"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Privilege Escalation"], "mitre_attack_tactics": ["Privilege Escalation"], "mitre_attack_groups": ["Whitefly", "APT33", "Cobalt Group", "PLATINUM", "FIN8", "APT32", "Threat Group-3390", "FIN6", "APT28"]}, "macros": [{"definition": "index=*", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "linux_hosts"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_baron_samedit_cve_2021_3156_filter"}]}, {"name": "Suspicious PlistBuddy Usage via OSquery", "id": "20ba6c32-c733-4a32-b64e-2688cf231399", "version": 1, "date": "2021-02-22", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic identifies the use of a native MacOS utility, PlistBuddy, creating or modifying a properly list (.plist) file. In the instance of Silver Sparrow, the following commands were executed:\\\n- PlistBuddy -c \"Add :Label string init_verx\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :RunAtLoad bool true\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :StartInterval integer 3600\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments array\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments:0 string /bin/sh\" ~/Library/Launchagents/init_verx.plist \\\n- PlistBuddy -c \"Add :ProgramArguments:1 string -c\" ~/Library/Launchagents/init_verx.plist \\\nUpon triage, capture the property list file being written to disk and review for further indicators. Contain the endpoint and triage further.", "search": "`osquery_process` \"columns.cmdline\"=\"*LaunchAgents*\" OR \"columns.cmdline\"=\"*RunAtLoad*\" OR \"columns.cmdline\"=\"*true*\" |  `suspicious_plistbuddy_usage_via_osquery_filter`", "how_to_implement": "OSQuery must be installed and configured to pick up process events (info at https://osquery.io) as well as using the Splunk OSQuery Add-on https://splunkbase.splunk.com/app/4402. Modify the macro and validate fields are correct.", "known_false_positives": "Some legitimate applications may use PlistBuddy to create or modify property lists and possibly generate false positives. Review the property list being modified or created to confirm.", "references": ["https://redcanary.com/blog/clipping-silver-sparrows-wings/", "https://marcosantadev.com/manage-plist-files-plistbuddy/"], "tags": {"analytic_story": ["Silver Sparrow"], "asset_type": "Endpoint", "dataset": [], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1543.001", "T1543"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "columns.cmdline"], "security_domain": "endpoint", "mitre_attack_technique": ["Launch Agent", "Create or Modify System Process"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation", "Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "eventtype=\"osquery-process\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "osquery_process"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_plistbuddy_usage_via_osquery_filter"}]}, {"name": "WMI Permanent Event Subscription", "id": "71bfdb13-f200-4c6c-b2c9-a2e07adf437d", "version": 1, "date": "2018-10-23", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for the creation of WMI permanent event subscriptions.", "search": "`wmi` EventCode=5861 Binding | rex field=Message \"Consumer =\\s+(?<consumer>[^;|^$]+)\" | search consumer!=\"NTEventLogEventConsumer=\\\"SCM Event Log Consumer\\\"\" | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName, consumer, Message | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | rename ComputerName as dest | `wmi_permanent_event_subscription_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting the Windows WMI activity logs. This can be done by adding a stanza to inputs.conf on the system generating logs with a title of [WinEventLog://Microsoft-Windows-WMI-Activity/Operational].", "known_false_positives": "Although unlikely, administrators may use event subscriptions for legitimate purposes.", "references": [], "tags": {"analytic_story": ["Suspicious WMI Use"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 5"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1047"], "nist": ["PR.PT", "PR.AT", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "EventCode", "Message", "consumer", "ComputerName"], "security_domain": "endpoint", "mitre_attack_technique": ["Windows Management Instrumentation"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Frankenstein", "APT41", "FIN6", "Soft Cell", "APT32", "MuddyWater", "OilRig", "Threat Group-3390", "FIN8", "Leviathan", "menuPass", "Stealth Falcon", "Lazarus Group", "APT29", "Deep Panda"]}, "macros": [{"definition": "sourcetype=\"wineventlog:microsoft-windows-wmi-activity/operational\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "wmi"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "wmi_permanent_event_subscription_filter"}]}, {"name": "Print Processor Registry Autostart", "id": "1f5b68aa-2037-11ec-898e-acde48001122", "version": 1, "date": "2021-09-28", "author": "Teoderick Contreras, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This analytic is to detect a suspicious modification or new registry entry regarding print processor. This registry is known to be abuse by turla or other APT to gain persistence and privilege escalation to the compromised machine. This is done by adding the malicious dll payload on the new created key in this registry that will be executed as it restarted the spoolsv.exe process and services.", "search": "| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =\"*\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Print Processors*\" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `print_processor_registry_autostart_filter`", "how_to_implement": "To successfully implement this search, you must be ingesting data that records registry activity from your hosts to populate the endpoint data model in the registry node. This is typically populated via endpoint detection-and-response product, such as Carbon Black or endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report reads and writes to the registry.", "known_false_positives": "possible new printer installation may add driver component on this registry.", "references": ["https://attack.mitre.org/techniques/T1547/012/", "https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/"], "tags": {"analytic_story": ["Windows Persistence Techniques", "Windows Privilege Escalation"], "confidence": 100, "context": ["source:endpoint", "stage:Privilege Escalation Persistence"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1547.012/print_reg/sysmon_print.log"], "impact": 80, "kill_chain_phases": ["Exploitation"], "message": "modified/added/deleted registry entry $Registry.registry_path$ in $dest$", "mitre_attack_id": ["T1547.012", "T1547"], "observable": [{"name": "dest", "type": "Hostname", "role": ["Victim"]}, {"name": "user", "type": "user", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Registry.dest", "Registry.user", "Registry.registry_path", "Registry.registry_key_name", "Registry.registry_value_name"], "risk_score": 80, "security_domain": "endpoint", "mitre_attack_technique": ["Boot or Logon Autostart Execution"], "mitre_attack_tactics": ["Persistence", "Privilege Escalation"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "print_processor_registry_autostart_filter"}]}, {"name": "Detect malicious requests to exploit JBoss servers", "id": "c8bff7a4-11ea-4416-a27d-c5bca472913d", "version": 1, "date": "2017-09-23", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "This search is used to detect malicious HTTP requests crafted to exploit jmx-console in JBoss servers. The malicious requests have a long URL length, as the payload is embedded in the URL.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Web where (Web.http_method=\"GET\" OR Web.http_method=\"HEAD\") by Web.http_method, Web.url,Web.url_length Web.src, Web.dest | search Web.url=\"*jmx-console/HtmlAdaptor?action=invokeOpByName&name=jboss.admin*import*\" AND Web.url_length > 200 | `drop_dm_object_name(\"Web\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table src, dest_ip, http_method, url, firstTime, lastTime | `detect_malicious_requests_to_exploit_jboss_servers_filter`", "how_to_implement": "You must ingest data from the web server or capture network data that contains web specific information with solutions such as Bro or Splunk Stream, and populating the Web data model", "known_false_positives": "No known false positives for this detection.", "references": [], "tags": {"analytic_story": ["JBoss Vulnerability", "SamSam Ransomware"], "asset_type": "Web Server", "cis20": ["CIS 12", "CIS 4", "CIS 18"], "kill_chain_phases": ["Delivery"], "nist": ["ID.RA", "PR.PT", "PR.IP", "DE.AE", "PR.MA", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.http_method", "Web.url", "Web.url_length", "Web.src", "Web.dest"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_malicious_requests_to_exploit_jboss_servers_filter"}]}, {"name": "Detect F5 TMUI RCE CVE-2020-5902", "id": "810e4dbc-d46e-11ea-87d0-0242ac130003", "version": 1, "date": "2020-08-02", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects remote code exploit attempts on F5 BIG-IP, BIG-IQ, and Traffix SDC devices", "search": "`f5_bigip_rogue` | regex _raw=\"(hsqldb;|.*\\\\.\\\\.;.*)\" | search `detect_f5_tmui_rce_cve_2020_5902_filter`", "how_to_implement": "To consistently detect exploit attempts on F5 devices using the vulnerabilities contained within CVE-2020-5902 it is recommended to ingest logs via syslog.  As many BIG-IP devices will have SSL enabled on their management interfaces, detections via wire data may not pick anything up unless you are decrypting SSL traffic in order to inspect it.  I am using a regex string from a Cloudflare mitigation technique to try and always catch the offending string (..;), along with the other exploit of using (hsqldb;).", "known_false_positives": "unknown", "references": ["https://www.ptsecurity.com/ww-en/about/news/f5-fixes-critical-vulnerability-discovered-by-positive-technologies-in-big-ip-application-delivery-controller/", "https://support.f5.com/csp/article/K52145254", "https://blog.cloudflare.com/cve-2020-5902-helping-to-protect-against-the-f5-tmui-rce-vulnerability/"], "tags": {"analytic_story": ["F5 TMUI RCE CVE-2020-5902"], "asset_type": "Network", "cis20": ["CIS 8", "CIS 11"], "cve": ["CVE-2020-5902"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1190"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "index=netops sourcetype=\"f5:bigip:rogue\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "f5_bigip_rogue"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_f5_tmui_rce_cve_2020_5902_filter"}]}, {"name": "Monitor Web Traffic For Brand Abuse", "id": "134da869-e264-4a8f-8d7e-fcd0ec88f301", "version": 1, "date": "2017-09-23", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "This search looks for Web requests to faux domains similar to the one that you want to have monitored for abuse.", "search": "| tstats `security_content_summariesonly` values(Web.url) as urls min(_time) as firstTime from datamodel=Web by Web.src | `drop_dm_object_name(\"Web\")` | `security_content_ctime(firstTime)` | `brand_abuse_web` | `monitor_web_traffic_for_brand_abuse_filter`", "how_to_implement": "You need to ingest data from your web traffic. This can be accomplished by indexing data from a web proxy, or using a network traffic analysis tool, such as Bro or Splunk Stream. You also need to have run the search \"ESCU - DNSTwist Domain Names\", which creates the permutations of the domain that will be checked for.", "known_false_positives": "None at this time", "references": [], "tags": {"analytic_story": ["Brand Monitoring"], "asset_type": "Endpoint", "cis20": ["CIS 7"], "kill_chain_phases": ["Delivery"], "nist": ["PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.url", "Web.src"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "lookup update=true brandMonitoring_lookup domain as urls OUTPUT domain_abuse | search domain_abuse=true", "description": "This macro limits the output to only domains that are in the brand monitoring lookup file", "name": "brand_abuse_web", "lookups": [{"default_match": "false", "description": "A file that contains look-a-like domains for brands that you want to monitor", "filename": "brand_monitoring.csv", "match_type": "WILDCARD(domain)", "min_matches": 1, "name": "brandMonitoring_lookup", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/brand_monitoring.csv"}]}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "monitor_web_traffic_for_brand_abuse_filter"}]}, {"name": "Supernova Webshell", "id": "2ec08a09-9ff1-4dac-b59f-1efd57972ec1", "version": 1, "date": "2021-01-06", "author": "John Stoner, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "This search aims to detect the Supernova webshell used in the SUNBURST attack.", "search": "| tstats `security_content_summariesonly` count from datamodel=Web.Web where web.url=*logoimagehandler.ashx*codes* OR Web.url=*logoimagehandler.ashx*clazz* OR Web.url=*logoimagehandler.ashx*method* OR Web.url=*logoimagehandler.ashx*args* by Web.src Web.dest Web.url Web.vendor_product Web.user Web.http_user_agent _time span=1s | `supernova_webshell_filter`", "how_to_implement": "To successfully implement this search, you need to be monitoring web traffic to your Solarwinds Orion. The logs should be ingested into splunk and populating/mapped to the Web data model.", "known_false_positives": "There might be false positives associted with this detection since items like args as a web argument is pretty generic.", "references": ["https://www.splunk.com/en_us/blog/security/detecting-supernova-malware-solarwinds-continued.html", "https://www.guidepointsecurity.com/supernova-solarwinds-net-webshell-analysis/"], "tags": {"analytic_story": ["NOBELIUM Group"], "cis20": ["CIS 4", "CIS 13", "CIS 18"], "kill_chain_phases": ["Exfiltration"], "mitre_attack_id": ["T1505.003"], "nist": ["PR.DS", "ID.RA", "PR.PT", "PR.IP", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.url", "Web.src", "Web.dest", "Web.vendor_product", "Web.user", "Web.http_user_agent"], "security_domain": "network", "mitre_attack_technique": ["Web Shell"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["Tropic Trooper", "Soft Cell", "Threat Group-3390", "TEMP.Veles", "Leviathan", "APT39", "Dragonfly 2.0", "APT32", "OilRig", "Deep Panda"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "supernova_webshell_filter"}]}, {"name": "SQL Injection with Long URLs", "id": "e0aad4cf-0790-423b-8328-7564d0d938f9", "version": 2, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "This search looks for long URLs that have several SQL commands visible within them.", "search": "| tstats `security_content_summariesonly` count from datamodel=Web where Web.dest_category=web_server AND (Web.url_length > 1024 OR Web.http_user_agent_length > 200) by Web.src Web.dest Web.url Web.url_length Web.http_user_agent | `drop_dm_object_name(\"Web\")` | eval num_sql_cmds=mvcount(split(url, \"alter%20table\")) + mvcount(split(url, \"between\")) + mvcount(split(url, \"create%20table\")) + mvcount(split(url, \"create%20database\")) + mvcount(split(url, \"create%20index\")) + mvcount(split(url, \"create%20view\")) + mvcount(split(url, \"delete\")) + mvcount(split(url, \"drop%20database\")) + mvcount(split(url, \"drop%20index\")) + mvcount(split(url, \"drop%20table\")) + mvcount(split(url, \"exists\")) + mvcount(split(url, \"exec\")) + mvcount(split(url, \"group%20by\")) + mvcount(split(url, \"having\")) + mvcount(split(url, \"insert%20into\")) + mvcount(split(url, \"inner%20join\")) + mvcount(split(url, \"left%20join\")) + mvcount(split(url, \"right%20join\")) + mvcount(split(url, \"full%20join\")) + mvcount(split(url, \"select\")) + mvcount(split(url, \"distinct\")) + mvcount(split(url, \"select%20top\")) + mvcount(split(url, \"union\")) + mvcount(split(url, \"xp_cmdshell\")) - 24 | where num_sql_cmds > 3 | `sql_injection_with_long_urls_filter`", "how_to_implement": "To successfully implement this search, you need to be monitoring network communications to your web servers or ingesting your HTTP logs and populating the Web data model. You must also identify your web servers in the Enterprise Security assets table.", "known_false_positives": "It's possible that legitimate traffic will have long URLs or long user agent strings and that common SQL commands may be found within the URL. Please investigate as appropriate.", "references": [], "tags": {"analytic_story": ["SQL Injection"], "asset_type": "Database Server", "cis20": ["CIS 4", "CIS 13", "CIS 18"], "kill_chain_phases": ["Delivery"], "mitre_attack_id": ["T1190"], "nist": ["PR.DS", "ID.RA", "PR.PT", "PR.IP", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.dest_category", "Web.url_length", "Web.http_user_agent_length", "Web.src", "Web.dest", "Web.url", "Web.http_user_agent"], "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "sql_injection_with_long_urls_filter"}]}, {"name": "Detect attackers scanning for vulnerable JBoss servers", "id": "104658f4-afdc-499e-9719-17243f982681", "version": 1, "date": "2017-09-23", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Web"], "description": "This search looks for specific GET or HEAD requests to web servers that are indicative of reconnaissance attempts to identify vulnerable JBoss servers. JexBoss is described as the exploit tool of choice for this malicious activity.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Web where (Web.http_method=\"GET\" OR Web.http_method=\"HEAD\") AND (Web.url=\"*/web-console/ServerInfo.jsp*\" OR Web.url=\"*web-console*\" OR Web.url=\"*jmx-console*\" OR Web.url = \"*invoker*\") by Web.http_method, Web.url, Web.src, Web.dest | `drop_dm_object_name(\"Web\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_attackers_scanning_for_vulnerable_jboss_servers_filter`", "how_to_implement": "You must be ingesting data from the web server or network traffic that contains web specific information, and populating the Web data model.", "known_false_positives": "It's possible for legitimate HTTP requests to be made to URLs containing the suspicious paths.", "references": [], "tags": {"analytic_story": ["JBoss Vulnerability", "SamSam Ransomware"], "asset_type": "Web Server", "kill_chain_phases": ["Reconnaissance"], "mitre_attack_id": ["T1082"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Web.http_method", "Web.url", "Web.src", "Web.dest"], "security_domain": "network", "mitre_attack_technique": ["System Information Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "Inception", "Kimsuky", "Darkhotel", "MuddyWater", "APT18", "Honeybee", "APT19", "APT37", "APT32", "Magic Hound", "OilRig", "APT3", "Sowbug", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_attackers_scanning_for_vulnerable_jboss_servers_filter"}]}, {"name": "Detect Software Download To Network Device", "id": "cc590c66-f65f-48f2-986a-4797244762f8", "version": 1, "date": "2020-10-28", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where (All_Traffic.transport=udp AND All_Traffic.dest_port=69) OR (All_Traffic.transport=tcp AND All_Traffic.dest_port=21) OR (All_Traffic.transport=tcp AND All_Traffic.dest_port=22) AND All_Traffic.dest_category!=common_software_repo_destination AND All_Traffic.src_category=network OR All_Traffic.src_category=router OR All_Traffic.src_category=switch by All_Traffic.src All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(\"All_Traffic\")` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_software_download_to_network_device_filter`", "how_to_implement": "This search looks for Network Traffic events to TFTP, FTP or SSH/SCP ports from network devices. Make sure to tag any network devices as network, router or switch in order for this detection to work. If the TFTP traffic doesn't traverse a firewall nor packet inspection, these events will not be logged. This is typically an issue if the TFTP server is on the same subnet as the network device. There is also a chance of the network device loading software using a DHCP assigned IP address (netboot) which is not in the Asset inventory.", "known_false_positives": "This search will also report any legitimate attempts of software downloads to network devices as well as outbound SSH sessions from network devices.", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect Software Download To Network Device", "kill_chain_phases": ["Delivery"], "mitre_attack_id": ["T1542.005", "T1542"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.transport", "All_Traffic.dest_port", "All_Traffic.dest_category", "All_Traffic.src_category", "All_Traffic.src", "All_Traffic.dest"], "security_domain": "network", "mitre_attack_technique": ["Pre-OS Boot"], "mitre_attack_tactics": ["Defense Evasion", "Persistence"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_software_download_to_network_device_filter"}]}, {"name": "SMB Traffic Spike", "id": "7f5fb3e1-4209-4914-90db-0ec21b936378", "version": 3, "date": "2020-07-22", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search looks for spikes in the number of Server Message Block (SMB) traffic connections.", "search": "| tstats `security_content_summariesonly` count from datamodel=Network_Traffic where All_Traffic.dest_port=139 OR All_Traffic.dest_port=445 OR All_Traffic.app=smb by _time span=1h, All_Traffic.src | `drop_dm_object_name(\"All_Traffic\")` | eventstats max(_time) as maxtime | stats count as num_data_samples max(eval(if(_time >= relative_time(maxtime, \"-70m@m\"), count, null))) as count avg(eval(if(_time<relative_time(maxtime, \"-70m@m\"), count, null))) as avg stdev(eval(if(_time<relative_time(maxtime, \"-70m@m\"), count, null))) as stdev by src | eval upperBound=(avg+stdev*2), isOutlier=if(count > upperBound AND num_data_samples >=50, 1, 0) | where isOutlier=1 | table src count | `smb_traffic_spike_filter` ", "how_to_implement": "This search requires you to be ingesting your network traffic logs and populating the `Network_Traffic` data model.", "known_false_positives": "A file server may experience high-demand loads that could cause this analytic to trigger.", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Hidden Cobra Malware", "Ransomware", "DHS Report TA18-074A"], "asset_type": "Endpoint", "cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1021.002", "T1021"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.dest_port", "All_Traffic.app", "All_Traffic.src"], "security_domain": "network", "mitre_attack_technique": ["SMB/Windows Admin Shares", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "APT39", "APT32", "Orangeworm", "FIN8", "APT3", "Lazarus Group", "Threat Group-1314", "Turla", "Deep Panda", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "smb_traffic_spike_filter"}]}, {"name": "SMB Traffic Spike - MLTK", "id": "d25773ba-9ad8-48d1-858e-07ad0bbeb828", "version": 3, "date": "2020-07-22", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search uses the Machine Learning Toolkit (MLTK) to identify spikes in the number of Server Message Block (SMB) connections.", "search": "| tstats `security_content_summariesonly` count values(All_Traffic.dest_ip) as dest values(All_Traffic.dest_port) as port from datamodel=Network_Traffic where All_Traffic.dest_port=139 OR All_Traffic.dest_port=445 OR All_Traffic.app=smb by _time span=1h, All_Traffic.src | eval HourOfDay=strftime(_time, \"%H\") | eval DayOfWeek=strftime(_time, \"%A\") | `drop_dm_object_name(All_Traffic)` | apply smb_pdfmodel threshold=0.001 | rename \"IsOutlier(count)\" as isOutlier | search isOutlier > 0 | sort -count | table _time src dest port count | `smb_traffic_spike___mltk_filter` ", "how_to_implement": "To successfully implement this search, you will need to ensure that DNS data is populating the Network_Resolution data model. In addition, the Machine Learning Toolkit (MLTK) version 4.2 or greater must be installed on your search heads, along with any required dependencies. Finally, the support search \"Baseline of SMB Traffic - MLTK\" must be executed before this detection search, because it builds a machine-learning (ML) model over the historical data used by this search. It is important that this search is run in the same app context as the associated support search, so that the model created by the support search is available for use. You should periodically re-run the support search to rebuild the model with the latest data available in your environment.\\\nThis search produces a field (Number of events,count) that are not yet supported by ES Incident Review and therefore cannot be viewed when a notable event is raised. This field contributes additional context to the notable. To see the additional metadata, add the following field, if not already present, to Incident Review - Event Attributes (Configure > Incident Management > Incident Review Settings > Add New Entry): \\\n1. **Label:** Number of events, **Field:** count\\\nDetailed documentation on how to create a new field within Incident Review is found here: `https://docs.splunk.com/Documentation/ES/5.3.0/Admin/Customizenotables#Add_a_field_to_the_notable_event_details`", "known_false_positives": "If you are seeing more results than desired, you may consider reducing the value of the threshold in the search. You should also periodically re-run the support search to re-build the ML model on the latest data. Please update the `smb_traffic_spike_mltk_filter` macro to filter out false positive results", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Hidden Cobra Malware", "Ransomware", "DHS Report TA18-074A"], "asset_type": "Endpoint", "cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1021.002", "T1021"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.dest_ip", "All_Traffic.dest_port", "All_Traffic.app", "All_Traffic.src"], "security_domain": "network", "mitre_attack_technique": ["SMB/Windows Admin Shares", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "APT39", "APT32", "Orangeworm", "FIN8", "APT3", "Lazarus Group", "Threat Group-1314", "Turla", "Deep Panda", "Ke3chang", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "smb_traffic_spike___mltk_filter"}]}, {"name": "Detect IPv6 Network Infrastructure Threats", "id": "c3be767e-7959-44c5-8976-0e9c12a91ad2", "version": 1, "date": "2020-10-28", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": [], "description": "By enabling IPv6 First Hop Security as a Layer 2 Security measure on the organization's network devices, we will be able to detect various attacks such as packet forging in the Infrastructure.", "search": "`cisco_networks` facility=\"SISF\" mnemonic IN (\"IP_THEFT\",\"MAC_THEFT\",\"MAC_AND_IP_THEFT\",\"PAK_DROP\") | eval src_interface=src_int_prefix_long+src_int_suffix | eval dest_interface=dest_int_prefix_long+dest_int_suffix | stats min(_time) AS firstTime max(_time) AS lastTime values(src_mac) AS src_mac values(src_vlan) AS src_vlan values(mnemonic) AS mnemonic values(vendor_explanation) AS vendor_explanation values(src_ip) AS src_ip values(dest_ip) AS dest_ip values(dest_interface) AS dest_interface values(action) AS action count BY host src_interface | table host src_interface dest_interface src_mac src_ip dest_ip src_vlan mnemonic vendor_explanation action count | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `detect_ipv6_network_infrastructure_threats_filter`", "how_to_implement": "This search uses a standard SPL query on logs from Cisco Network devices. The network devices must be configured with one or more First Hop Security measures such as RA Guard, DHCP Guard and/or device tracking. See References for more information. The search also requires that the Cisco Networks Add-on for Splunk (https://splunkbase.splunk.com/app/1467) is used to parse the logs from the Cisco network devices.", "known_false_positives": "None currently known", "references": ["https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2019/pdf/BRKSEC-3200.pdf", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-ra-guard.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-snooping.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-dad-proxy.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-nd-mcast-supp.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-dhcpv6-guard.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ip6-src-guard.html", "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipv6_fhsec/configuration/xe-16-12/ip6f-xe-16-12-book/ipv6-dest-guard.html"], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect IPv6 Network Infrastructure Threats", "kill_chain_phases": ["Reconnaissance", "Delivery", "Actions on Objectives"], "mitre_attack_id": ["T1200", "T1498", "T1557", "T1557.002"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "facility", "mnemonic", "src_int_prefix_long", "src_int_suffix", "dest_int_prefix_long", "dest_int_suffix", "src_mac", "src_vlan", "vendor_explanation", "action"], "security_domain": "network", "mitre_attack_technique": ["Hardware Additions", "Network Denial of Service", "Man-in-the-Middle"], "mitre_attack_tactics": ["Initial Access", "Impact", "Credential Access", "Collection"], "mitre_attack_groups": ["DarkVishnya", "no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=cisco_ios", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cisco_networks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_ipv6_network_infrastructure_threats_filter"}]}, {"name": "Remote Desktop Network Traffic", "id": "272b8407-842d-4b3d-bead-a704584003d3", "version": 3, "date": "2020-07-07", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search looks for network traffic on TCP/3389, the default port used by remote desktop. While remote desktop traffic is not uncommon on a network, it is usually associated with known hosts. This search will ignore common RDP sources and common RDP destinations so you can focus on the uncommon uses of remote desktop on your network.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.dest_port=3389 AND All_Traffic.dest_category!=common_rdp_destination AND All_Traffic.src_category!=common_rdp_source by All_Traffic.src All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(\"All_Traffic\")` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_desktop_network_traffic_filter` ", "how_to_implement": "To successfully implement this search you need to identify systems that commonly originate remote desktop traffic and that commonly receive remote desktop traffic. You can use the included support search \"Identify Systems Creating Remote Desktop Traffic\" to identify systems that originate the traffic and the search \"Identify Systems Receiving Remote Desktop Traffic\" to identify systems that receive a lot of remote desktop traffic. After identifying these systems, you will need to add the \"common_rdp_source\" or \"common_rdp_destination\" category to that system depending on the usage, using the Enterprise Security Assets and Identities framework.  This can be done by adding an entry in the assets.csv file located in SA-IdentityManagement/lookups.", "known_false_positives": "Remote Desktop may be used legitimately by users on the network.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware", "Ryuk Ransomware", "Hidden Cobra Malware", "Active Directory Lateral Movement"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 9", "CIS 16"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1021.001", "T1021"], "nist": ["DE.AE", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.dest_port", "All_Traffic.dest_category", "All_Traffic.src_category", "All_Traffic.src", "All_Traffic.dest", "All_Traffic.dest_port"], "security_domain": "network", "mitre_attack_technique": ["Remote Desktop Protocol", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "TEMP.Veles", "Leviathan", "APT39", "Stolen Pencil", "Cobalt Group", "Dragonfly 2.0", "FIN8", "APT3", "OilRig", "menuPass", "FIN10", "Patchwork", "FIN6", "Lazarus Group", "APT1", "Axiom", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_desktop_network_traffic_filter"}]}, {"name": "Detect Windows DNS SIGRed via Splunk Stream", "id": "babd8d10-d073-11ea-87d0-0242ac130003", "version": 1, "date": "2020-07-28", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects SIGRed via Splunk Stream.", "search": "`stream_dns` | spath \"query_type{}\" | search \"query_type{}\" IN (SIG,KEY) | spath protocol_stack | search protocol_stack=\"ip:tcp:dns\" | append [search `stream_tcp` bytes_out>65000] | `detect_windows_dns_sigred_via_splunk_stream_filter` | stats count by flow_id | where count>1 | fields - count", "how_to_implement": "You must be ingesting Splunk Stream DNS and Splunk Stream TCP. We are detecting SIG and KEY records via stream:dns and TCP payload over 65KB in size via stream:tcp.  Replace the macro definitions ('stream:dns' and 'stream:tcp') with configurations for your Splunk environment.", "known_false_positives": "unknown", "references": ["https://research.checkpoint.com/2020/resolving-your-way-into-domain-admin-exploiting-a-17-year-old-bug-in-windows-dns-servers/"], "tags": {"analytic_story": ["Windows DNS SIGRed CVE-2020-1350"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 12"], "cve": ["CVE-2020-1350"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1203"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "security_domain": "network", "mitre_attack_technique": ["Exploitation for Client Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Sandworm Team", "MuddyWater", "Frankenstein", "Inception", "BlackTech", "APT41", "admin@338", "Threat Group-3390", "APT12", "The White Company", "APT33", "APT32", "APT28", "Tropic Trooper", "Lazarus Group", "BRONZE BUTLER", "Cobalt Group", "APT37", "Patchwork", "Leviathan", "Elderwood", "TA459", "APT29"]}, "macros": [{"definition": "sourcetype=stream:tcp", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_tcp"}, {"definition": "sourcetype=stream:dns", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_dns"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_windows_dns_sigred_via_splunk_stream_filter"}]}, {"name": "DNS Query Length Outliers - MLTK", "id": "85fbcfe8-9718-4911-adf6-7000d077a3a9", "version": 2, "date": "2020-01-22", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Network_Resolution"], "description": "This search allows you to identify DNS requests that are unusually large for the record type being requested in your environment.", "search": "| tstats `security_content_summariesonly` count min(_time) as start_time max(_time) as end_time values(DNS.src) as src values(DNS.dest) as dest from datamodel=Network_Resolution by DNS.query DNS.record_type | search DNS.record_type=* |  `drop_dm_object_name(DNS)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | eval query_length = len(query) | apply dns_query_pdfmodel threshold=0.01 | rename \"IsOutlier(query_length)\" as isOutlier | search isOutlier > 0 | sort -query_length | table start_time end_time query record_type count src dest query_length | `dns_query_length_outliers___mltk_filter` ", "how_to_implement": "To successfully implement this search, you will need to ensure that DNS data is populating the Network_Resolution data model. In addition, the Machine Learning Toolkit (MLTK) version 4.2 or greater must be installed on your search heads, along with any required dependencies. Finally, the support search \"Baseline of DNS Query Length - MLTK\" must be executed before this detection search, because it builds a machine-learning (ML) model over the historical data used by this search. It is important that this search is run in the same app context as the associated support search, so that the model created by the support search is available for use. You should periodically re-run the support search to rebuild the model with the latest data available in your environment.\\\nThis search produces fields (`query`,`query_length`,`count`) that are not yet supported by ES Incident Review and therefore cannot be viewed when a notable event is raised. These fields contribute additional context to the notable. To see the additional metadata, add the following fields, if not already present, to Incident Review - Event Attributes (Configure > Incident Management > Incident Review Settings > Add New Entry):\\\\n1. **Label:** DNS Query, **Field:** query\\\n1. \\\n1. **Label:** DNS Query Length, **Field:** query_length\\\n1. \\\n1. **Label:** Number of events, **Field:** count\\\nDetailed documentation on how to create a new field within Incident Review may be found here: `https://docs.splunk.com/Documentation/ES/5.3.0/Admin/Customizenotables#Add_a_field_to_the_notable_event_details`", "known_false_positives": "If you are seeing more results than desired, you may consider reducing the value for threshold in the search. You should also periodically re-run the support search to re-build the ML model on the latest data.", "references": [], "tags": {"analytic_story": ["Hidden Cobra Malware", "Suspicious DNS Traffic", "Command and Control"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 12"], "kill_chain_phases": ["Command and Control"], "mitre_attack_id": ["T1071.004", "T1071"], "nist": ["PR.PT", "DE.AE", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.src", "DNS.dest", "DNS.query", "DNS.record_type"], "security_domain": "network", "mitre_attack_technique": ["DNS", "Application Layer Protocol"], "mitre_attack_tactics": ["Command And Control", "Command And Control"], "mitre_attack_groups": ["APT39", "Tropic Trooper", "OilRig", "Ke3chang", "Cobalt Group", "APT18", "APT41", "FIN7", "Rocke", "Magic Hound", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "dns_query_length_outliers___mltk_filter"}]}, {"name": "Excessive DNS Failures", "id": "104658f4-afdc-499e-9719-17243f9826f1", "version": 2, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Network_Resolution"], "description": "This search identifies DNS query failures by counting the number of DNS responses that do not indicate success, and trigger on more than 50 occurrences.", "search": "| tstats `security_content_summariesonly` count values(\"DNS.query\") as queries from datamodel=Network_Resolution where nodename=DNS \"DNS.reply_code\"!=\"No Error\" \"DNS.reply_code\"!=\"NoError\" DNS.reply_code!=\"unknown\" NOT \"DNS.query\"=\"*.arpa\" \"DNS.query\"=\"*.*\" by \"DNS.src\",\"DNS.query\"| `drop_dm_object_name(\"DNS\")`| lookup cim_corporate_web_domain_lookup domain as query OUTPUT domain| where isnull(domain)| lookup update=true alexa_lookup_by_str domain as query OUTPUT rank| where isnull(rank)| stats sum(count) as count mode(queries) as queries by src| `get_asset(src)`| where count>50 | `excessive_dns_failures_filter`", "how_to_implement": "To successfully implement this search you must ensure that DNS data is populating the Network_Resolution data model.", "known_false_positives": "It is possible legitimate traffic can trigger this rule. Please investigate as appropriate. The threshold for generating an event can also be customized to better suit your environment.", "references": [], "tags": {"analytic_story": ["Suspicious DNS Traffic", "Command and Control"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 9", "CIS 12"], "kill_chain_phases": ["Command and Control"], "mitre_attack_id": ["T1071.004", "T1071"], "nist": ["PR.PT", "DE.AE", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.query", "DNS.reply_code", "DNS.src"], "security_domain": "network", "mitre_attack_technique": ["DNS", "Application Layer Protocol"], "mitre_attack_tactics": ["Command And Control", "Command And Control"], "mitre_attack_groups": ["APT39", "Tropic Trooper", "OilRig", "Ke3chang", "Cobalt Group", "APT18", "APT41", "FIN7", "Rocke", "Magic Hound", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "excessive_dns_failures_filter"}]}, {"name": "Detect Outbound SMB Traffic", "id": "7f5fb3e1-4209-414-90db-0ec21b936378", "version": 3, "date": "2020-07-21", "author": "Bhavin Patel, Stuart Hopkins from Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search looks for outbound SMB connections made by hosts within your network to the Internet. SMB traffic is used for Windows file-sharing activity. One of the techniques often used by attackers involves retrieving the credential hash using an SMB request made to a compromised server controlled by the threat actor.", "search": "| tstats `security_content_summariesonly` earliest(_time) as start_time latest(_time) as end_time values(All_Traffic.action) as action values(All_Traffic.app) as app values(All_Traffic.dest_ip) as dest_ip values(All_Traffic.dest_port) as dest_port values(sourcetype) as sourcetype count from datamodel=Network_Traffic where ((All_Traffic.dest_port=139 OR All_Traffic.dest_port=445 OR All_Traffic.app=\"smb\") AND NOT (All_Traffic.action=\"blocked\" OR All_Traffic.dest_category=\"internal\" OR All_Traffic.dest_ip=10.0.0.0/8 OR All_Traffic.dest_ip=172.16.0.0/12 OR All_Traffic.dest_ip=192.168.0.0/16 OR All_Traffic.dest_ip=100.64.0.0/10)) by All_Traffic.src_ip | `drop_dm_object_name(\"All_Traffic\")` | `security_content_ctime(start_time)` | `security_content_ctime(end_time)` | `detect_outbound_smb_traffic_filter`", "how_to_implement": "In order to run this search effectively, we highly recommend that you leverage the Assets and Identity framework. It is important that you have good understanding of how your network segments are designed, and be able to distinguish internal from external address space. Add a category named `internal` to the CIDRs that host the companys assets in `assets_by_cidr.csv` lookup file, which is located in `$SPLUNK_HOME/etc/apps/SA-IdentityManagement/lookups/`. More information on updating this lookup can be found here: https://docs.splunk.com/Documentation/ES/5.0.0/Admin/Addassetandidentitydata. This search also requires you to be ingesting your network traffic and populating the Network_Traffic data model", "known_false_positives": "It is likely that the outbound Server Message Block (SMB) traffic is legitimate, if the company's internal networks are not well-defined in the Assets and Identity Framework. Categorize the internal CIDR blocks as `internal` in the lookup file to avoid creating notable events for traffic destined to those CIDR blocks. Any other network connection that is going out to the Internet should be investigated and blocked. Best practices suggest preventing external communications of all SMB versions and related protocols at the network boundary.", "references": [], "tags": {"analytic_story": ["Hidden Cobra Malware", "DHS Report TA18-074A", "NOBELIUM Group"], "asset_type": "Endpoint", "cis20": ["CIS 12"], "kill_chain_phases": ["Actions on Objectives", "Command and Control"], "mitre_attack_id": ["T1071.002", "T1071"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.action", "All_Traffic.app", "All_Traffic.dest_ip", "All_Traffic.dest_port", "sourcetype", "All_Traffic.dest_category", "All_Traffic.src_ip"], "security_domain": "network", "mitre_attack_technique": ["File Transfer Protocols", "Application Layer Protocol"], "mitre_attack_tactics": ["Command And Control", "Command And Control"], "mitre_attack_groups": ["APT41", "SilverTerrier", "Machete", "Honeybee", "Rocke", "Magic Hound", "Dragonfly 2.0"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_outbound_smb_traffic_filter"}]}, {"name": "Detect ARP Poisoning", "id": "b44bebd6-bd39-467b-9321-73971bcd7aac", "version": 1, "date": "2020-08-11", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": [], "description": "By enabling Dynamic ARP Inspection as a Layer 2 Security measure on the organization's network devices, we will be able to detect ARP Poisoning attacks in the Infrastructure.", "search": "`cisco_networks` facility=\"PM\" mnemonic=\"ERR_DISABLE\" disable_cause=\"arp-inspection\" | eval src_interface=src_int_prefix_long+src_int_suffix | stats min(_time) AS firstTime max(_time) AS lastTime count BY host src_interface | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)`| `detect_arp_poisoning_filter`", "how_to_implement": "This search uses a standard SPL query on logs from Cisco Network devices. The network devices must be configured with DHCP Snooping (see https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst2960x/software/15-0_2_EX/security/configuration_guide/b_sec_152ex_2960-x_cg/b_sec_152ex_2960-x_cg_chapter_01101.html) and Dynamic ARP Inspection (see https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst2960x/software/15-2_2_e/security/configuration_guide/b_sec_1522e_2960x_cg/b_sec_1522e_2960x_cg_chapter_01111.html) and log with a severity level of minimum \"5 - notification\". The search also requires that the Cisco Networks Add-on for Splunk (https://splunkbase.splunk.com/app/1467) is used to parse the logs from the Cisco network devices.", "known_false_positives": "This search might be prone to high false positives if DHCP Snooping or ARP inspection has been incorrectly configured, or if a device normally sends many ARP packets (unlikely).", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect ARP Poisoning", "kill_chain_phases": ["Reconnaissance", "Delivery", "Actions on Objectives"], "mitre_attack_id": ["T1200", "T1498", "T1557", "T1557.002"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "facility", "mnemonic", "disable_cause", "src_int_prefix_long", "src_int_suffix", "host", "src_interface"], "security_domain": "network", "mitre_attack_technique": ["Hardware Additions", "Network Denial of Service", "Man-in-the-Middle"], "mitre_attack_tactics": ["Initial Access", "Impact", "Credential Access", "Collection"], "mitre_attack_groups": ["DarkVishnya", "no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=cisco_ios", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cisco_networks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_arp_poisoning_filter"}]}, {"name": "Hosts receiving high volume of network traffic from email server", "id": "7f5fb3e1-4209-4914-90db-0ec21b556368", "version": 2, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search looks for an increase of data transfers from your email server to your clients. This could be indicative of a malicious actor collecting data using your email server.", "search": "| tstats `security_content_summariesonly` sum(All_Traffic.bytes_in) as bytes_in from datamodel=Network_Traffic where All_Traffic.dest_category=email_server by All_Traffic.src_ip _time span=1d | `drop_dm_object_name(\"All_Traffic\")` | eventstats avg(bytes_in) as avg_bytes_in stdev(bytes_in) as stdev_bytes_in | eventstats count as num_data_samples avg(eval(if(_time < relative_time(now(), \"@d\"), bytes_in, null))) as per_source_avg_bytes_in stdev(eval(if(_time < relative_time(now(), \"@d\"), bytes_in, null))) as per_source_stdev_bytes_in by src_ip | eval minimum_data_samples = 4, deviation_threshold = 3 | where num_data_samples >= minimum_data_samples AND bytes_in > (avg_bytes_in + (deviation_threshold * stdev_bytes_in)) AND bytes_in > (per_source_avg_bytes_in + (deviation_threshold * per_source_stdev_bytes_in)) AND _time >= relative_time(now(), \"@d\") | eval num_standard_deviations_away_from_server_average = round(abs(bytes_in - avg_bytes_in) / stdev_bytes_in, 2), num_standard_deviations_away_from_client_average = round(abs(bytes_in - per_source_avg_bytes_in) / per_source_stdev_bytes_in, 2) | table src_ip, _time, bytes_in, avg_bytes_in, per_source_avg_bytes_in, num_standard_deviations_away_from_server_average, num_standard_deviations_away_from_client_average | `hosts_receiving_high_volume_of_network_traffic_from_email_server_filter`", "how_to_implement": "This search requires you to be ingesting your network traffic and populating the Network_Traffic data model.  Your email servers must be categorized as \"email_server\" for the search to work, as well. You may need to adjust the deviation_threshold and minimum_data_samples values based on the network traffic in your environment. The \"deviation_threshold\" field is a multiplying factor to control how much variation you're willing to tolerate. The \"minimum_data_samples\" field is the minimum number of connections of data samples required for the statistic to be valid.", "known_false_positives": "The false-positive rate will vary based on how you set the deviation_threshold and data_samples values. Our recommendation is to adjust these values based on your network traffic to and from your email servers.", "references": [], "tags": {"analytic_story": ["Collection and Staging"], "asset_type": "Endpoint", "cis20": ["CIS 7"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1114.002", "T1114"], "nist": ["PR.PT", "DE.CM", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.bytes_in", "All_Traffic.dest_category", "All_Traffic.src_ip"], "security_domain": "network", "mitre_attack_technique": ["Remote Email Collection", "Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT1", "FIN4", "APT28", "Dragonfly 2.0", "Ke3chang", "Leafminer", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "hosts_receiving_high_volume_of_network_traffic_from_email_server_filter"}]}, {"name": "Detect Unauthorized Assets by MAC address", "id": "dcfd6b40-42f9-469d-a433-2e53f7489ff4", "version": 1, "date": "2017-09-13", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Network_Sessions"], "description": "By populating the organization's assets within the assets_by_str.csv, we will be able to detect unauthorized devices that are trying to connect with the organization's network by inspecting DHCP request packets, which are issued by devices when they attempt to obtain an IP address from the DHCP server. The MAC address associated with the source of the DHCP request is checked against the list of known devices, and reports on those that are not found.", "search": "| tstats `security_content_summariesonly` count from datamodel=Network_Sessions where nodename=All_Sessions.DHCP All_Sessions.signature=DHCPREQUEST by All_Sessions.src_ip All_Sessions.dest_mac | dedup All_Sessions.dest_mac| `drop_dm_object_name(\"Network_Sessions\")`|`drop_dm_object_name(\"All_Sessions\")` | search NOT [| inputlookup asset_lookup_by_str |rename mac as dest_mac | fields + dest_mac] | `detect_unauthorized_assets_by_mac_address_filter`", "how_to_implement": "This search uses the Network_Sessions data model shipped with Enterprise Security. It leverages the Assets and Identity framework to populate the assets_by_str.csv file located in SA-IdentityManagement, which will contain a list of known authorized organizational assets including their MAC addresses. Ensure that all inventoried systems have their MAC address populated.", "known_false_positives": "This search might be prone to high false positives. Please consider this when conducting analysis or investigations. Authorized devices may be detected as unauthorized. If this is the case, verify the MAC address of the system responsible for the false positive and add it to the Assets and Identity framework with the proper information.", "references": [], "tags": {"analytic_story": ["Asset Tracking"], "asset_type": "Infrastructure", "cis20": ["CIS 1"], "kill_chain_phases": ["Reconnaissance", "Delivery", "Actions on Objectives"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Sessions.signature", "All_Sessions.src_ip", "All_Sessions.dest_mac"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_unauthorized_assets_by_mac_address_filter"}]}, {"name": "Detect Windows DNS SIGRed via Zeek", "id": "c5c622e4-d073-11ea-87d0-0242ac130003", "version": 1, "date": "2020-07-28", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": ["Network_Resolution"], "description": "This search detects SIGRed via Zeek DNS and Zeek Conn data.", "search": "| tstats `security_content_summariesonly` count from datamodel=Network_Resolution where DNS.query_type IN (SIG,KEY) by DNS.flow_id | rename DNS.flow_id as flow_id | append [| tstats  `security_content_summariesonly` count from datamodel=Network_Traffic where All_Traffic.bytes_in>65000 by All_Traffic.flow_id | rename All_Traffic.flow_id as flow_id] | `detect_windows_dns_sigred_via_zeek_filter` | stats count by flow_id | where count>1 | fields - count ", "how_to_implement": "You must be ingesting Zeek DNS and Zeek Conn data into Splunk. Zeek data should also be getting ingested in JSON format.  We are detecting SIG and KEY records via bro:dns:json and TCP payload over 65KB in size via bro:conn:json.  The Network Resolution and Network Traffic datamodels are in use for this search.", "known_false_positives": "unknown", "references": ["https://research.checkpoint.com/2020/resolving-your-way-into-domain-admin-exploiting-a-17-year-old-bug-in-windows-dns-servers/"], "tags": {"analytic_story": ["Windows DNS SIGRed CVE-2020-1350"], "asset_type": "Endpoint", "cis20": ["CIS 8", "CIS 16"], "cve": ["CVE-2020-1350"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1203"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.query_type", "DNS.flow_id", "All_Traffic.bytes_in", "All_Traffic.flow_id"], "security_domain": "endpoint", "mitre_attack_technique": ["Exploitation for Client Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["Sandworm Team", "MuddyWater", "Frankenstein", "Inception", "BlackTech", "APT41", "admin@338", "Threat Group-3390", "APT12", "The White Company", "APT33", "APT32", "APT28", "Tropic Trooper", "Lazarus Group", "BRONZE BUTLER", "Cobalt Group", "APT37", "Patchwork", "Leviathan", "Elderwood", "TA459", "APT29"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_windows_dns_sigred_via_zeek_filter"}]}, {"name": "Unusually Long Content-Type Length", "id": "57a0a2bf-353f-40c1-84dc-29293f3c35b7", "version": 1, "date": "2017-10-13", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for unusually long strings in the Content-Type http header that the client sends the server.", "search": "`stream_http` | eval cs_content_type_length = len(cs_content_type) | where cs_content_type_length > 100 | table endtime src_ip dest_ip cs_content_type_length cs_content_type url | `unusually_long_content_type_length_filter`", "how_to_implement": "This particular search leverages data extracted from Stream:HTTP. You must configure the http stream using the Splunk Stream App on your Splunk Stream deployment server to extract the cs_content_type field.", "known_false_positives": "Very few legitimate Content-Type fields will have a length greater than 100 characters.", "references": [], "tags": {"analytic_story": ["Apache Struts Vulnerability"], "asset_type": "Web Server", "cis20": ["CIS 3", "CIS 4", "CIS 18", "CIS 12"], "kill_chain_phases": ["Delivery"], "nist": ["ID.RA", "RS.MI", "PR.PT", "PR.IP", "DE.AE", "PR.MA", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "cs_content_type", "endtime", "src_ip", "dest_ip", "url"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=stream:http", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_http"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "unusually_long_content_type_length_filter"}]}, {"name": "Detect Traffic Mirroring", "id": "42b3b753-5925-49c5-9742-36fa40a73990", "version": 1, "date": "2020-10-28", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": [], "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.", "search": "`cisco_networks` (facility=\"MIRROR\" mnemonic=\"ETH_SPAN_SESSION_UP\") OR (facility=\"SPAN\" mnemonic=\"SESSION_UP\") OR (facility=\"SPAN\" mnemonic=\"PKTCAP_START\") OR (mnemonic=\"CFGLOG_LOGGEDCMD\" command=\"monitor session*\") | stats min(_time) AS firstTime max(_time) AS lastTime count BY host facility mnemonic | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `detect_traffic_mirroring_filter`", "how_to_implement": "This search uses a standard SPL query on logs from Cisco Network devices. The network devices must log with a severity level of minimum \"5 - notification\". The search also requires that the Cisco Networks Add-on for Splunk (https://splunkbase.splunk.com/app/1467) is used to parse the logs from the Cisco network devices and that the devices have been configured according to the documentation of the Cisco Networks Add-on. Also note that an attacker may disable logging from the device prior to enabling traffic mirroring.", "known_false_positives": "This search will return false positives for any legitimate traffic captures by network administrators.", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect Traffic Mirroring", "kill_chain_phases": ["Delivery", "Actions on Objectives"], "mitre_attack_id": ["T1200", "T1020", "T1498", "T1020.001"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "facility", "mnemonic", "host"], "security_domain": "network", "mitre_attack_technique": ["Hardware Additions", "Automated Exfiltration", "Network Denial of Service"], "mitre_attack_tactics": ["Initial Access", "Exfiltration", "Impact"], "mitre_attack_groups": ["DarkVishnya", "Tropic Trooper", "Frankenstein", "Honeybee", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=cisco_ios", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cisco_networks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_traffic_mirroring_filter"}]}, {"name": "Detect Zerologon via Zeek", "id": "bf7a06ec-f703-11ea-adc1-0242ac120002", "version": 1, "date": "2020-09-15", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects attempts to run exploits for the Zerologon CVE-2020-1472 vulnerability via Zeek RPC", "search": "`zeek_rpc` operation IN (NetrServerPasswordSet2,NetrServerReqChallenge,NetrServerAuthenticate3) | bin span=5m _time | stats values(operation) dc(operation) as opscount count(eval(operation==\"NetrServerReqChallenge\")) as challenge count(eval(operation==\"NetrServerAuthenticate3\")) as authcount count(eval(operation==\"NetrServerPasswordSet2\")) as passcount count as totalcount by _time,src_ip,dest_ip | search opscount=3 authcount>4 passcount>0 | search `detect_zerologon_via_zeek_filter`", "how_to_implement": "You must be ingesting Zeek DCE-RPC data into Splunk. Zeek data should also be getting ingested in JSON format.  We are detecting when all three RPC operations (NetrServerReqChallenge, NetrServerAuthenticate3, NetrServerPasswordSet2) are splunk_security_essentials_app via bro:rpc:json.  These three operations are then correlated on the Zeek UID field.", "known_false_positives": "unknown", "references": ["https://www.secura.com/blog/zero-logon", "https://github.com/SecuraBV/CVE-2020-1472", "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1472"], "tags": {"analytic_story": ["Detect Zerologon Attack"], "asset_type": "Network", "cis20": ["CIS 8", "CIS 11"], "cve": ["CVE-2020-1472"], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1190"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "operation"], "security_domain": "network", "mitre_attack_technique": ["Exploit Public-Facing Application"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["Blue Mockingbird", "Rocke", "APT39", "BlackTech", "APT41", "Soft Cell", "Night Dragon", "Axiom"]}, "macros": [{"definition": "index=zeek sourcetype=\"zeek:rpc:json\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "zeek_rpc"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_zerologon_via_zeek_filter"}]}, {"name": "Detect Port Security Violation", "id": "2de3d5b8-a4fa-45c5-8540-6d071c194d24", "version": 1, "date": "2020-10-28", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": [], "description": "By enabling Port Security on a Cisco switch you can restrict input to an interface by limiting and identifying MAC addresses of the workstations that are allowed to access the port. When you assign secure MAC addresses to a secure port, the port does not forward packets with source addresses outside the group of defined addresses. If you limit the number of secure MAC addresses to one and assign a single secure MAC address, the workstation attached to that port is assured the full bandwidth of the port. If a port is configured as a secure port and the maximum number of secure MAC addresses is reached, when the MAC address of a workstation attempting to access the port is different from any of the identified secure MAC addresses, a security violation occurs.", "search": "`cisco_networks` (facility=\"PM\" mnemonic=\"ERR_DISABLE\" disable_cause=\"psecure-violation\") OR (facility=\"PORT_SECURITY\" mnemonic=\"PSECURE_VIOLATION\" OR mnemonic=\"PSECURE_VIOLATION_VLAN\") | eval src_interface=src_int_prefix_long+src_int_suffix | stats min(_time) AS firstTime max(_time) AS lastTime values(disable_cause) AS disable_cause values(src_mac) AS src_mac values(src_vlan) AS src_vlan values(action) AS action count by host src_interface | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_port_security_violation_filter`", "how_to_implement": "This search uses a standard SPL query on logs from Cisco Network devices. The network devices must be configured with Port Security and Error Disable for this to work (see https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst4500/12-2/25ew/configuration/guide/conf/port_sec.html) and log with a severity level of minimum \"5 - notification\". The search also requires that the Cisco Networks Add-on for Splunk (https://splunkbase.splunk.com/app/1467) is used to parse the logs from the Cisco network devices.", "known_false_positives": "This search might be prone to high false positives if you have malfunctioning devices connected to your ethernet ports or if end users periodically connect physical devices to the network.", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect Port Security Violation", "kill_chain_phases": ["Reconnaissance", "Delivery", "Exploitation", "Actions on Objectives"], "mitre_attack_id": ["T1200", "T1498", "T1557", "T1557.002"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "facility", "mnemonic", "disable_cause", "src_int_prefix_long", "src_int_suffix", "src_mac", "src_vlan", "action", "host", "src_interface"], "security_domain": "network", "mitre_attack_technique": ["Hardware Additions", "Network Denial of Service", "Man-in-the-Middle"], "mitre_attack_tactics": ["Initial Access", "Impact", "Credential Access", "Collection"], "mitre_attack_groups": ["DarkVishnya", "no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=cisco_ios", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cisco_networks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_port_security_violation_filter"}]}, {"name": "Detect SNICat SNI Exfiltration", "id": "82d06410-134c-11eb-adc1-0242ac120002", "version": 1, "date": "2020-10-21", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for commands that the SNICat tool uses in the TLS SNI field.", "search": "`zeek_ssl` | rex field=server_name \"(?<snicat>(LIST|LS|SIZE|LD|CB|CD|EX|ALIVE|EXIT|WHERE|finito)-[A-Za-z0-9]{16}\\.)\" | stats count by src_ip dest_ip server_name snicat | where count>0 | table src_ip dest_ip server_name snicat | `detect_snicat_sni_exfiltration_filter`", "how_to_implement": "You must be ingesting Zeek SSL data into Splunk. Zeek data should also be getting ingested in JSON format.  We are detecting when any of the predefined SNICat commands are found within the server_name (SNI) field. These commands are LIST, LS, SIZE, LD, CB, EX, ALIVE, EXIT, WHERE, and finito.  You can go further once this has been detected, and run other searches to decode the SNI data to prove or disprove if any data exfiltration has taken place.", "known_false_positives": "Unknown", "references": ["https://www.mnemonic.no/blog/introducing-snicat/", "https://github.com/mnemonic-no/SNIcat", "https://attack.mitre.org/techniques/T1041/"], "tags": {"analytic_story": ["Data Exfiltration"], "asset_type": "Network", "cis20": ["CIS 13"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1041"], "nist": ["PR.DS", "DE.CM", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "server_name", "src_ip", "dest_ip"], "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over C2 Channel"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["Sandworm Team", "MuddyWater", "Wizard Spider", "Frankenstein", "Kimsuky", "Soft Cell", "APT32", "APT3", "Gamaredon Group", "Stealth Falcon", "Lazarus Group", "Ke3chang"]}, "macros": [{"definition": "index=zeek sourcetype=\"zeek:ssl:json\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "zeek_ssl"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_snicat_sni_exfiltration_filter"}]}, {"name": "Protocol or Port Mismatch", "id": "54dc1265-2f74-4b6d-b30d-49eb506a31b3", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search looks for network traffic on common ports where a higher layer protocol does not match the port that is being used. For example, this search should identify cases where protocols other than HTTP are running on TCP port 80. This can be used by attackers to circumvent firewall restrictions, or as an attempt to hide malicious communications over ports and protocols that are typically allowed and not well inspected.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where (All_Traffic.app=dns NOT All_Traffic.dest_port=53) OR ((All_Traffic.app=web-browsing OR All_Traffic.app=http) NOT (All_Traffic.dest_port=80 OR All_Traffic.dest_port=8080 OR All_Traffic.dest_port=8000)) OR (All_Traffic.app=ssl NOT (All_Traffic.dest_port=443 OR All_Traffic.dest_port=8443)) OR (All_Traffic.app=smtp NOT All_Traffic.dest_port=25) by All_Traffic.src_ip, All_Traffic.dest_ip, All_Traffic.app, All_Traffic.dest_port |`security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Traffic\")` | `protocol_or_port_mismatch_filter`", "how_to_implement": "Running this search properly requires a technology that can inspect network traffic and identify common protocols. Technologies such as Bro and Palo Alto Networks firewalls are two examples that will identify protocols via inspection, and not just assume a specific protocol based on the transport protocol and ports.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch", "Command and Control"], "asset_type": "Endpoint", "cis20": ["CIS 9", "CIS 12"], "kill_chain_phases": ["Command and Control"], "mitre_attack_id": ["T1048.003", "T1048"], "nist": ["DE.AE", "PR.AC"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.app", "All_Traffic.dest_port", "All_Traffic.src_ip", "All_Traffic.dest_ip"], "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "protocol_or_port_mismatch_filter"}]}, {"name": "TOR Traffic", "id": "ea688274-9c06-4473-b951-e4cb7a5d7a45", "version": 2, "date": "2020-07-22", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search looks for network traffic identified as The Onion Router (TOR), a benign anonymity network which can be abused for a variety of nefarious purposes.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=tor AND All_Traffic.action=allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Traffic\")` | `tor_traffic_filter`", "how_to_implement": "In order to properly run this search, Splunk needs to ingest data from firewalls or other network control devices that mediate the traffic allowed into an environment. This is necessary so that the search can identify an 'action' taken on the traffic of interest. The search requires the Network_Traffic data model be populated.", "known_false_positives": "None at this time", "references": [], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch", "Ransomware", "Command and Control", "NOBELIUM Group"], "asset_type": "Endpoint", "cis20": ["CIS 9", "CIS 12"], "kill_chain_phases": ["Command and Control"], "mitre_attack_id": ["T1071", "T1071.001"], "nist": ["DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.app", "All_Traffic.action", "All_Traffic.src_ip", "All_Traffic.dest_ip", "All_Traffic.dest_port"], "security_domain": "network", "mitre_attack_technique": ["Application Layer Protocol", "Web Protocols"], "mitre_attack_tactics": ["Command And Control", "Command And Control"], "mitre_attack_groups": ["Rocke", "Magic Hound", "Dragonfly 2.0", "Sandworm Team", "TA505", "Rocke", "APT39", "Tropic Trooper", "MuddyWater", "Wizard Spider", "Inception", "APT41", "SilverTerrier", "Machete", "APT28", "WIRTE", "APT33", "FIN4", "Night Dragon", "APT18", "APT38", "Cobalt Group", "APT19", "Threat Group-3390", "Rancor", "Orangeworm", "APT37", "Ke3chang", "Dark Caracal", "Turla", "Lazarus Group", "BRONZE BUTLER", "APT32", "OilRig", "Magic Hound", "Gamaredon Group", "Stealth Falcon"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "tor_traffic_filter"}]}, {"name": "Detect Rogue DHCP Server", "id": "6e1ada88-7a0d-4ac1-92c6-03d354686079", "version": 1, "date": "2020-08-11", "author": "Mikael Bjerkeland, Splunk", "type": "TTP", "datamodel": [], "description": "By enabling DHCP Snooping as a Layer 2 Security measure on the organization's network devices, we will be able to detect unauthorized DHCP servers handing out DHCP leases to devices on the network (Man in the Middle attack).", "search": "`cisco_networks` facility=\"DHCP_SNOOPING\" mnemonic=\"DHCP_SNOOPING_UNTRUSTED_PORT\" | stats min(_time) AS firstTime max(_time) AS lastTime count values(message_type) AS message_type values(src_mac) AS src_mac BY host | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)`| `detect_rogue_dhcp_server_filter`", "how_to_implement": "This search uses a standard SPL query on logs from Cisco Network devices. The network devices must be configured with DHCP Snooping enabled (see https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst2960x/software/15-0_2_EX/security/configuration_guide/b_sec_152ex_2960-x_cg/b_sec_152ex_2960-x_cg_chapter_01101.html) and log with a severity level of minimum \"5 - notification\". The search also requires that the Cisco Networks Add-on for Splunk (https://splunkbase.splunk.com/app/1467) is used to parse the logs from the Cisco network devices.", "known_false_positives": "This search might be prone to high false positives if DHCP Snooping has been incorrectly configured or in the unlikely event that the DHCP server has been moved to another network interface.", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Infrastructure", "cis20": ["CIS 1", "CIS 11"], "detection_name": "Detect Rogue DHCP Server", "kill_chain_phases": ["Reconnaissance", "Delivery", "Actions on Objectives"], "mitre_attack_id": ["T1200", "T1498", "T1557"], "nist": ["ID.AM", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "facility", "mnemonic", "message_type", "src_mac", "host"], "security_domain": "network", "mitre_attack_technique": ["Hardware Additions", "Network Denial of Service", "Man-in-the-Middle"], "mitre_attack_tactics": ["Initial Access", "Impact", "Credential Access", "Collection"], "mitre_attack_groups": ["DarkVishnya", "no", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=cisco_ios", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cisco_networks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_rogue_dhcp_server_filter"}]}, {"name": "Prohibited Network Traffic Allowed", "id": "ce5a0962-849f-4720-a678-753fe6674479", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search looks for network traffic defined by port and transport layer protocol in the Enterprise Security lookup table \"lookup_interesting_ports\", that is marked as prohibited, and has an associated 'allow' action in the Network_Traffic data model. This could be indicative of a misconfigured network device.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.action = allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action | lookup update=true interesting_ports_lookup dest_port as All_Traffic.dest_port OUTPUT app is_prohibited note transport | search is_prohibited=true | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Traffic\")` | `prohibited_network_traffic_allowed_filter`", "how_to_implement": "In order to properly run this search, Splunk needs to ingest data from firewalls or other network control devices that mediate the traffic allowed into an environment. This is necessary so that the search can identify an 'action' taken on the traffic of interest. The search requires the Network_Traffic data model be populated.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Prohibited Traffic Allowed or Protocol Mismatch", "Ransomware", "Command and Control"], "asset_type": "Endpoint", "cis20": ["CIS 9", "CIS 12"], "kill_chain_phases": ["Delivery", "Command and Control"], "mitre_attack_id": ["T1048"], "nist": ["DE.AE", "PR.AC"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.action", "All_Traffic.src_ip", "All_Traffic.dest_ip", "All_Traffic.dest_port"], "security_domain": "network", "mitre_attack_technique": ["Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "prohibited_network_traffic_allowed_filter"}]}, {"name": "Large Volume of DNS ANY Queries", "id": "8fa891f7-a533-4b3c-af85-5aa2e7c1f1eb", "version": 1, "date": "2017-09-20", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Network_Resolution"], "description": "The search is used to identify attempts to use your DNS Infrastructure for DDoS purposes via a DNS amplification attack leveraging ANY queries.", "search": "| tstats `security_content_summariesonly` count from datamodel=Network_Resolution where nodename=DNS \"DNS.message_type\"=\"QUERY\" \"DNS.record_type\"=\"ANY\" by \"DNS.dest\" | `drop_dm_object_name(\"DNS\")` | where count>200 | `large_volume_of_dns_any_queries_filter`", "how_to_implement": "To successfully implement this search you must ensure that DNS data is populating the Network_Resolution data model.", "known_false_positives": "Legitimate ANY requests may trigger this search, however it is unusual to see a large volume of them under typical circumstances. You may modify the threshold in the search to better suit your environment.", "references": [], "tags": {"analytic_story": ["DNS Amplification Attacks"], "asset_type": "DNS Servers", "cis20": ["CIS 11", "CIS 12"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1498", "T1498.002"], "nist": ["PR.PT", "DE.AE", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "DNS.message_type", "DNS.record_type", "DNS.dest"], "security_domain": "network", "mitre_attack_technique": ["Network Denial of Service", "Reflection Amplification"], "mitre_attack_tactics": ["Impact", "Impact"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "large_volume_of_dns_any_queries_filter"}]}, {"name": "Protocols passing authentication in cleartext", "id": "6923cd64-17a0-453c-b945-81ac2d8c6db9", "version": 3, "date": "2021-08-19", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "The following analytic identifies cleartext protocols at risk of leaking sensitive information. Currently, this consists of legacy protocols such as telnet (port 23), POP3 (port 110), IMAP (port 143), and non-anonymous FTP (port 21) sessions. While some of these protocols may be used over SSL, they typically are found on different assigned ports in those instances.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.action!=blocked AND All_Traffic.transport=\"tcp\" AND (All_Traffic.dest_port=\"23\" OR All_Traffic.dest_port=\"143\" OR All_Traffic.dest_port=\"110\" OR (All_Traffic.dest_port=\"21\" AND All_Traffic.user != \"anonymous\")) by All_Traffic.user All_Traffic.src All_Traffic.dest All_Traffic.dest_port | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Traffic\")` | `protocols_passing_authentication_in_cleartext_filter`", "how_to_implement": "This search requires you to be ingesting your network traffic, and populating the Network_Traffic data model. For more accurate result it's better to limit destination to organization private and public IP range, like All_Traffic.dest IN(192.168.0.0/16,172.16.0.0/12,10.0.0.0/8, x.x.x.x/22)", "known_false_positives": "Some networks may use kerberized FTP or telnet servers, however, this is rare.", "references": ["https://www.rackaid.com/blog/secure-your-email-and-file-transfers/", "https://www.infosecmatter.com/capture-passwords-using-wireshark/"], "tags": {"analytic_story": ["Use of Cleartext Protocols"], "asset_type": "Endpoint", "cis20": ["CIS 9", "CIS 14"], "kill_chain_phases": ["Reconnaissance", "Actions on Objectives"], "nist": ["PR.PT", "DE.AE", "PR.AC", "PR.DS"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.transport", "All_Traffic.dest_port", "All_Traffic.user", "All_Traffic.src", "All_Traffic.dest", "All_Traffic.action"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "protocols_passing_authentication_in_cleartext_filter"}]}, {"name": "Detect Large Outbound ICMP Packets", "id": "e9c102de-4d43-42a7-b1c8-8062ea297419", "version": 2, "date": "2018-06-01", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search looks for outbound ICMP packets with a packet size larger than 1,000 bytes. Various threat actors have been known to use ICMP as a command and control channel for their attack infrastructure. Large ICMP packets from an endpoint to a remote host may be indicative of this activity.", "search": "| tstats `security_content_summariesonly` count earliest(_time) as firstTime latest(_time) as lastTime values(All_Traffic.action) values(All_Traffic.bytes) from datamodel=Network_Traffic where All_Traffic.action !=blocked All_Traffic.dest_category !=internal (All_Traffic.protocol=icmp OR All_Traffic.transport=icmp) All_Traffic.bytes > 1000 by All_Traffic.src_ip All_Traffic.dest_ip | `drop_dm_object_name(\"All_Traffic\")` | search ( dest_ip!=10.0.0.0/8 AND dest_ip!=172.16.0.0/12 AND dest_ip!=192.168.0.0/16) | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `detect_large_outbound_icmp_packets_filter`", "how_to_implement": "In order to run this search effectively, we highly recommend that you leverage the Assets and Identity framework. It is important that you have a good understanding of how your network segments are designed and that you are able to distinguish internal from external address space. Add a category named `internal` to the CIDRs that host the company's assets in the `assets_by_cidr.csv` lookup file, which is located in `$SPLUNK_HOME/etc/apps/SA-IdentityManagement/lookups/`. More information on updating this lookup can be found here: https://docs.splunk.com/Documentation/ES/5.0.0/Admin/Addassetandidentitydata. This search also requires you to be ingesting your network traffic and populating the Network_Traffic data model", "known_false_positives": "ICMP packets are used in a variety of ways to help troubleshoot networking issues and ensure the proper flow of traffic. As such, it is possible that a large ICMP packet could be perfectly legitimate. If large ICMP packets are associated with command and control traffic, there will typically be a large number of these packets observed over time. If the search is providing a large number of false positives, you can modify the macro `detect_large_outbound_icmp_packets_filter` to adjust the byte threshold or add specific IP addresses to an allow list.", "references": [], "tags": {"analytic_story": ["Command and Control"], "asset_type": "Endpoint", "cis20": ["CIS 9", "CIS 12"], "kill_chain_phases": ["Command and Control"], "mitre_attack_id": ["T1095"], "nist": ["DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.action", "All_Traffic.bytes", "All_Traffic.dest_category", "All_Traffic.protocol", "All_Traffic.transport", "All_Traffic.src_ip", "All_Traffic.dest_ip"], "security_domain": "network", "mitre_attack_technique": ["Non-Application Layer Protocol"], "mitre_attack_tactics": ["Command And Control"], "mitre_attack_groups": ["APT29", "PLATINUM", "APT3"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_large_outbound_icmp_packets_filter"}]}, {"name": "Remote Desktop Network Bruteforce", "id": "a98727cc-286b-4ff2-b898-41df64695923", "version": 2, "date": "2020-07-21", "author": "Jose Hernandez, Splunk", "type": "TTP", "datamodel": ["Network_Traffic"], "description": "This search looks for RDP application network traffic and filters any source/destination pair generating more than twice the standard deviation of the average traffic.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=rdp by All_Traffic.src All_Traffic.dest All_Traffic.dest_port | eventstats stdev(count) AS stdev avg(count) AS avg p50(count) AS p50 | where count>(avg + stdev*2) | rename All_Traffic.src AS src All_Traffic.dest AS dest | table firstTime lastTime src dest count avg p50 stdev | `remote_desktop_network_bruteforce_filter`", "how_to_implement": "You must ensure that your network traffic data is populating the Network_Traffic data model.", "known_false_positives": "RDP gateways may have unusually high amounts of traffic from all other hosts' RDP applications in the network.", "references": [], "tags": {"analytic_story": ["SamSam Ransomware", "Ryuk Ransomware"], "asset_type": "Endpoint", "cis20": ["CIS 12", "CIS 9", "CIS 16"], "kill_chain_phases": ["Reconnaissance", "Delivery"], "mitre_attack_id": ["T1021.001", "T1021"], "nist": ["DE.AE", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.app", "All_Traffic.src", "All_Traffic.dest", "All_Traffic.dest_port"], "security_domain": "network", "mitre_attack_technique": ["Remote Desktop Protocol", "Remote Services"], "mitre_attack_tactics": ["Lateral Movement", "Lateral Movement"], "mitre_attack_groups": ["Blue Mockingbird", "Wizard Spider", "Silence", "APT41", "TEMP.Veles", "Leviathan", "APT39", "Stolen Pencil", "Cobalt Group", "Dragonfly 2.0", "FIN8", "APT3", "OilRig", "menuPass", "FIN10", "Patchwork", "FIN6", "Lazarus Group", "APT1", "Axiom", "no"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "remote_desktop_network_bruteforce_filter"}]}, {"name": "Abnormally High Number Of Cloud Instances Destroyed", "id": "ef629fc9-1583-4590-b62a-f2247fbf7bbf", "version": 1, "date": "2020-08-21", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search finds for the number successfully destroyed cloud instances for every 4 hour block. This is split up between weekdays and the weekend. It then applies the probability densitiy model previously created and alerts on any outliers.", "search": "| tstats count as instances_destroyed values(All_Changes.object_id) as object_id from datamodel=Change where All_Changes.action=deleted AND All_Changes.status=success AND All_Changes.object_category=instance by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join HourOfDay isWeekend [summary cloud_excessive_instances_destroyed_v1] | where cardinality >=16 | apply cloud_excessive_instances_destroyed_v1 threshold=0.005 | rename \"IsOutlier(instances_destroyed)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | eval distance_from_threshold = instances_destroyed - expected_upper_threshold | table _time, user, instances_destroyed, expected_upper_threshold, distance_from_threshold, object_id | `abnormally_high_number_of_cloud_instances_destroyed_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Instances Destroyed` to create the probability density function.", "known_false_positives": "Many service accounts configured within a cloud infrastructure are known to exhibit this behavior. Please adjust the threshold values and filter out service accounts from the output. Always verify if this search alerted on a human user.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Instance Activities"], "asset_type": "Cloud Instance", "cis20": ["CIS 13"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.DP", "DE.AE"], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.status", "All_Changes.object_category", "All_Changes.user"], "risk_object": "user", "risk_object_type": "user", "risk_score": 10, "security_domain": "Cloud", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "abnormally_high_number_of_cloud_instances_destroyed_filter"}]}, {"name": "High Number of Login Failures from a single source", "id": "7f398cfb-918d-41f4-8db8-2e2474e02222", "version": 1, "date": "2020-12-16", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search will detect more than 5 login failures in Office365 Azure Active Directory from a single source IP address. Please adjust the threshold value of 5 as suited for your environment.", "search": "`o365_management_activity` Operation=UserLoginFailed  record_type=AzureActiveDirectoryStsLogon app=AzureActiveDirectory | stats count dc(user) as accounts_locked values(user) as user values(LogonError) as LogonError values(authentication_method) as authentication_method values(signature) as signature values(UserAgent) as UserAgent by src_ip record_type Operation app | search accounts_locked >= 5| `high_number_of_login_failures_from_a_single_source_filter`", "how_to_implement": "", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Office 365 Detections"], "asset_type": "Office 365", "cis20": ["CIS 16"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1110.001", "T1110"], "nist": ["DE.DP", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Operation", "record_type", "app", "user", "LogonError", "authentication_method", "signature", "UserAgent", "src_ip", "record_type"], "security_domain": "threat", "mitre_attack_technique": ["Password Guessing", "Brute Force"], "mitre_attack_tactics": ["Credential Access", "Credential Access"], "mitre_attack_groups": ["no", "DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "high_number_of_login_failures_from_a_single_source_filter"}]}, {"name": "Detect Spike in AWS Security Hub Alerts for User", "id": "2a9b80d3-6220-4345-b5ad-290bf5d0d222", "version": 3, "date": "2021-01-26", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for a spike in number of of AWS security Hub alerts for an AWS IAM User in 4 hours intervals.", "search": "`aws_securityhub_finding` \"findings{}.Resources{}.Type\"= AwsIamUser | rename findings{}.Resources{}.Id as user | bucket span=4h _time | stats count AS alerts by _time user | eventstats avg(alerts) as total_launched_avg, stdev(alerts) as total_launched_stdev | eval threshold_value = 2 | eval isOutlier=if(alerts > total_launched_avg+(total_launched_stdev * threshold_value), 1, 0) | search isOutlier=1 | table _time user alerts |`detect_spike_in_aws_security_hub_alerts_for_user_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your Security Hub inputs. The threshold_value should be tuned to your environment and schedule these searches according to the bucket span interval.", "known_false_positives": "None", "references": [], "tags": {"analytic_story": ["AWS Security Hub Alerts"], "asset_type": "AWS Instance", "cis20": ["CIS 13"], "nist": ["DE.DP", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "findings{}.Resources{}.Type", "indings{}.Resources{}.Id", "user"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=\"aws:securityhub:finding\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_securityhub_finding"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_spike_in_aws_security_hub_alerts_for_user_filter"}]}, {"name": "Detect GCP Storage access from a new IP", "id": "ccc3246a-daa1-11ea-87d0-0242ac130022", "version": 1, "date": "2020-08-10", "author": "Shannon Davis, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks at GCP Storage bucket-access logs and detects new or previously unseen remote IP addresses that have successfully accessed a GCP Storage bucket.", "search": "`google_gcp_pubsub_message` | multikv | rename sc_status_ as status | rename cs_object_ as bucket_name | rename c_ip_ as remote_ip | rename cs_uri_ as request_uri | rename cs_method_ as operation | search status=\"\\\"200\\\"\" | stats earliest(_time) as firstTime latest(_time) as lastTime by bucket_name remote_ip operation request_uri | table firstTime, lastTime, bucket_name, remote_ip, operation, request_uri | inputlookup append=t previously_seen_gcp_storage_access_from_remote_ip.csv | stats min(firstTime) as firstTime, max(lastTime) as lastTime by bucket_name remote_ip operation request_uri | outputlookup previously_seen_gcp_storage_access_from_remote_ip.csv | eval newIP=if(firstTime >= relative_time(now(),\"-70m@m\"), 1, 0) | where newIP=1 | eval first_time=strftime(firstTime,\"%m/%d/%y %H:%M:%S\") | eval last_time=strftime(lastTime,\"%m/%d/%y %H:%M:%S\") | table  first_time last_time bucket_name remote_ip operation request_uri | `detect_gcp_storage_access_from_a_new_ip_filter`", "how_to_implement": "This search relies on the Splunk Add-on for Google Cloud Platform, setting up a Cloud Pub/Sub input, along with the relevant GCP PubSub topics and logging sink to capture GCP Storage Bucket events (https://cloud.google.com/logging/docs/routing/overview). In order to capture public GCP Storage Bucket access logs, you must also enable storage bucket logging to your PubSub Topic as per https://cloud.google.com/storage/docs/access-logs.  These logs are deposited into the nominated Storage Bucket on an hourly basis and typically show up by 15 minutes past the hour.  It is recommended to configure any saved searches or correlation searches in Enterprise Security to run on an hourly basis at 30 minutes past the hour (cron definition of 30 * * * *).  A lookup table (previously_seen_gcp_storage_access_from_remote_ip.csv) stores the previously seen access requests, and is used by this search to determine any newly seen IP addresses accessing the Storage Buckets.", "known_false_positives": "GCP Storage buckets can be accessed from any IP (if the ACLs are open to allow it), as long as it can make a successful connection. This will be a false postive, since the search is looking for a new IP within the past two hours.", "references": [], "tags": {"analytic_story": ["Suspicious GCP Storage Activities"], "asset_type": "GCP Storage Bucket", "cis20": ["CIS 13", "CIS 14"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1530"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "sc_status_", "cs_object_", "c_ip_", "cs_uri_", "cs_method_"], "security_domain": "network", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"google:gcp:pubsub:message\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "google_gcp_pubsub_message"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_gcp_storage_access_from_a_new_ip_filter"}]}, {"name": "Amazon EKS Kubernetes Pod scan detection", "id": "dbfca1dd-b8e5-4ba4-be0e-e565e5d62002", "version": 1, "date": "2020-04-15", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection information on unauthenticated requests against Kubernetes' Pods API", "search": "`aws_cloudwatchlogs_eks` \"user.username\"=\"system:anonymous\" verb=list objectRef.resource=pods requestURI=\"/api/v1/pods\" | rename source as cluster_name sourceIPs{} as src_ip | stats count min(_time) as firstTime max(_time) as lastTime values(responseStatus.reason) values(responseStatus.code) values(userAgent) values(verb) values(requestURI) by src_ip cluster_name user.username user.groups{} | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `amazon_eks_kubernetes_pod_scan_detection_filter` ", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on forAWS (version 4.4.0 or later), then configure your AWS CloudWatch EKS Logs.Please also customize the `kubernetes_pods_aws_scan_fingerprint_detection` macro to filter out the false positives.", "known_false_positives": "Not all unauthenticated requests are malicious, but frequency, UA and source IPs and direct request to API provide context.", "references": [], "tags": {"analytic_story": ["Kubernetes Scanning Activity"], "asset_type": "Amazon EKS Kubernetes cluster Pod", "kill_chain_phases": ["Reconnaissance"], "mitre_attack_id": ["T1526"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "user.username", "verb", "objectRef.resource", "requestURI", "source", "sourceIPs{}", "responseStatus.reason", "responseStatus.code", "userAgent", "src_ip", "user.groups{}"], "security_domain": "threat", "mitre_attack_technique": ["Cloud Service Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "amazon_eks_kubernetes_pod_scan_detection_filter"}]}, {"name": "Gsuite suspicious calendar invite", "id": "03cdd68a-34fb-11ec-9bd3-acde48001122", "version": 1, "date": "2021-10-24", "author": "Rod Soto, Teoderick Contreras", "type": "Hunting", "datamodel": [], "description": "This search can help the detection of compromised accounts or internal users sending suspcious calendar invites via GSuite calendar. These invites may contain malicious links or attachments.", "search": "`gsuite_calendar` |bin span=5m _time |rename parameters.* as * |search target_calendar_id!=null email=\"*yourdomain.com\"| stats  count values(target_calendar_id) values(event_title) values(event_guest) by email _time | where count >100| `gsuite_suspicious_calendar_invite_filter`", "how_to_implement": "In order to successfully implement this search, you need to be ingesting logs related to gsuite (gsuite:calendar:json) having the file sharing metadata like file type, source owner, destination target user, description, etc. This search can also be made more specific by selecting specific emails, subdomains timeframe, organizational units, targeted user, etc. In order for the search to work for your environment please update `yourdomain.com` value in the query with the domain relavant for your organization.", "known_false_positives": "This search will also produce normal activity statistics. Fields such as email, ip address, name, parameters.organizer_calendar_id, parameters.target_calendar_id and parameters.event_title may give away phishing intent.For more specific results use email parameter.", "references": ["https://www.techrepublic.com/article/how-to-avoid-the-dreaded-google-calendar-malicious-invite-issue/", "https://gcn.com/articles/2012/09/26/20-most-common-words-phishing-attacks.aspx"], "tags": {"analytic_story": ["Spearphishing Attachments"], "dataset": [[]], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1566"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "email", "parameters.event_title", "parameters.target_calendar_id", "parameters.event_title"], "security_domain": "threat", "mitre_attack_technique": ["Phishing"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=gsuite:calendar:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_calendar"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_suspicious_calendar_invite_filter"}]}, {"name": "aws detect permanent key creation", "id": "12d6d713-3cb4-4ffc-a064-1dca3d1cca01", "version": 1, "date": "2020-07-27", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection of accounts creating permanent keys. Permanent keys are not created by default and they are only needed for programmatic calls. Creation of Permanent key is an important event to monitor.", "search": "`aws_cloudwatchlogs_eks` CreateAccessKey | spath eventName | search eventName=CreateAccessKey \"userIdentity.type\"=IAMUser | table sourceIPAddress userName userIdentity.type userAgent action status responseElements.accessKey.createDate responseElements.accessKey.status responseElements.accessKey.accessKeyId |`aws_detect_permanent_key_creation_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with cloudwatch logs", "known_false_positives": "Not all permanent key creations are malicious. If there is a policy of rotating keys this search can be adjusted to provide better context.", "references": [], "tags": {"analytic_story": ["AWS Cross Account Activity"], "asset_type": "AWS Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1078"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userIdentity.type", "sourceIPAddress", "userName userIdentity.type", "userAgent", "action", "status", "responseElements.accessKey.createDate", "esponseElements.accessKey.status", "responseElements.accessKey.accessKeyId"], "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_permanent_key_creation_filter"}]}, {"name": "aws detect role creation", "id": "5f04081e-ddee-4353-afe4-504f288de9ad", "version": 1, "date": "2020-07-27", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection of role creation by IAM users. Role creation is an event by itself if user is creating a new role with trust policies different than the available in AWS and it can be used for lateral movement and escalation of privileges.", "search": "`aws_cloudwatchlogs_eks` event_name=CreateRole action=created userIdentity.type=AssumedRole requestParameters.description=Allows* | table sourceIPAddress userIdentity.principalId userIdentity.arn action event_name awsRegion http_user_agent mfa_auth msg requestParameters.roleName requestParameters.description responseElements.role.arn responseElements.role.createDate | `aws_detect_role_creation_filter`", "how_to_implement": "You must install splunk AWS add-on and Splunk App for AWS. This search works with cloudwatch logs", "known_false_positives": "CreateRole is not very common in common users. This search can be adjusted to provide specific values to identify cases of abuse. In general AWS provides plenty of trust policies that fit most use cases.", "references": [], "tags": {"analytic_story": ["AWS Cross Account Activity"], "asset_type": "AWS Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1078"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "event_name", "action", "userIdentity.type", "requestParameters.description", "sourceIPAddress", "userIdentity.principalId", "userIdentity.arn", "action", "event_name", "awsRegion", "http_user_agent", "mfa_auth", "msg", "requestParameters.roleName", "requestParameters.description", "responseElements.role.arn", "responseElements.role.createDate"], "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_role_creation_filter"}]}, {"name": "Gdrive suspicious file sharing", "id": "a7131dae-34e3-11ec-a2de-acde48001122", "version": 1, "date": "2021-10-24", "author": "Rod Soto, Teoderick Contreras", "type": "Hunting", "datamodel": [], "description": "This search can help the detection of compromised accounts or internal users sharing potentially malicious/classified documents with users outside your organization via GSuite file sharing .", "search": "`gsuite_drive` name=change_user_access | rename parameters.* as * | search email = \"*@yourdomain.com\" target_user != \"*@yourdomain.com\" | stats count values(owner) as owner values(target_user) as target values(doc_type) as doc_type values(doc_title) as doc_title dc(target_user) as distinct_target by src_ip email | where distinct_target > 50 | `gdrive_suspicious_file_sharing_filter`", "how_to_implement": "Need to implement Gsuite logging targeting Google suite drive activity. In order for the search to work for your environment please update `yourdomain.com` value in the query with the domain relavant for your organization.", "known_false_positives": "This is an anomaly search, you must specify your domain in the parameters so it either filters outside domains or focus on internal domains. This search may also help investigate compromise of accounts. By looking at for example source ip addresses, document titles and abnormal number of shares and shared target users.", "references": ["https://www.splunk.com/en_us/blog/security/investigating-gsuite-phishing-attacks-with-splunk.html"], "tags": {"analytic_story": ["Spearphishing Attachments", "Data Exfiltration"], "dataset": [[]], "kill_chain_phases": ["Exploitation"], "mitre_attack_id": ["T1566"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "src_ip", "parameters.owner", "parameters.target_user", "parameters.doc_title", "parameters.doc_type"], "security_domain": "threat", "mitre_attack_technique": ["Phishing"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=gsuite:drive:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_drive"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gdrive_suspicious_file_sharing_filter"}]}, {"name": "GCP Detect gcploit framework", "id": "a1c5a85e-a162-410c-a5d9-99ff639e5a52", "version": 1, "date": "2020-10-08", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search provides detection of GCPloit exploitation framework. This framework can be used to escalate privileges and move laterally from compromised high privilege accounts.", "search": "`google_gcp_pubsub_message` data.protoPayload.request.function.timeout=539s | table src src_user data.resource.labels.project_id data.protoPayload.request.function.serviceAccountEmail data.protoPayload.authorizationInfo{}.permission data.protoPayload.request.location http_user_agent | `gcp_detect_gcploit_framework_filter`", "how_to_implement": "You must install splunk GCP add-on. This search works with gcp:pubsub:message logs", "known_false_positives": "Payload.request.function.timeout value can possibly be match with other functions or requests however the source user and target request account may indicate an attempt to move laterally accross acounts or projects", "references": ["https://github.com/dxa4481/gcploit", "https://www.youtube.com/watch?v=Ml09R38jpok"], "tags": {"analytic_story": ["GCP Cross Account Activity"], "asset_type": "GCP Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1078"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "data.protoPayload.request.function.timeout", "src", "src_user", "data.resource.labels.project_id", "data.protoPayload.request.function.serviceAccountEmail", "data.protoPayload.authorizationInfo{}.permission", "data.protoPayload.request.location", "http_user_agent"], "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=\"google:gcp:pubsub:message\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "google_gcp_pubsub_message"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gcp_detect_gcploit_framework_filter"}]}, {"name": "aws detect attach to role policy", "id": "88fc31dd-f331-448c-9856-d3d51dd5d3a1", "version": 1, "date": "2020-07-27", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection of an user attaching itself to a different role trust policy. This can be used for lateral movement and escalation of privileges.", "search": "`aws_cloudwatchlogs_eks` attach policy| spath requestParameters.policyArn | table sourceIPAddress user_access_key userIdentity.arn userIdentity.sessionContext.sessionIssuer.arn eventName errorCode errorMessage status action requestParameters.policyArn userIdentity.sessionContext.attributes.mfaAuthenticated userIdentity.sessionContext.attributes.creationDate  | `aws_detect_attach_to_role_policy_filter`", "how_to_implement": "You must install splunk AWS add-on and Splunk App for AWS. This search works with cloudwatch logs", "known_false_positives": "Attach to policy can create a lot of noise. This search can be adjusted to provide specific values to identify cases of abuse (i.e status=failure). The search can provide context for common users attaching themselves to higher privilege policies or even newly created policies.", "references": [], "tags": {"analytic_story": ["AWS Cross Account Activity"], "asset_type": "AWS Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1078"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "requestParameters.policyArn"], "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_attach_to_role_policy_filter"}]}, {"name": "Detect Spike in blocked Outbound Traffic from your AWS", "id": "ada0f278-84a8-46w1-a3f1-w32372d4bd53", "version": 1, "date": "2018-05-07", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search will detect spike in blocked outbound network connections originating from within your AWS environment.  It will also update the cache file that factors in the latest data.", "search": "`cloudwatchlogs_vpcflow` action=blocked (src_ip=10.0.0.0/8 OR src_ip=172.16.0.0/12 OR src_ip=192.168.0.0/16) ( dest_ip!=10.0.0.0/8 AND dest_ip!=172.16.0.0/12 AND dest_ip!=192.168.0.0/16)  [search  `cloudwatchlogs_vpcflow` action=blocked (src_ip=10.0.0.0/8 OR src_ip=172.16.0.0/12 OR src_ip=192.168.0.0/16) ( dest_ip!=10.0.0.0/8 AND dest_ip!=172.16.0.0/12 AND dest_ip!=192.168.0.0/16)  | stats count as numberOfBlockedConnections by src_ip | inputlookup baseline_blocked_outbound_connections append=t | fields - latestCount | stats values(*) as * by src_ip | rename numberOfBlockedConnections as latestCount | eval newAvgBlockedConnections=avgBlockedConnections + (latestCount-avgBlockedConnections)/720 | eval newStdevBlockedConnections=sqrt(((pow(stdevBlockedConnections, 2)*719 + (latestCount-newAvgBlockedConnections)*(latestCount-avgBlockedConnections))/720)) | eval avgBlockedConnections=coalesce(newAvgBlockedConnections, avgBlockedConnections), stdevBlockedConnections=coalesce(newStdevBlockedConnections, stdevBlockedConnections), numDataPoints=if(isnull(latestCount), numDataPoints, numDataPoints+1) | table src_ip, latestCount, numDataPoints, avgBlockedConnections, stdevBlockedConnections | outputlookup baseline_blocked_outbound_connections | eval dataPointThreshold = 5, deviationThreshold = 3 | eval isSpike=if((latestCount > avgBlockedConnections+deviationThreshold*stdevBlockedConnections) AND numDataPoints > dataPointThreshold, 1, 0) | where isSpike=1 | table src_ip] | stats values(dest_ip) as \"Blocked Destination IPs\", values(interface_id) as \"resourceId\" count as numberOfBlockedConnections, dc(dest_ip) as uniqueDestConnections by src_ip | `detect_spike_in_blocked_outbound_traffic_from_your_aws_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your VPC Flow logs. You can modify `dataPointThreshold` and `deviationThreshold` to better fit your environment. The `dataPointThreshold` variable is the number of data points required to meet the definition of \"spike.\" The `deviationThreshold` variable is the number of standard deviations away from the mean that the value must be to be considered a spike. This search works best when you run the \"Baseline of Blocked Outbound Connection\" support search once to create a history of previously seen blocked outbound connections.", "known_false_positives": "The false-positive rate may vary based on the values of`dataPointThreshold` and `deviationThreshold`. Additionally, false positives may result when AWS administrators roll out policies enforcing network blocks, causing sudden increases in the number of blocked outbound connections.", "references": [], "tags": {"analytic_story": ["AWS Network ACL Activity", "Suspicious AWS Traffic", "Command and Control"], "asset_type": "AWS Instance", "cis20": ["CIS 11"], "kill_chain_phases": ["Actions on Objectives", "Command and Control"], "nist": ["DE.AE", "DE.CM", "PR.AC"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "action", "src_ip", "dest_ip"], "risk_object": "src_ip", "risk_object_type": "system", "risk_score": 20, "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=aws:cloudwatchlogs:vpcflow", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudwatchlogs_vpcflow"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_spike_in_blocked_outbound_traffic_from_your_aws_filter"}], "lookups": [{"description": "A lookup file that will contain the baseline information for number of blocked outbound connections", "filename": "baseline_blocked_outbound_connections.csv", "name": "baseline_blocked_outbound_connections", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/baseline_blocked_outbound_connections.csv"}, {"description": "A lookup file that will contain the baseline information for number of blocked outbound connections", "filename": "baseline_blocked_outbound_connections.csv", "name": "baseline_blocked_outbound_connections", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/baseline_blocked_outbound_connections.csv"}]}, {"name": "Amazon EKS Kubernetes cluster scan detection", "id": "294c4686-63dd-4fe6-93a2-ca807626704a", "version": 1, "date": "2020-04-15", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides information of unauthenticated requests via user agent, and authentication data against Kubernetes cluster in AWS", "search": "`aws_cloudwatchlogs_eks` \"user.username\"=\"system:anonymous\" userAgent!=\"AWS Security Scanner\" | rename sourceIPs{} as src_ip | stats count min(_time) as firstTime max(_time) as lastTime values(responseStatus.reason) values(source) as cluster_name values(responseStatus.code) values(userAgent) as http_user_agent values(verb) values(requestURI) by src_ip user.username user.groups{} | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` |`amazon_eks_kubernetes_cluster_scan_detection_filter` ", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your CloudWatch EKS Logs inputs.", "known_false_positives": "Not all unauthenticated requests are malicious, but frequency, UA and source IPs will provide context.", "references": [], "tags": {"analytic_story": ["Kubernetes Scanning Activity"], "asset_type": "Amazon EKS Kubernetes cluster", "kill_chain_phases": ["Reconnaissance"], "mitre_attack_id": ["T1526"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "user.username", "userAgent", "sourceIPs{}", "responseStatus.reason", "source", "responseStatus.code", "verb", "requestURI", "src_ip", "user.groups{}"], "security_domain": "threat", "mitre_attack_technique": ["Cloud Service Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "amazon_eks_kubernetes_cluster_scan_detection_filter"}]}, {"name": "Detect New Open GCP Storage Buckets", "id": "f6ea3466-d6bb-11ea-87d0-0242ac130003", "version": 1, "date": "2020-08-05", "author": "Shannon Davis, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for GCP PubSub events where a user has created an open/public GCP Storage bucket.", "search": "`google_gcp_pubsub_message` data.resource.type=gcs_bucket data.protoPayload.methodName=storage.setIamPermissions | spath output=action path=data.protoPayload.serviceData.policyDelta.bindingDeltas{}.action | spath output=user path=data.protoPayload.authenticationInfo.principalEmail | spath output=location path=data.protoPayload.resourceLocation.currentLocations{} | spath output=src path=data.protoPayload.requestMetadata.callerIp | spath output=bucketName path=data.protoPayload.resourceName | spath output=role path=data.protoPayload.serviceData.policyDelta.bindingDeltas{}.role | spath output=member path=data.protoPayload.serviceData.policyDelta.bindingDeltas{}.member | search (member=allUsers AND action=ADD) | table  _time, bucketName, src, user, location, action, role, member | search `detect_new_open_gcp_storage_buckets_filter`", "how_to_implement": "This search relies on the Splunk Add-on for Google Cloud Platform, setting up a Cloud Pub/Sub input, along with the relevant GCP PubSub topics and logging sink to capture GCP Storage Bucket events (https://cloud.google.com/logging/docs/routing/overview).", "known_false_positives": "While this search has no known false positives, it is possible that a GCP admin has legitimately created a public bucket for a specific purpose. That said, GCP strongly advises against granting full control to the \"allUsers\" group.", "references": [], "tags": {"analytic_story": ["Suspicious GCP Storage Activities"], "asset_type": "GCP Storage Bucket", "cis20": ["CIS 13"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1530"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "data.resource.type", "data.protoPayload.methodName", "data.protoPayload.serviceData.policyDelta.bindingDeltas{}.action", "data.protoPayload.authenticationInfo.principalEmail", "data.protoPayload.resourceLocation.currentLocations{}", "data.protoPayload.requestMetadata.callerIp", "data.protoPayload.resourceName", "data.protoPayload.serviceData.policyDelta.bindingDeltas{}.role", "data.protoPayload.serviceData.policyDelta.bindingDeltas{}.member"], "security_domain": "network", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"google:gcp:pubsub:message\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "google_gcp_pubsub_message"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_new_open_gcp_storage_buckets_filter"}]}, {"name": "aws detect sts assume role abuse", "id": "8e565314-b6a2-46d8-9f05-1a34a176a662", "version": 1, "date": "2020-07-27", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection of suspicious use of sts:AssumeRole. These tokens can be created on the go and used by attackers to move laterally and escalate privileges.", "search": "`cloudtrail` user_type=AssumedRole userIdentity.sessionContext.sessionIssuer.type=Role | table sourceIPAddress userIdentity.arn user_agent user_access_key status action requestParameters.roleName responseElements.role.roleName responseElements.role.createDate | `aws_detect_sts_assume_role_abuse_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs", "known_false_positives": "Sts:AssumeRole can be very noisy as it is a standard mechanism to provide cross account and cross resources access. This search can be adjusted to provide specific values to identify cases of abuse.", "references": [], "tags": {"analytic_story": ["AWS Cross Account Activity"], "asset_type": "AWS Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1078"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "user_type", "userIdentity.sessionContext.sessionIssuer.type", "sourceIPAddress", "userIdentity.arn", "user_agent", "user_access_key", "status", "action", "requestParameters.roleName", "esponseElements.role.roleName", "esponseElements.role.createDate"], "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_sts_assume_role_abuse_filter"}]}, {"name": "Detect S3 access from a new IP", "id": "2a9b80d3-6340-4345-b5ad-291bq3d0daq4", "version": 1, "date": "2018-06-28", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks at S3 bucket-access logs and detects new or previously unseen remote IP addresses that have successfully accessed an S3 bucket.", "search": "`aws_s3_accesslogs` http_status=200  [search `aws_s3_accesslogs` http_status=200 | stats earliest(_time) as firstTime latest(_time) as lastTime by bucket_name remote_ip | inputlookup append=t previously_seen_S3_access_from_remote_ip.csv | stats min(firstTime) as firstTime, max(lastTime) as lastTime by bucket_name remote_ip | outputlookup previously_seen_S3_access_from_remote_ip.csv | eval newIP=if(firstTime >= relative_time(now(), \"-70m@m\"), 1, 0) | where newIP=1 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | table bucket_name remote_ip]| iplocation remote_ip |rename remote_ip as src_ip | table _time bucket_name src_ip City Country operation request_uri | `detect_s3_access_from_a_new_ip_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your S3 access logs' inputs. This search works best when you run the \"Previously Seen S3 Bucket Access by Remote IP\" support search once to create a history of previously seen remote IPs and bucket names.", "known_false_positives": "S3 buckets can be accessed from any IP, as long as it can make a successful connection. This will be a false postive, since the search is looking for a new IP within the past hour", "references": [], "tags": {"analytic_story": ["Suspicious AWS S3 Activities"], "asset_type": "S3 Bucket", "cis20": ["CIS 13", "CIS 14"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1530"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "http_status", "bucket_name", "remote_ip"], "risk_object": "src_ip", "risk_object_type": "system", "risk_score": 10, "security_domain": "network", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:s3:accesslogs", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_s3_accesslogs"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_s3_access_from_a_new_ip_filter"}]}, {"name": "GCP Kubernetes cluster pod scan detection", "id": "19b53215-4a16-405b-8087-9e6acf619842", "version": 1, "date": "2020-07-17", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides information of unauthenticated requests via user agent, and authentication data against Kubernetes cluster's pods", "search": "`google_gcp_pubsub_message` category=kube-audit |spath input=properties.log |search responseStatus.code=401 |table sourceIPs{} userAgent verb requestURI responseStatus.reason properties.pod | `gcp_kubernetes_cluster_pod_scan_detection_filter`", "how_to_implement": "You must install the GCP App for Splunk (version 2.0.0 or later), then configure stackdriver and set a Pub/Sub subscription to be imported to Splunk.", "known_false_positives": "Not all unauthenticated requests are malicious, but frequency, User Agent, source IPs and pods  will provide context.", "references": [], "tags": {"analytic_story": ["Kubernetes Scanning Activity"], "asset_type": "GCP Kubernetes cluster", "kill_chain_phases": ["Reconnaissance"], "mitre_attack_id": ["T1526"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "category", "responseStatus.code", "sourceIPs{}", "userAgent", "verb", "requestURI", "responseStatus.reason", "properties.pod"], "security_domain": "threat", "mitre_attack_technique": ["Cloud Service Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"google:gcp:pubsub:message\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "google_gcp_pubsub_message"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gcp_kubernetes_cluster_pod_scan_detection_filter"}]}, {"name": "Detect Spike in S3 Bucket deletion", "id": "ad12w478-84a8-4641-a3w1-e32372q4bd53", "version": 1, "date": "2018-11-27", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects users creating spikes in API activity related to deletion of S3 buckets in your AWS environment. It will also update the cache file that factors in the latest data.", "search": "`cloudtrail` eventName=DeleteBucket [search `cloudtrail` eventName=DeleteBucket | spath output=arn path=userIdentity.arn | stats count as apiCalls by arn | inputlookup s3_deletion_baseline append=t | fields - latestCount | stats values(*) as * by arn | rename apiCalls as latestCount | eval newAvgApiCalls=avgApiCalls + (latestCount-avgApiCalls)/720 | eval newStdevApiCalls=sqrt(((pow(stdevApiCalls, 2)*719 + (latestCount-newAvgApiCalls)*(latestCount-avgApiCalls))/720)) | eval avgApiCalls=coalesce(newAvgApiCalls, avgApiCalls), stdevApiCalls=coalesce(newStdevApiCalls, stdevApiCalls), numDataPoints=if(isnull(latestCount), numDataPoints, numDataPoints+1) | table arn, latestCount, numDataPoints, avgApiCalls, stdevApiCalls | outputlookup s3_deletion_baseline | eval dataPointThreshold = 15, deviationThreshold = 3 | eval isSpike=if((latestCount > avgApiCalls+deviationThreshold*stdevApiCalls) AND numDataPoints > dataPointThreshold, 1, 0) | where isSpike=1 | rename arn as userIdentity.arn | table userIdentity.arn] | spath output=user userIdentity.arn | spath output=bucketName path=requestParameters.bucketName | stats values(bucketName) as bucketName, count as numberOfApiCalls, dc(eventName) as uniqueApisCalled by user | `detect_spike_in_s3_bucket_deletion_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your AWS CloudTrail inputs. You can modify `dataPointThreshold` and `deviationThreshold` to better fit your environment. The `dataPointThreshold` variable is the minimum number of data points required to have a statistically significant amount of data to determine. The `deviationThreshold` variable is the number of standard deviations away from the mean that the value must be to be considered a spike. This search works best when you run the \"Baseline of S3 Bucket deletion activity by ARN\" support search once to create a baseline of previously seen S3 bucket-deletion activity.", "known_false_positives": "Based on the values of`dataPointThreshold` and `deviationThreshold`, the false positive rate may vary. Please modify this according the your environment.", "references": [], "tags": {"analytic_story": ["Suspicious AWS S3 Activities"], "asset_type": "S3 Bucket", "cis20": ["CIS 13"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1530"], "nist": ["DE.DP", "DE.CM", "PR.AC"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userIdentity.arn"], "risk_object": "user", "risk_object_type": "user", "risk_score": 10, "security_domain": "network", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_spike_in_s3_bucket_deletion_filter"}], "lookups": [{"description": "A placeholder for the baseline information for AWS S3 deletions", "filename": "s3_deletion_baseline.csv", "name": "s3_deletion_baseline", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/s3_deletion_baseline.csv"}, {"description": "A placeholder for the baseline information for AWS S3 deletions", "filename": "s3_deletion_baseline.csv", "name": "s3_deletion_baseline", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/s3_deletion_baseline.csv"}]}, {"name": "Kubernetes AWS detect suspicious kubectl calls", "id": "042a3d32-8318-4763-9679-09db2644a8f2", "version": 1, "date": "2020-06-23", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides information on anonymous Kubectl calls with IP, verb namespace and object access context", "search": "`aws_cloudwatchlogs_eks` userAgent=kubectl* sourceIPs{}!=127.0.0.1 sourceIPs{}!=::1 src_user=system:anonymous  | table  src_ip src_user verb userAgent requestURI  | stats  count by src_ip src_user verb userAgent requestURI |`kubernetes_aws_detect_suspicious_kubectl_calls_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with cloudwatch logs.", "known_false_positives": "Kubectl calls are not malicious by nature. However source IP, verb and Object can reveal potential malicious activity, specially anonymous suspicious IPs and sensitive objects such as configmaps or secrets", "references": [], "tags": {"analytic_story": ["Kubernetes Sensitive Object Access Activity"], "asset_type": "AWS EKS Kubernetes cluster", "kill_chain_phases": ["Lateral Movement"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "userAgent", "sourceIPs{}", "src_user", "src_ip", "verb", "requestURI"], "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "kubernetes_aws_detect_suspicious_kubectl_calls_filter"}]}, {"name": "aws detect sts get session token abuse", "id": "85d7b35f-b8b5-4b01-916f-29b81e7a0551", "version": 1, "date": "2020-07-27", "author": "Rod Soto, Splunk", "type": "Hunting", "datamodel": [], "description": "This search provides detection of suspicious use of sts:GetSessionToken. These tokens can be created on the go and used by attackers to move laterally and escalate privileges.", "search": "`aws_cloudwatchlogs_eks` ASIA  userIdentity.type=IAMUser| spath eventName | search eventName=GetSessionToken | table sourceIPAddress eventTime userIdentity.arn userName userAgent user_type status region | `aws_detect_sts_get_session_token_abuse_filter`", "how_to_implement": "You must install splunk AWS add-on and Splunk App for AWS. This search works with cloudwatch logs", "known_false_positives": "Sts:GetSessionToken can be very noisy as in certain environments numerous calls of this type can be executed. This search can be adjusted to provide specific values to identify cases of abuse. In specific environments the use of field requestParameters.serialNumber will need to be used.", "references": [], "tags": {"analytic_story": ["AWS Cross Account Activity"], "asset_type": "AWS Account", "kill_chain_phases": ["Lateral Movement"], "mitre_attack_id": ["T1550"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "userIdentity.type", "eventName", "sourceIPAddress", "eventTime", "userIdentity.arn", "userName", "userAgent", "user_type", "status", "region"], "security_domain": "threat", "mitre_attack_technique": ["Use Alternate Authentication Material"], "mitre_attack_tactics": ["Defense Evasion", "Lateral Movement"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=\"aws:cloudwatchlogs:eks\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_cloudwatchlogs_eks"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_sts_get_session_token_abuse_filter"}]}, {"name": "Abnormally High Number Of Cloud Instances Launched", "id": "f2361e9f-3928-496c-a556-120cd4223a65", "version": 2, "date": "2020-08-21", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search finds for the number successfully created cloud instances for every 4 hour block. This is split up between weekdays and the weekend. It then applies the probability densitiy model previously created and alerts on any outliers.", "search": "| tstats count as instances_launched values(All_Changes.object_id) as object_id from datamodel=Change where (All_Changes.action=created) AND All_Changes.status=success AND All_Changes.object_category=instance by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join HourOfDay isWeekend [summary cloud_excessive_instances_created_v1] | where cardinality >=16 | apply cloud_excessive_instances_created_v1 threshold=0.005 | rename \"IsOutlier(instances_launched)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | eval distance_from_threshold = instances_launched - expected_upper_threshold | table _time, user, instances_launched, expected_upper_threshold, distance_from_threshold, object_id | `abnormally_high_number_of_cloud_instances_launched_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Instances Launched` to create the probability density function.", "known_false_positives": "Many service accounts configured within an AWS infrastructure are known to exhibit this behavior. Please adjust the threshold values and filter out service accounts from the output. Always verify if this search alerted on a human user.", "references": [], "tags": {"analytic_story": ["Cloud Cryptomining", "Suspicious Cloud Instance Activities"], "asset_type": "Cloud Instance", "cis20": ["CIS 13"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.DP", "DE.AE"], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.status", "All_Changes.object_category", "All_Changes.user"], "risk_object": "user", "risk_object_type": "user", "risk_score": 40, "security_domain": "Cloud", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "abnormally_high_number_of_cloud_instances_launched_filter"}]}, {"name": "New container uploaded to AWS ECR", "id": "f0f70b40-f7ad-489d-9905-23d149da8099", "version": 1, "date": "2020-02-20", "author": "Rod Soto, Rico Valdez, Splunk", "type": "Hunting", "datamodel": [], "description": "This searches show information on uploaded containers including source user, image id, source IP user type, http user agent, region, first time, last time of operation (PutImage). These searches are based on Cloud Infrastructure Data Model.", "search": "| tstats count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Cloud_Infrastructure.Compute where Compute.user_type!=\"AssumeRole\" AND Compute.http_user_agent=\"AWS Internal\" AND Compute.event_name=\"PutImage\" by Compute.image_id Compute.src_user Compute.src Compute.region Compute.msg Compute.user_type | `drop_dm_object_name(\"Compute\")` | `new_container_uploaded_to_aws_ecr_filter` ", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your AWS CloudTrail inputs. You must also install Cloud Infrastructure data model. Please also customize the `container_implant_aws_detection_filter` macro to filter out the false positives.", "known_false_positives": "Uploading container is a normal behavior from developers or users with access to container registry.", "references": [], "tags": {"analytic_story": ["Container Implantation Monitoring and Investigation"], "asset_type": "AWS ECR container", "mitre_attack_id": ["T1525"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time"], "security_domain": "threat", "mitre_attack_technique": ["Implant Container Image"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "new_container_uploaded_to_aws_ecr_filter"}]}, {"name": "Email files written outside of the Outlook directory", "id": "ee18ed37-0802-4268-9435-b3b91aaa18xx", "version": 3, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "The search looks at the change-analysis data model and detects email files created outside the normal Outlook directory.", "search": "| tstats `security_content_summariesonly` count values(Filesystem.file_path) as file_path min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where (Filesystem.file_name=*.pst OR Filesystem.file_name=*.ost) Filesystem.file_path != \"C:\\\\Users\\\\*\\\\My Documents\\\\Outlook Files\\\\*\"  Filesystem.file_path!=\"C:\\\\Users\\\\*\\\\AppData\\\\Local\\\\Microsoft\\\\Outlook*\" by Filesystem.action Filesystem.process_id Filesystem.file_name Filesystem.dest | `drop_dm_object_name(\"Filesystem\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `email_files_written_outside_of_the_outlook_directory_filter` ", "how_to_implement": "To successfully implement this search, you must be ingesting data that records the file-system activity from your hosts to populate the Endpoint.Filesystem data model node. This is typically populated via endpoint detection-and-response product, such as Carbon Black, or by other endpoint data sources, such as Sysmon. The data used for this search is typically generated via logs that report file-system reads and writes.", "known_false_positives": "Administrators and users sometimes prefer backing up their email data by moving the email files into a different folder. These attempts will be detected by the search.", "references": [], "tags": {"analytic_story": ["Collection and Staging"], "asset_type": "Endpoint", "cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1114", "T1114.001"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Filesystem.file_path", "Filesystem.file_name", "Filesystem.action", "Filesystem.process_id", "Filesystem.dest"], "security_domain": "endpoint", "mitre_attack_technique": ["Email Collection", "Local Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["no", "Magic Hound", "APT1"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "email_files_written_outside_of_the_outlook_directory_filter"}]}, {"name": "Suspicious Email Attachment Extensions", "id": "473bd65f-06ca-4dfe-a2b8-ba04ab4a0084", "version": 3, "date": "2020-07-22", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Email"], "description": "This search looks for emails that have attachments with suspicious file extensions.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Email where All_Email.file_name=\"*\" by All_Email.src_user, All_Email.file_name All_Email.message_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Email\")` | `suspicious_email_attachments` | `suspicious_email_attachment_extensions_filter` ", "how_to_implement": "You need to ingest data from emails. Specifically, the sender's address and the file names of any attachments must be mapped to the Email data model. \\\n **Splunk Phantom Playbook Integration**\\\nIf Splunk Phantom is also configured in your environment, a Playbook called \"Suspicious Email Attachment Investigate and Delete\" can be configured to run when any results are found by this detection search. To use this integration, install the Phantom App for Splunk `https://splunkbase.splunk.com/app/3411/`, and add the correct hostname to the \"Phantom Instance\" field in the Adaptive Response Actions when configuring this detection search. The notable event will be sent to Phantom and the playbook will gather further information about the file attachment and its network behaviors. If Phantom finds malicious behavior and an analyst approves of the results, the email will be deleted from the user's inbox.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Suspicious Emails"], "asset_type": "Endpoint", "cis20": ["CIS 3", "CIS 7", "CIS 12"], "kill_chain_phases": ["Delivery"], "mitre_attack_id": ["T1566.001", "T1566"], "nist": ["DE.AE", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Email.file_name", "All_Email.src_user", "All_Email.message_id"], "security_domain": "network", "mitre_attack_technique": ["Spearphishing Attachment", "Phishing"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass", "no"]}, "macros": [{"definition": "lookup update=true is_suspicious_file_extension_lookup file_name OUTPUT suspicious | search suspicious=true", "description": "This macro limits the output to email attachments that have suspicious extensions", "name": "suspicious_email_attachments", "lookups": [{"description": "A list of suspicious extensions for email attachments", "filename": "is_suspicious_file_extension_lookup.csv", "match_type": "WILDCARD(file_name)", "name": "is_suspicious_file_extension_lookup", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/is_suspicious_file_extension_lookup.csv"}]}, {"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_email_attachment_extensions_filter"}]}, {"name": "Monitor Email For Brand Abuse", "id": "b2ea1f38-3a3e-4b8a-9cf1-82760d86a6b8", "version": 2, "date": "2018-01-05", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Email"], "description": "This search looks for emails claiming to be sent from a domain similar to one that you want to have monitored for abuse.", "search": "| tstats `security_content_summariesonly` values(All_Email.recipient) as recipients, min(_time) as firstTime, max(_time) as lastTime from datamodel=Email by All_Email.src_user, All_Email.message_id | `drop_dm_object_name(\"All_Email\")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | eval temp=split(src_user, \"@\") | eval email_domain=mvindex(temp, 1) | lookup update=true brandMonitoring_lookup domain as email_domain OUTPUT domain_abuse | search domain_abuse=true | table message_id, src_user, email_domain, recipients, firstTime, lastTime | `monitor_email_for_brand_abuse_filter`", "how_to_implement": "You need to ingest email header data. Specifically the sender's address (src_user) must be populated.  You also need to have run the search \"ESCU - DNSTwist Domain Names\", which creates the permutations of the domain that will be checked for.", "known_false_positives": "None at this time", "references": [], "tags": {"analytic_story": ["Brand Monitoring", "Suspicious Emails"], "asset_type": "Endpoint", "cis20": ["CIS 7"], "kill_chain_phases": ["Delivery"], "nist": ["PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Email.recipient", "All_Email.src_user", "All_Email.message_id"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "monitor_email_for_brand_abuse_filter"}], "lookups": [{"default_match": "false", "description": "A file that contains look-a-like domains for brands that you want to monitor", "filename": "brand_monitoring.csv", "match_type": "WILDCARD(domain)", "min_matches": 1, "name": "brandMonitoring_lookup", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/brand_monitoring.csv"}]}, {"name": "No Windows Updates in a time frame", "id": "1a77c08c-2f56-409c-a2d3-7d64617edd4f", "version": 1, "date": "2017-09-15", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Updates"], "description": "This search looks for Windows endpoints that have not generated an event indicating a successful Windows update in the last 60 days. Windows updates are typically released monthly and applied shortly thereafter. An endpoint that has not successfully applied an update in this time frame indicates the endpoint is not regularly being patched for some reason.", "search": "| tstats `security_content_summariesonly` max(_time) as lastTime from datamodel=Updates where Updates.status=Installed Updates.vendor_product=\"Microsoft Windows\" by Updates.dest Updates.status Updates.vendor_product | rename Updates.dest as Host | rename Updates.status as \"Update Status\" | rename Updates.vendor_product as Product | eval isOutlier=if(lastTime <= relative_time(now(), \"-60d@d\"), 1, 0)  | `security_content_ctime(lastTime)`  | search isOutlier=1 | rename lastTime as \"Last Update Time\", | table Host, \"Update Status\", Product, \"Last Update Time\" | `no_windows_updates_in_a_time_frame_filter`", "how_to_implement": "To successfully implement this search, it requires that the 'Update' data model is being populated. This can be accomplished by ingesting Windows events or the Windows Update log via a universal forwarder on the Windows endpoints you wish to monitor. The Windows add-on should be also be installed and configured to properly parse Windows events in Splunk. There may be other data sources which can populate this data model, including vulnerability management systems.", "known_false_positives": "None identified", "references": [], "tags": {"analytic_story": ["Monitor for Updates"], "asset_type": "Endpoint", "cis20": ["CIS 18"], "nist": ["PR.PT", "PR.MA"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Updates.status", "Updates.vendor_product", "Updates.dest"], "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "no_windows_updates_in_a_time_frame_filter"}]}, {"name": "Okta Failed SSO Attempts", "id": "371a6545-2618-4032-ad84-93386b8698c5", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": [], "description": "Detect failed Okta SSO events", "search": "`okta` displayMessage=\"User attempted unauthorized access to app\" | stats  min(_time) as firstTime max(_time) as lastTime values(app) as Apps count by user, result ,displayMessage, src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `okta_failed_sso_attempts_filter` ", "how_to_implement": "This search is specific to Okta and requires Okta logs are being ingested in your Splunk deployment.", "known_false_positives": "There may be a faulty config preventing legitmate users from accessing apps they should have access to.", "references": [], "tags": {"analytic_story": ["Suspicious Okta Activity"], "asset_type": "Infrastructure", "cis20": ["CIS 16"], "mitre_attack_id": ["T1078", "T1078.001"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "displayMessage", "app", "user", "result", "src_ip"], "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Default Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=okta_log", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "okta"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "okta_failed_sso_attempts_filter"}]}, {"name": "Email Attachments With Lots Of Spaces", "id": "56e877a6-1455-4479-ada6-0550dc1e22f8", "version": 2, "date": "2017-09-19", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Email"], "description": "Attackers often use spaces as a means to obfuscate an attachment's file extension. This search looks for messages with email attachments that have many spaces within the file names.", "search": "| tstats `security_content_summariesonly` count values(All_Email.recipient) as recipient_address min(_time) as firstTime max(_time) as lastTime from datamodel=Email where All_Email.file_name=\"*\" by All_Email.src_user, All_Email.file_name All_Email.message_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(\"All_Email\")` | eval space_ratio = (mvcount(split(file_name,\" \"))-1)/len(file_name) | search space_ratio >= 0.1 |  rex field=recipient_address \"(?<recipient_user>.*)@\" | `email_attachments_with_lots_of_spaces_filter`", "how_to_implement": "You need to ingest data from emails. Specifically, the sender's address and the file names of any attachments must be mapped to the Email data model. The threshold ratio is set to 10%, but this value can be configured to suit each environment. \\\n **Splunk Phantom Playbook Integration**\\\nIf Splunk Phantom is also configured in your environment, a playbook called \"Suspicious Email Attachment Investigate and Delete\" can be configured to run when any results are found by this detection search. To use this integration, install the Phantom App for Splunk `https://splunkbase.splunk.com/app/3411/` and add the correct hostname to the \"Phantom Instance\" field in the Adaptive Response Actions when configuring this detection search. The notable event will be sent to Phantom and the playbook will gather further information about the file attachment and its network behaviors. If Phantom finds malicious behavior and an analyst approves of the results, the email will be deleted from the user's inbox.", "known_false_positives": "None at this time", "references": [], "tags": {"analytic_story": ["Emotet Malware  DHS Report TA18-201A ", "Suspicious Emails"], "asset_type": "Endpoint", "cis20": ["CIS 7"], "kill_chain_phases": ["Delivery"], "nist": ["PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Email.recipient", "All_Email.file_name", "All_Email.src_user", "All_Email.file_name", "All_Email.message_id"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "email_attachments_with_lots_of_spaces_filter"}]}, {"name": "Multiple Okta Users With Invalid Credentials From The Same IP", "id": "19cba45f-cad3-4032-8911-0c09e0444552", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects Okta login failures due to bad credentials for multiple users originating from the same ip address.", "search": "`okta` outcome.reason=INVALID_CREDENTIALS | rename client.geographicalContext.country as country, client.geographicalContext.state as state, client.geographicalContext.city as city | stats min(_time) as firstTime max(_time) as lastTime dc(user) as distinct_users values(user) as users by src_ip, displayMessage, outcome.reason, country, state, city  | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` |  search distinct_users > 5| `multiple_okta_users_with_invalid_credentials_from_the_same_ip_filter` ", "how_to_implement": "This search is specific to Okta and requires Okta logs are being ingested in your Splunk deployment.", "known_false_positives": "A single public IP address servicing multiple legitmate users may trigger this search. In addition, the threshold of 5 distinct users may be too low for your needs. You may modify the included filter macro `multiple_okta_users_with_invalid_credentials_from_the_same_ip_filter` to raise the threshold or except specific IP adresses from triggering this search.", "references": [], "tags": {"analytic_story": ["Suspicious Okta Activity"], "asset_type": "Infrastructure", "cis20": ["CIS 16"], "mitre_attack_id": ["T1078", "T1078.001"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "outcome.reason", "client.geographicalContext.country", "client.geographicalContext.state", "client.geographicalContext.city", "user", "src_ip", "displayMessage"], "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Default Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=okta_log", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "okta"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "multiple_okta_users_with_invalid_credentials_from_the_same_ip_filter"}]}, {"name": "Web Servers Executing Suspicious Processes", "id": "ec3b7601-689a-4463-94e0-c9f45638efb9", "version": 1, "date": "2019-04-01", "author": "David Dorsey, Splunk", "type": "TTP", "datamodel": ["Endpoint"], "description": "This search looks for suspicious processes on all systems labeled as web servers.", "search": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.dest_category=\"web_server\" AND (Processes.process=\"*whoami*\" OR Processes.process=\"*ping*\" OR Processes.process=\"*iptables*\" OR Processes.process=\"*wget*\" OR Processes.process=\"*service*\" OR Processes.process=\"*curl*\") by Processes.process Processes.process_name, Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `web_servers_executing_suspicious_processes_filter`", "how_to_implement": "You must be ingesting data that records process activity from your hosts to populate the Endpoint data model in the Processes node. You must also be ingesting logs with both the process name and command line from your endpoints. The command-line arguments are mapped to the \"process\" field in the Endpoint data model. In addition, web servers will need to be identified in the Assets and Identity Framework of Enterprise Security.", "known_false_positives": "Some of these processes may be used legitimately on web servers during maintenance or other administrative tasks.", "references": [], "tags": {"analytic_story": ["Apache Struts Vulnerability"], "asset_type": "Web Server", "cis20": ["CIS 3"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1082"], "nist": ["PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Processes.dest_category", "Processes.process", "Processes.process_name", "Processes.dest", "Processes.user"], "security_domain": "endpoint", "mitre_attack_technique": ["System Information Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["Rocke", "Sandworm Team", "Blue Mockingbird", "Tropic Trooper", "Frankenstein", "Inception", "Kimsuky", "Darkhotel", "MuddyWater", "APT18", "Honeybee", "APT19", "APT37", "APT32", "Magic Hound", "OilRig", "APT3", "Sowbug", "Gamaredon Group", "Patchwork", "Stealth Falcon", "Lazarus Group", "admin@338", "Turla", "Ke3chang"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "web_servers_executing_suspicious_processes_filter"}]}, {"name": "Phishing Email Detection by Machine Learning Method - SSA", "id": "4b237388-dfa1-41a6-91d4-4de2d598376f", "version": 1, "date": "2020-08-25", "author": "Xiao Lin, Splunk", "type": "Anomaly", "datamodel": [], "description": "Malicious mails can conduct phishing that induces readers to open attachment, click links or trigger third party service. This detect uses Natural Language Processing (NLP) approach to analyze an email message's content (Sender, Subject and Body) and judge whether it is a phishing email. The detection adopts a deep learning (neural network) model that employs character level embeddings plus LSTM layers to perform classification. The model is pre-trained and then published as ONNX format. Current sample model is trained using the dataset published at https://github.com/splunk/attack_data/tree/master/datasets/T1566_Phishing_Email/splunk_train.json User are expected to re-train the model by combining with their own training data for better accuracy using the provided model file (SMLE notebook). DSP pipeline then processes the email message and passes it as an event to Apply ML Models function, which returns the probability of a phishing email. Current implementation assumes the email is fed to DSP in JSON format contains at least email's sender, subject and its message body, including reply content, if any.", "search": "| from read_ssa_enriched_events() | eval eventLine=concat(ucast(map_get(input_event, \"From\"), \"string\", \" \"), \" \", ucast(map_get(input_event, \"Subject\"), \"string\", \" \"), \" \", ucast(map_get(input_event, \"Content\"), \"string\", \" \"), \"                                                                                                                                \"), _time=map_get(input_event, \"_time\") | where eventLine IS NOT NULL | eval mapC={\" \": 32, \"!\": 33, \"\\\"\": 34, \"#\": 35, \"$\": 36, \"%\": 37, \"&\": 38, \"``\": 96, \"a\": 97, \"b\": 98, \"c\": 99, \"d\": 100, \"e\": 101, \"f\": 102, \"g\": 103, \"h\": 104, \"i\": 105, \"j\": 106, \"k\": 107, \"l\": 108, \"m\": 109, \"n\": 110, \"o\": 111, \"p\": 112, \"q\": 113, \"r\": 114, \"s\": 115, \"t\": 116, \"u\": 117, \"v\": 118, \"w\": 119, \"x\": 120, \"y\": 121, \"z\": 122, \"{\": 123, \"|\": 124, \"}\": 125, \"~\": 126}, ml_in = for_each(iterator(mvrange(1,129), \"i\"), cast(map_get(mapC, substr(eventLine, i, 1)), \"float\") ) | apply_model connection_id=\"YOUR_S3_ONNX_CONNECTOR_ID\" name=\"phishing_email_v8\" path=\"s3://smle-experiments/models/phishing_email\" | eval probability = mvindex(ml_out, 0) | where probability > 0.5 | eval start_time=_time, end_time=_time, entities=\"TBD\", body=\"TBD\" | select probability, body, entities, start_time, end_time | into write_ssa_detected_events();", "how_to_implement": "Events are fed to DSP contains at least email's sender, subject and its message body.", "known_false_positives": "Because of imbalance of anomaly data in training, the model will less likely report false positive. Instead, the model is more prone to false negative. Current best recall score is ~85%", "references": [], "tags": {"cis20": ["CIS 8"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1566"], "nist": ["PR.PT", "DE.CM"], "product": ["Splunk Behavioral Analytics"], "risk_severity": "low", "security_domain": "mail server", "mitre_attack_technique": ["Phishing"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "phishing_email_detection_by_machine_learning_method___ssa_filter"}]}, {"name": "Suspicious Java Classes", "id": "if1fea6da-3c86-4c1d-b255-fc3b2781a491", "version": 1, "date": "2018-12-06", "author": "Jose Hernandez, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for suspicious Java classes that are often used to exploit remote command execution in common Java frameworks, such as Apache Struts.", "search": "`stream_http` http_method=POST http_content_length>1 | regex form_data=\"(?i)java\\.lang\\.(?:runtime|processbuilder)\" | rename src_ip as src | stats count earliest(_time) as firstTime, latest(_time) as lastTime, values(url) as uri, values(status) as status, values(http_user_agent) as http_user_agent by src, dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_java_classes_filter`", "how_to_implement": "In order to properly run this search, Splunk needs to ingest data from your web-traffic appliances that serve or sit in the path of your Struts application servers. This can be accomplished by indexing data from a web proxy, or by using network traffic-analysis tools, such as Splunk Stream or Bro.", "known_false_positives": "There are no known false positives.", "references": [], "tags": {"analytic_story": ["Apache Struts Vulnerability"], "asset_type": "Endpoint", "cis20": ["CIS 7", "CIS 12"], "kill_chain_phases": ["Exploitation"], "nist": ["DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "http_method", "http_content_length", "src_ip", "url", "status", "http_user_agent", "src", "dest"], "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=stream:http", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "stream_http"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "suspicious_java_classes_filter"}]}, {"name": "Okta User Logins From Multiple Cities", "id": "7594fa07-9f34-4d01-81cc-d6af6a5db9e8", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects logins from the same user from different cities in a 24 hour period.", "search": "`okta` displayMessage=\"User login to Okta\" client.geographicalContext.city!=null | stats min(_time) as firstTime max(_time) as lastTime dc(client.geographicalContext.city) as locations values(client.geographicalContext.city) as cities values(client.geographicalContext.state) as states by user | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `okta_user_logins_from_multiple_cities_filter` | search locations > 1", "how_to_implement": "This search is specific to Okta and requires Okta logs are being ingested in your Splunk deployment.", "known_false_positives": "Users in your enviornment may legitmately be travelling and loggin in from different locations. This search is useful for those users that should *not* be travelling for some reason, such as the COVID-19 pandemic. The search also relies on the geographical information being populated in the Okta logs. It is also possible that a connection from another region may be attributed to a login from a remote VPN endpoint.", "references": [], "tags": {"analytic_story": ["Suspicious Okta Activity"], "asset_type": "Infrastructure", "cis20": ["CIS 16"], "mitre_attack_id": ["T1078", "T1078.001"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "displayMessage", "client.geographicalContext.city", "client.geographicalContext.state", "user"], "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Default Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "eventtype=okta_log", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "okta"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "okta_user_logins_from_multiple_cities_filter"}]}, {"name": "Email servers sending high volume traffic to hosts", "id": "7f5fb3e1-4209-4914-90db-0ec21b556378", "version": 2, "date": "2020-07-21", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Network_Traffic"], "description": "This search looks for an increase of data transfers from your email server to your clients. This could be indicative of a malicious actor collecting data using your email server.", "search": "| tstats `security_content_summariesonly` sum(All_Traffic.bytes_out) as bytes_out from datamodel=Network_Traffic where All_Traffic.src_category=email_server by All_Traffic.dest_ip _time span=1d | `drop_dm_object_name(\"All_Traffic\")` | eventstats avg(bytes_out) as avg_bytes_out stdev(bytes_out) as stdev_bytes_out | eventstats count as num_data_samples avg(eval(if(_time < relative_time(now(), \"@d\"), bytes_out, null))) as per_source_avg_bytes_out stdev(eval(if(_time < relative_time(now(), \"@d\"), bytes_out, null))) as per_source_stdev_bytes_out by dest_ip | eval minimum_data_samples = 4, deviation_threshold = 3 | where num_data_samples >= minimum_data_samples AND bytes_out > (avg_bytes_out + (deviation_threshold * stdev_bytes_out)) AND bytes_out > (per_source_avg_bytes_out + (deviation_threshold * per_source_stdev_bytes_out)) AND _time >= relative_time(now(), \"@d\") | eval num_standard_deviations_away_from_server_average = round(abs(bytes_out - avg_bytes_out) / stdev_bytes_out, 2), num_standard_deviations_away_from_client_average = round(abs(bytes_out - per_source_avg_bytes_out) / per_source_stdev_bytes_out, 2) | table dest_ip, _time, bytes_out, avg_bytes_out, per_source_avg_bytes_out, num_standard_deviations_away_from_server_average, num_standard_deviations_away_from_client_average | `email_servers_sending_high_volume_traffic_to_hosts_filter`", "how_to_implement": "This search requires you to be ingesting your network traffic and populating the Network_Traffic data model.  Your email servers must be categorized as \"email_server\" for the search to work, as well. You may need to adjust the deviation_threshold and minimum_data_samples values based on the network traffic in your environment. The \"deviation_threshold\" field is a multiplying factor to control how much variation you're willing to tolerate. The \"minimum_data_samples\" field is the minimum number of connections of data samples required for the statistic to be valid.", "known_false_positives": "The false-positive rate will vary based on how you set the deviation_threshold and data_samples values. Our recommendation is to adjust these values based on your network traffic to and from your email servers.", "references": [], "tags": {"analytic_story": ["Collection and Staging", "HAFNIUM Group"], "asset_type": "Endpoint", "cis20": ["CIS 7"], "kill_chain_phases": ["Actions on Objectives"], "mitre_attack_id": ["T1114", "T1114.002"], "nist": ["PR.PT", "DE.CM", "DE.AE"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Traffic.bytes_out", "All_Traffic.src_category", "All_Traffic.dest_ip"], "security_domain": "network", "mitre_attack_technique": ["Email Collection", "Remote Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["no", "APT1", "FIN4", "APT28", "Dragonfly 2.0", "Ke3chang", "Leafminer"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "email_servers_sending_high_volume_traffic_to_hosts_filter"}]}, {"name": "Okta Account Lockout Events", "id": "62b70968-a0a5-4724-8ac4-67871e6f544d", "version": 2, "date": "2020-07-21", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": [], "description": "Detect Okta user lockout events", "search": "`okta` displayMessage=\"Max sign in attempts exceeded\" | rename client.geographicalContext.country as country, client.geographicalContext.state as state, client.geographicalContext.city as city | table _time, user, country, state, city, src_ip | `okta_account_lockout_events_filter` ", "how_to_implement": "This search is specific to Okta and requires Okta logs are being ingested in your Splunk deployment.", "known_false_positives": "None. Account lockouts should be followed up on to determine if the actual user was the one who caused the lockout, or if it was an unauthorized actor.", "references": [], "tags": {"analytic_story": ["Suspicious Okta Activity"], "asset_type": "Infrastructure", "cis20": ["CIS 16"], "mitre_attack_id": ["T1078", "T1078.001"], "nist": ["DE.CM"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "displayMessage", "client.geographicalContext.country", "client.geographicalContext.state", "client.geographicalContext.city"], "security_domain": "access", "mitre_attack_technique": ["Valid Accounts", "Default Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak", "no"]}, "macros": [{"definition": "eventtype=okta_log", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "okta"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "okta_account_lockout_events_filter"}]}, {"name": "Detect New Login Attempts to Routers", "id": "104658f4-afdc-499e-9719-17243rr826f1", "version": 1, "date": "2017-09-12", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": ["Authentication"], "description": "The search queries the authentication logs for assets that are categorized as routers in the ES Assets and Identity Framework, to identify connections that have not been seen before in the last 30 days.", "search": "| tstats `security_content_summariesonly` count earliest(_time) as earliest latest(_time) as latest from datamodel=Authentication where Authentication.dest_category=router by Authentication.dest Authentication.user| eval isOutlier=if(earliest >= relative_time(now(), \"-30d@d\"), 1, 0) | where isOutlier=1| `security_content_ctime(earliest)`| `security_content_ctime(latest)` | `drop_dm_object_name(\"Authentication\")` | `detect_new_login_attempts_to_routers_filter`", "how_to_implement": "To successfully implement this search, you must ensure the network router devices are categorized as \"router\" in the Assets and identity table. You must also populate the Authentication data model with logs related to users authenticating to routing infrastructure.", "known_false_positives": "Legitimate router connections may appear as new connections", "references": [], "tags": {"analytic_story": ["Router and Infrastructure Security"], "asset_type": "Endpoint", "cis20": ["CIS 11"], "kill_chain_phases": ["Actions on Objectives"], "nist": ["PR.PT", "PR.AC", "PR.IP"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.dest_category", "Authentication.dest", "Authentication.user"], "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_new_login_attempts_to_routers_filter"}]}, {"name": "AWS SAML Access by Provider User and Principal", "id": "bbe23980-6019-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search provides specific SAML access from specific Service Provider, user and targeted principal at AWS. This search provides specific information to detect abnormal access or potential credential hijack or forgery, specially in federated environments using SAML protocol inside the perimeter or cloud provider.", "search": "`cloudtrail` eventName=Assumerolewithsaml | stats count min(_time) as firstTime max(_time) as lastTime by requestParameters.principalArn requestParameters.roleArn requestParameters.roleSessionName recipientAccountId responseElements.issuer sourceIPAddress userAgent | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_saml_access_by_provider_user_and_principal_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs", "known_false_positives": "Attacks using a Golden SAML or SAML assertion hijacks or forgeries are very difficult to detect as accessing cloud providers with these assertions looks exactly like normal access, however things such as source IP sourceIPAddress user, and principal targeted at receiving cloud provider along with endpoint credential access and abuse detection searches can provide the necessary context to detect these attacks.", "references": ["https://us-cert.cisa.gov/ncas/alerts/aa21-008a", "https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html", "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/wp-m-unc2452-2021-000343-01.pdf", "https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps"], "tags": {"analytic_story": ["Cloud Federated Credential Abuse"], "asset_type": "AWS Federated Account", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Stage:Credential Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/assume_role_with_saml/assume_role_with_saml.json"], "impact": 80, "message": "From IP address $sourceIPAddress$, user agent $userAgent$ has trigged an event $eventName$ for account ID $recipientAccountId$", "mitre_attack_id": ["T1078"], "observable": [{"name": "sourceIPAddress", "type": "IP Address", "role": ["Attacker"]}, {"name": "recipientAccountId", "type": "Other", "role": ["Victim", "Target"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "requestParameters.principalArn", "requestParameters.roleArn", "requestParameters.roleSessionName", "recipientAccountId", "responseElements.issuer", "sourceIPAddress", "userAgent"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_saml_access_by_provider_user_and_principal_filter"}]}, {"name": "Detect New Open S3 buckets", "id": "2a9b80d3-6340-4345-b5ad-290bf3d0dac4", "version": 3, "date": "2021-07-19", "author": "Bhavin Patel, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user has created an open/public S3 bucket.", "search": "`cloudtrail` eventSource=s3.amazonaws.com eventName=PutBucketAcl | rex field=_raw \"(?<json_field>{.+})\" | spath input=json_field output=grantees path=requestParameters.AccessControlPolicy.AccessControlList.Grant{} | search grantees=* | mvexpand grantees | spath input=grantees output=uri path=Grantee.URI | spath input=grantees output=permission path=Permission | search uri IN (\"http://acs.amazonaws.com/groups/global/AllUsers\",\"http://acs.amazonaws.com/groups/global/AuthenticatedUsers\") | search permission IN (\"READ\",\"READ_ACP\",\"WRITE\",\"WRITE_ACP\",\"FULL_CONTROL\") | rename requestParameters.bucketName AS bucketName | stats count min(_time) as firstTime max(_time) as lastTime by user_arn userIdentity.principalId userAgent uri permission bucketName | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_open_s3_buckets_filter` ", "how_to_implement": "You must install the AWS App for Splunk.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created a public bucket for a specific purpose. That said, AWS strongly advises against granting full control to the \"All Users\" group.", "references": [], "tags": {"analytic_story": ["Suspicious AWS S3 Activities"], "asset_type": "S3 Bucket", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1530/aws_s3_public_bucket/aws_cloudtrail_events.json"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ has created an open/public bucket $bucketName$ with the following permissions $permission$", "mitre_attack_id": ["T1530"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user_arn", "type": "User", "role": ["Attacker"]}, {"name": "bucketName", "type": "Other", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventSource", "eventName", "requestParameters.bucketName", "user_arn", "userIdentity.principalId", "userAgent", "uri", "permission"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_new_open_s3_buckets_filter"}]}, {"name": "O365 Add App Role Assignment Grant User", "id": "b2c81cc6-6040-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the creation of a new Federation setting by alerting about an specific event related to its creation.", "search": "`o365_management_activity` Workload=AzureActiveDirectory Operation=\"Add app role assignment grant to user.\" | stats count min(_time) as firstTime max(_time) as lastTime values(Actor{}.ID) as Actor.ID values(Actor{}.Type) as Actor.Type by ActorIpAddress dest ResultStatus | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_add_app_role_assignment_grant_user_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "The creation of a new Federation is not necessarily malicious, however this events need to be followed closely, as it may indicate federated credential abuse or backdoor via federated identities at a different cloud provider.", "references": ["https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/wp-m-unc2452-2021-000343-01.pdf", "https://us-cert.cisa.gov/ncas/alerts/aa21-008a"], "tags": {"analytic_story": ["Office 365 Detections", "Cloud Federated Credential Abuse"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.003/o365_new_federation/o365_new_federation.json"], "impact": 30, "kill_chain_phases": ["Actions on Objective"], "message": "User $Actor.ID$ has created a new federation setting on $dest$ from IP Address $ActorIpAddress$", "mitre_attack_id": ["T1136.003", "T1136"], "observable": [{"name": "ActorIpAddress", "type": "IP Address", "role": ["Attacker"]}, {"name": "Actor.ID", "type": "User", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Workload", "Operation", "Actor{}.ID", "Actor{}.Type", "ActorIpAddress", "dest", "ResultStatus"], "risk_score": 18, "security_domain": "threat", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_add_app_role_assignment_grant_user_filter"}]}, {"name": "AWS CreateAccessKey", "id": "2a9b80d3-6340-4345-11ad-212bf3d0d111", "version": 2, "date": "2021-07-19", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user A who has already permission to create access keys, makes an API call to create access keys for another user B. Attackers have been know to use this technique for Privilege Escalation in case new victim(user B) has more permissions than old victim(user B)", "search": "`cloudtrail` eventName = CreateAccessKey userAgent !=console.amazonaws.com errorCode = success| search userIdentity.userName!=requestParameters.userName  |  stats count min(_time) as firstTime max(_time) as lastTime  by requestParameters.userName src eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_createaccesskey_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created keys for another user.", "references": ["https://labs.bishopfox.com/tech-blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/aws_createaccesskey/aws_cloudtrail_events.json"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ is attempting to create access keys for $requestParameters.userName$ from this IP $src$", "mitre_attack_id": ["T1136.003", "T1136"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.userName"], "risk_score": 63, "security_domain": "network", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_createaccesskey_filter"}]}, {"name": "AWS Network Access Control List Deleted", "id": "ada0f478-84a8-4641-a3f1-d82362d6fd75", "version": 2, "date": "2021-01-12", "author": "Bhavin Patel, Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "Enforcing network-access controls is one of the defensive mechanisms used by cloud administrators to restrict access to a cloud instance. After the attacker has gained control of the AWS console by compromising an admin account, they can delete a network ACL and gain access to the instance from anywhere. This search will query the AWS CloudTrail logs to detect users deleting network ACLs.", "search": "`cloudtrail` eventName=DeleteNetworkAclEntry requestParameters.egress=false | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userName userIdentity.principalId eventName requestParameters.egress src userAgent | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_network_access_control_list_deleted_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your AWS CloudTrail inputs.", "known_false_positives": "It's possible that a user has legitimately deleted a network ACL.", "references": [], "tags": {"analytic_story": ["AWS Network ACL Activity"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 11"], "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.007/aws_delete_acl/aws_cloudtrail_events.json"], "impact": 10, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ from $src$ has sucessfully deleted network ACLs entry (eventName= $eventName$), such that the instance is accessible from anywhere", "mitre_attack_id": ["T1562.007", "T1562"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "requestParameters.egress", "userName", "userIdentity.principalId", "src", "userAgent"], "risk_score": 5, "security_domain": "network", "mitre_attack_technique": ["Disable or Modify Cloud Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_network_access_control_list_deleted_filter"}]}, {"name": "AWS ECR Container Scanning Findings Medium", "id": "0b80e2c8-c746-4ddb-89eb-9efd892220cf", "version": 1, "date": "2021-08-17", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.", "search": "`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity=MEDIUM | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as image | eval finding = finding_name.\", \".finding_description | eval phase=\"release\" | eval severity=\"medium\" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, image, user, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_medium_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "unknown", "references": ["https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 70, "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "Vulnerabilities with severity high found in image $image$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "image", "type": "System", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["eventSource", "eventName", "responseElements.imageScanFindings.findings{}", "awsRegion", "requestParameters.imageId.imageDigest", "requestParameters.repositoryName", "user", "userName", "src_ip"], "risk_score": 21, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_ecr_container_scanning_findings_medium_filter"}]}, {"name": "Correlation by User and Risk", "id": "610e12dc-b6fa-4541-825e-4a0b3b6f6773", "version": 1, "date": "2021-09-06", "author": "Patrick Bareiss, Splunk", "type": "Correlation", "datamodel": [], "description": "This search correlations detections by user and risk_score", "search": "`signals` | fillnull | stats sum(risk_score) as risk_score values(source) as signals values(repository) as repository by user | sort - risk_score | where risk_score > 80 | `correlation_by_user_and_risk_filter`", "how_to_implement": "For Dev Sec Ops POC", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 100, "deployments": ["Slack Alert"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Correlation triggered for user $user$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 70, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "index=signals", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "signals"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "correlation_by_user_and_risk_filter"}]}, {"name": "Cloud Compute Instance Created With Previously Unseen Image", "id": "bc24922d-987c-4645-b288-f8c73ec194c4", "version": 1, "date": "2018-10-12", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud compute instances being created with previously unseen image IDs.", "search": "| tstats count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as dest from datamodel=Change where All_Changes.action=created by All_Changes.Instance_Changes.image_id, All_Changes.user | `drop_dm_object_name(\"All_Changes\")` | `drop_dm_object_name(\"Instance_Changes\")` | where image_id != \"unknown\" | lookup previously_seen_cloud_compute_images image_id as image_id OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenImage=min(firstTimeSeen) | where isnull(firstTimeSeenImage) OR firstTimeSeenImage > relative_time(now(), \"-24h@h\") | table firstTime, user, image_id, count, dest | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_with_previously_unseen_image_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider. You should run the baseline search `Previously Seen Cloud Compute Images - Initial` to build the initial table of images observed and times. You must also enable the second baseline search `Previously Seen Cloud Compute Images - Update` to keep this table up to date and to age out old data. You can also provide additional filtering for this search by customizing the `cloud_compute_instance_created_with_previously_unseen_image_filter` macro.", "known_false_positives": "After a new image is created, the first systems created with that image will cause this alert to fire.  Verify that the image being used was created by a legitimate user.", "references": [], "tags": {"analytic_story": ["Cloud Cryptomining"], "asset_type": "Cloud Compute Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 60, "message": "User $user$ is creating an instance $dest$ with an image that has not been previously seen.", "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.Instance_Changes.image_id", "All_Changes.user"], "risk_score": 36, "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_compute_instance_created_with_previously_unseen_image_filter"}], "lookups": [{"description": "A table of previously seen Cloud image IDs", "collection": "previously_seen_cloud_compute_images", "name": "previously_seen_cloud_compute_images", "fields_list": "_key, firstTimeSeen, lastTimeSeen, image_id, enough_data"}]}, {"name": "Kubernetes Scanner Image Pulling", "id": "4890cd6b-0112-4974-a272-c5c153aee551", "version": 1, "date": "2021-08-24", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search uses the Kubernetes logs from Splunk Connect from Kubernetes to detect Kubernetes Security Scanner.", "search": "`kube_objects_events` object.message IN (\"Pulling image *kube-hunter*\", \"Pulling image *kube-bench*\", \"Pulling image *kube-recon*\", \"Pulling image *kube-recon*\") | rename object.* AS * | rename involvedObject.* AS * | rename source.host AS host | eval phase=\"operate\" | eval severity=\"high\" | stats min(_time) as firstTime max(_time) as lastTime count by host, name, namespace, kind, reason, message, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_scanner_image_pulling_filter`", "how_to_implement": "You must ingest Kubernetes logs through Splunk Connect for Kubernetes.", "known_false_positives": "unknown", "references": ["https://github.com/splunk/splunk-connect-for-kubernetes"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "Kubernetes", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1526/kubernetes_kube_hunter/kubernetes_kube_hunter.json"], "deployments": ["Slack Alert"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "Kubernetes Scanner image pulled on host $host$", "mitre_attack_id": ["T1526"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "host", "type": "Entity"}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["object.message", "source.host", "object.involvedObject.name", "object.involvedObject.namespace", "object.involvedObject.kind", "object.message", "object.reason"], "risk_score": 81, "security_domain": "network", "mitre_attack_technique": ["Cloud Service Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=kube:objects:events", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "kube_objects_events"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "kubernetes_scanner_image_pulling_filter"}]}, {"name": "Abnormally High Number Of Cloud Infrastructure API Calls", "id": "0840ddf1-8c89-46ff-b730-c8d6722478c0", "version": 1, "date": "2020-09-07", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search will detect a spike in the number of API calls made to your cloud infrastructure environment by a user.", "search": "| tstats count as api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.user!=unknown All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_api_calls_v1 threshold=0.005 | rename \"IsOutlier(api_calls)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | where api_calls > expected_upper_threshold | eval distance_from_threshold = api_calls - expected_upper_threshold | table _time, user, command, api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_infrastructure_api_calls_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Infrastructure API Calls Per User` to create the probability density function.", "known_false_positives": "", "references": [], "tags": {"analytic_story": ["Suspicious Cloud User Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 50, "context": ["Source:Cloud Data", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "user $user$ has made $api_calls$ api calls, violating the dynamic threshold of $expected_upper_threshold$ with the following command $command$.", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.DP", "DE.CM", "PR.AC"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.command", "All_Changes.user", "All_Changes.status"], "risk_score": 15, "security_domain": "network", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "abnormally_high_number_of_cloud_infrastructure_api_calls_filter"}]}, {"name": "GitHub Pull Request from Unknown User", "id": "9d7b9100-8878-4404-914e-ca5e551a641e", "version": 1, "date": "2021-09-01", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for Pull Request from unknown user.", "search": "`github` check_suite.pull_requests{}.id=* | stats count by check_suite.head_commit.author.name repository.full_name check_suite.pull_requests{}.head.ref check_suite.head_commit.message | rename check_suite.head_commit.author.name as user repository.full_name as repository check_suite.pull_requests{}.head.ref as ref_head check_suite.head_commit.message as commit_message | search NOT `github_known_users` | eval phase=\"code\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_pull_request_from_unknown_user_filter`", "how_to_implement": "You must index GitHub logs. You can follow the url in reference to onboard GitHub logs.", "known_false_positives": "unknown", "references": ["https://www.splunk.com/en_us/blog/tips-and-tricks/getting-github-data-with-webhooks.html"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "GitHub", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1195.001/github_pull_request/github_pull_request.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "Vulnerabilities found in packages used by GitHub repository $repository$", "mitre_attack_id": ["T1195.001", "T1195"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "repository", "type": "System", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time", "alert.id", "repository.full_name", "repository.html_url", "action", "alert.affected_package_name", "alert.affected_range", "alert.created_at", "alert.external_identifier", "alert.external_reference", "alert.fixed_in", "alert.severity"], "risk_score": 27, "security_domain": "network", "mitre_attack_technique": ["Compromise Software Dependencies and Development Tools", "Supply Chain Compromise"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Elderwood"]}, "macros": [{"definition": "user IN (user_names_here)", "description": "specify the user allowed to create PRs in Github projects.", "name": "github_known_users"}, {"definition": "sourcetype=aws:firehose:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "github"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "github_pull_request_from_unknown_user_filter"}]}, {"name": "Cloud Provisioning Activity From Previously Unseen Country", "id": "94994255-3acf-4213-9b3f-0494df03bb31", "version": 1, "date": "2020-10-09", "author": "Rico Valdez, Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud provisioning activities from previously unseen countries. Provisioning activities are defined broadly as any event that runs or creates something.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(\"All_Changes\")` | iplocation src | where isnotnull(Country) | lookup previously_seen_cloud_provisioning_activity_sources Country as Country OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenCountry=min(firstTimeSeen) | where isnull(firstTimeSeenCountry) OR firstTimeSeenCountry > relative_time(now(), \"-24h@h\") | table firstTime, src, Country, user, object, command | `cloud_provisioning_activity_from_previously_unseen_country_filter` | `security_content_ctime(firstTime)`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider.  You should run the baseline search `Previously Seen Cloud Provisioning Activity Sources - Initial` to build the initial table of source IP address, geographic locations, and times. You must also enable the second baseline search `Previously Seen Cloud Provisioning Activity Sources - Update` to keep this table up to date and to age out old data. You can adjust the time window for this search by updating the `previously_unseen_cloud_provisioning_activity_window` macro. You can also provide additional filtering for this search by customizing the `cloud_provisioning_activity_from_previously_unseen_country_filter` macro.", "known_false_positives": "This is a strictly behavioral search, so we define \"false positive\" slightly differently. Every time this fires, it will accurately reflect the first occurrence in the time period you're searching within, plus what is stored in the cache feature. But while there are really no \"false positives\" in a traditional sense, there is definitely lots of noise.\\\n This search will fire any time a new IP address is seen in the **GeoIP** database for any kind of provisioning activity. If you typically do all provisioning from tools inside of your country, there should be few false positives. If you are located in countries where the free version of **MaxMind GeoIP** that ships by default with Splunk has weak resolution (particularly small countries in less economically powerful regions), this may be much less valuable to you.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Provisioning Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "message": "User $user$ is starting or creating an instance $object$ for the first time in Country $Country$ from IP address $src$", "mitre_attack_id": ["T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "object", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.action", "All_Changes.status", "All_Changes.src", "All_Changes.user", "All_Changes.object", "All_Changes.command"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_provisioning_activity_from_previously_unseen_country_filter"}], "lookups": [{"description": "A table of source IPs, geographic locations, and the first and last time that they have that done cloud provisioning activities", "collection": "previously_seen_cloud_provisioning_activity_sources", "name": "previously_seen_cloud_provisioning_activity_sources", "fields_list": "_key, src, City, Country, Region, firstTimeSeen, lastTimeSeen, enough_data"}]}, {"name": "AWS Create Policy Version to allow all resources", "id": "2a9b80d3-6340-4345-b5ad-212bf3d0dac4", "version": 2, "date": "2021-02-22", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user created a policy version that allows them to access any resource in their account", "search": "`cloudtrail` eventName=CreatePolicyVersion eventSource = iam.amazonaws.com errorCode = success | spath input=requestParameters.policyDocument output=key_policy_statements path=Statement{} | mvexpand key_policy_statements | spath input=key_policy_statements output=key_policy_action_1 path=Action | search key_policy_action_1 = \"*\" | stats count min(_time) as firstTime max(_time) as lastTime values(key_policy_statements) as policy_added by eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_create_policy_version_to_allow_all_resources_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created a policy to allow a user to access all resources. That said, AWS strongly advises against granting full control to all AWS resources", "references": ["https://labs.bishopfox.com/tech-blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 70, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/aws_create_policy_version/aws_cloudtrail_events.json"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ created a policy version that allows them to access any resource in their account", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.userName"], "risk_score": 49, "security_domain": "network", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_create_policy_version_to_allow_all_resources_filter"}]}, {"name": "Detect AWS Console Login by User from New Country", "id": "67bd3def-c41c-4bf6-837b-ae196b4257c6", "version": 1, "date": "2020-10-07", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Authentication"], "description": "This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour", "search": "| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | table firstTime lastTime user Country | join user  type=outer [| inputlookup previously_seen_users_console_logins | stats min(firstTime) AS earliestseen by user Country | fields earliestseen user Country] | eval userCountry=if(firstTime >= relative_time(now(), \"-24h@h\"), \"New Country\",\"Previously Seen Country\") | eval userStatus=if(earliestseen >= relative_time(now(),\"-24h@h\") OR isnull(earliestseen), \"New User\",\"Old User\") | where userCountry = \"New Country\" AND userStatus != \"Old User\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user Country  userStatus userCountry  | `detect_aws_console_login_by_user_from_new_country_filter`", "how_to_implement": "You must install and configure the Splunk Add-on for AWS (version 5.1.0 or later) and Enterprise Security 6.2, which contains the required updates to the Authentication data model for cloud use cases. Run the `Previously Seen Users in AWS CloudTrail - Initial` support search only once to create a baseline of previously seen IAM users within the last 30 days. Run `Previously Seen Users in AWS CloudTrail - Update` hourly (or more frequently depending on how often you run the detection searches) to refresh the baselines. You can also provide additional filtering for this search by customizing the `detect_aws_console_login_by_user_from_new_country_filter` macro.", "known_false_positives": "When a legitimate new user logins for the first time, this activity will be detected. Check how old the account is and verify that the user activity is legitimate.", "references": [], "tags": {"analytic_story": ["Suspicious AWS Login Activities", "Suspicious Cloud Authentication Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ is logging into the AWS console from Country $Country$ for the first time", "mitre_attack_id": ["T1535"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.signature", "Authentication.user", "Authentication.src"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Unused/Unsupported Cloud Regions"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_aws_console_login_by_user_from_new_country_filter"}], "lookups": [{"description": "A table of users seen doing console logins, and the first and last time that the activity was observed", "collection": "previously_seen_users_console_logins", "name": "previously_seen_users_console_logins", "fields_list": "_key, firstTime, lastTime, user, src, City, Region, Country"}]}, {"name": "O365 Added Service Principal", "id": "1668812a-6047-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the creation of a new Federation setting by alerting about an specific event related to its creation.", "search": "`o365_management_activity` Workload=AzureActiveDirectory signature=\"Add service principal credentials.\" | stats min(_time) as firstTime max(_time) as lastTime values(Actor{}.ID) as Actor.ID values(ModifiedProperties{}.Name) as ModifiedProperties.Name values(ModifiedProperties{}.NewValue) as ModifiedProperties.NewValue values(Target{}.ID) as Target.ID by ActorIpAddress signature | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_added_service_principal_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "The creation of a new Federation is not necessarily malicious, however these events need to be followed closely, as it may indicate federated credential abuse or backdoor via federated identities at a different cloud provider.", "references": ["https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/wp-m-unc2452-2021-000343-01.pdf", "https://us-cert.cisa.gov/ncas/alerts/aa21-008a", "https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html", "https://www.sygnia.co/golden-saml-advisory"], "tags": {"analytic_story": ["Office 365 Detections", "Cloud Federated Credential Abuse"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.003/o365_add_service_principal/o365_add_service_principal.json"], "impact": 70, "kill_chain_phases": ["Actions on Objective"], "message": "User $Actor.ID$ created a new federation setting on $Target.ID$ and added service principal credentials from IP Address $ActorIpAddress$", "mitre_attack_id": ["T1136.003", "T1136"], "observable": [{"name": "ActorIpAddress", "type": "IP Address", "role": ["Attacker"]}, {"name": "Target.ID", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Workload", "signature", "Actor{}.ID", "ModifiedProperties{}.Name", "ModifiedProperties{}.NewValue", "Target{}.ID", "ActorIpAddress"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_added_service_principal_filter"}]}, {"name": "Cloud Compute Instance Created By Previously Unseen User", "id": "37a0ec8d-827e-4d6d-8025-cedf31f3a149", "version": 2, "date": "2021-07-13", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud compute instances created by users who have not created them before.", "search": "| tstats `security_content_summariesonly` count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object) as dest from datamodel=Change where All_Changes.action=created by All_Changes.user All_Changes.vendor_region | `drop_dm_object_name(\"All_Changes\")` | lookup previously_seen_cloud_compute_creations_by_user user as user OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUser=min(firstTimeSeen) | where isnull(firstTimeSeenUser) OR firstTimeSeenUser > relative_time(now(), \"-24h@h\") | table firstTime, user, dest, count vendor_region | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_by_previously_unseen_user_filter`", "how_to_implement": "You must be ingesting the appropriate cloud-infrastructure logs Run the \"Previously Seen Cloud Compute Creations By User\" support search to create of baseline of previously seen users.", "known_false_positives": "It's possible that a user will start to create compute instances for the first time, for any number of reasons. Verify with the user launching instances that this is the intended behavior.", "references": [], "tags": {"analytic_story": ["Cloud Cryptomining"], "asset_type": "Cloud Compute Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Recon", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "message": "User $user$ is creating a new instance $dest$ for the first time", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object", "All_Changes.action", "All_Changes.user", "All_Changes.vendor_region"], "risk_score": 18, "security_domain": "threat", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_compute_instance_created_by_previously_unseen_user_filter"}], "lookups": [{"description": "A table of previously seen users creating cloud instances", "collection": "previously_seen_cloud_compute_creations_by_user", "name": "previously_seen_cloud_compute_creations_by_user", "fields_list": "_key, firstTimeSeen, lastTimeSeen, user, enough_data"}]}, {"name": "AWS ECR Container Scanning Findings Low Informational Unknown", "id": "cbc95e44-7c22-443f-88fd-0424478f5589", "version": 1, "date": "2021-08-17", "author": "Patrick Bareiss, Splunk", "type": "Hunting", "datamodel": [], "description": "This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.", "search": "`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity IN (LOW, INFORMATIONAL, UNKNWON) | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as repositoryName | eval finding = finding_name.\", \".finding_description | eval phase=\"release\" | eval severity=\"low\" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, repositoryName, user, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_low_informational_unknown_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "unknown", "references": ["https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 70, "impact": 10, "kill_chain_phases": ["Actions on Objectives"], "message": "Vulnerabilities with severity high found in repository $repositoryName$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "repositoryName", "type": "System", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["eventSource", "eventName", "responseElements.imageScanFindings.findings{}", "awsRegion", "requestParameters.imageId.imageDigest", "requestParameters.repositoryName", "user", "userName", "src_ip"], "risk_score": 7, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_ecr_container_scanning_findings_low_informational_unknown_filter"}]}, {"name": "AWS ECR Container Upload Unknown User", "id": "300688e4-365c-4486-a065-7c884462b31d", "version": 1, "date": "2021-08-19", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). A upload of a new container is normally done from only a few known users. When the user was never seen before, we should have a closer look into the event.", "search": "`cloudtrail` eventSource=ecr.amazonaws.com eventName=PutImage NOT `aws_ecr_users` | rename requestParameters.* as * | rename repositoryName AS image | eval phase=\"release\" | eval severity=\"high\" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, user, userName, src_ip, imageTag, registryId, image, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_upload_unknown_user_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "unknown", "references": ["https://attack.mitre.org/techniques/T1204/003/"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 70, "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Container uploaded from unknown user $user$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["eventSource", "eventName", "awsRegion", "requestParameters.imageTag", "requestParameters.registryId", "requestParameters.repositoryName", "user", "userName", "src_ip"], "risk_score": 49, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "userName IN (user)", "description": "specify the user allowed to push Images to AWS ECR.", "name": "aws_ecr_users"}, {"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_ecr_container_upload_unknown_user_filter"}]}, {"name": "Detect AWS Console Login by New User", "id": "bc91a8cd-35e7-4bb2-6140-e756cc46fd71", "version": 1, "date": "2020-05-28", "author": "Rico Valdez, Splunk", "type": "Hunting", "datamodel": ["Authentication"], "description": "This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour", "search": "| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user | `drop_dm_object_name(Authentication)` | join user type=outer [ inputlookup previously_seen_users_console_logins | stats min(firstTime) as earliestseen by user] | eval userStatus=if(earliestseen >= relative_time(now(), \"-24h@h\") OR isnull(earliestseen), \"First Time Logging into AWS Console\", \"Previously Seen User\") | where userStatus=\"First Time Logging into AWS Console\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_aws_console_login_by_new_user_filter`", "how_to_implement": "You must install and configure the Splunk Add-on for AWS (version 5.1.0 or later) and Enterprise Security 6.2, which contains the required updates to the Authentication data model for cloud use cases. Run the `Previously Seen Users in AWS CloudTrail - Initial` support search only once to create a baseline of previously seen IAM users within the last 30 days. Run `Previously Seen Users in AWS CloudTrail - Update` hourly (or more frequently depending on how often you run the detection searches) to refresh the baselines.", "known_false_positives": "When a legitimate new user logins for the first time, this activity will be detected. Check how old the account is and verify that the user activity is legitimate.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Authentication Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ is logging into the AWS console for the first time", "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.signature", "Authentication.user"], "risk_score": 30, "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_aws_console_login_by_new_user_filter"}], "lookups": [{"description": "A table of users seen doing console logins, and the first and last time that the activity was observed", "collection": "previously_seen_users_console_logins", "name": "previously_seen_users_console_logins", "fields_list": "_key, firstTime, lastTime, user, src, City, Region, Country"}]}, {"name": "AWS Excessive Security Scanning", "id": "1fdd164a-def8-4762-83a9-9ffe24e74d5a", "version": 1, "date": "2021-04-13", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events and analyse the amount of eventNames which starts with Describe by a single user. This indicates that this user scans the configuration of your AWS cloud environment.", "search": "`cloudtrail` eventName=Describe* OR eventName=List* OR eventName=Get*  | stats dc(eventName) as dc_events min(_time) as firstTime max(_time) as lastTime values(eventName) as eventName values(src) as src values(userAgent) as userAgent by user userIdentity.arn | where dc_events > 50 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_excessive_security_scanning_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives.", "references": ["https://github.com/aquasecurity/cloudsploit"], "tags": {"analytic_story": ["AWS User Monitoring"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:Inbound", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1526/aws_security_scanner/aws_security_scanner.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "user $user$ has excessive number of api calls $dc_events$ from these IP addresses $src$, violating the threshold of 50,  using the following commands $command$.", "mitre_attack_id": ["T1526"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "src", "userAgent", "user", "userIdentity.arn"], "risk_object": "src", "risk_object_type": "system", "risk_score": 18, "security_domain": "network", "mitre_attack_technique": ["Cloud Service Discovery"], "mitre_attack_tactics": ["Discovery"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_excessive_security_scanning_filter"}]}, {"name": "AWS Detect Users creating keys with encrypt policy without MFA", "id": "c79c164f-4b21-4847-98f9-cf6a9f49179e", "version": 1, "date": "2021-01-11", "author": "Rod Soto, Patrick Bareiss Splunk", "type": "TTP", "datamodel": [], "description": "This search provides detection of KMS keys where action kms:Encrypt is accessible for everyone (also outside of your organization). This is an indicator that your account is compromised and the attacker uses the encryption key to compromise another company.", "search": "`cloudtrail` eventName=CreateKey OR eventName=PutKeyPolicy | spath input=requestParameters.policy output=key_policy_statements path=Statement{} | mvexpand key_policy_statements | spath input=key_policy_statements output=key_policy_action_1 path=Action | spath input=key_policy_statements output=key_policy_action_2 path=Action{} | eval key_policy_action=mvappend(key_policy_action_1, key_policy_action_2) | spath input=key_policy_statements output=key_policy_principal path=Principal.AWS | search key_policy_action=\"kms:Encrypt\" AND key_policy_principal=\"*\" | stats count min(_time) as firstTime max(_time) as lastTime by eventName eventSource eventID awsRegion userIdentity.principalId | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_detect_users_creating_keys_with_encrypt_policy_without_mfa_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs", "known_false_positives": "unknown", "references": ["https://rhinosecuritylabs.com/aws/s3-ransomware-part-1-attack-vector/", "https://github.com/d1vious/git-wild-hunt", "https://www.youtube.com/watch?v=PgzNib37g0M"], "tags": {"analytic_story": ["Ransomware Cloud"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1486/aws_kms_key/aws_cloudtrail_events.json"], "impact": 50, "message": "AWS account is potentially compromised and user $userIdentity.principalId$ is trying to compromise other accounts.", "mitre_attack_id": ["T1486"], "observable": [{"name": "userIdentity.principalId", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "eventSource", "eventID", "awsRegion", "requestParameters.policy", "userIdentity.principalId"], "risk_score": 25, "security_domain": "threat", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_users_creating_keys_with_encrypt_policy_without_mfa_filter"}]}, {"name": "AWS Detect Users with KMS keys performing encryption S3", "id": "884a5f59-eec7-4f4a-948b-dbde18225fdc", "version": 1, "date": "2021-01-11", "author": "Rod Soto, Patrick Bareiss Splunk", "type": "Anomaly", "datamodel": [], "description": "This search provides detection of users with KMS keys performing encryption specifically against S3 buckets.", "search": "`cloudtrail` eventName=CopyObject requestParameters.x-amz-server-side-encryption=\"aws:kms\" | rename requestParameters.bucketName AS bucket_name, requestParameters.x-amz-copy-source AS src_file, requestParameters.key AS dest_file | stats count min(_time) as firstTime max(_time) as lastTime values(src_file) AS src_file values(dest_file) AS dest_file values(userAgent) AS userAgent values(region) AS region values(src) AS src by user | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_detect_users_with_kms_keys_performing_encryption_s3_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs", "known_false_positives": "bucket with S3 encryption", "references": ["https://rhinosecuritylabs.com/aws/s3-ransomware-part-1-attack-vector/", "https://github.com/d1vious/git-wild-hunt", "https://www.youtube.com/watch?v=PgzNib37g0M"], "tags": {"analytic_story": ["Ransomware Cloud"], "asset_type": "S3 Bucket", "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1486/s3_file_encryption/aws_cloudtrail_events.json"], "impact": 30, "message": "User $user$ with KMS keys is performing encryption, against S3 buckets on these files $dest_file$", "mitre_attack_id": ["T1486"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "dest_file", "type": "File", "role": ["Target"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "requestParameters.x-amz-server-side-encryption", "requestParameters.bucketName", "requestParameters.x-amz-copy-source", "requestParameters.key", "userAgent", "region"], "risk_score": 15, "security_domain": "threat", "mitre_attack_technique": ["Data Encrypted for Impact"], "mitre_attack_tactics": ["Impact"], "mitre_attack_groups": ["APT41", "TA505", "APT38"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_detect_users_with_kms_keys_performing_encryption_s3_filter"}]}, {"name": "AWS CreateLoginProfile", "id": "2a9b80d3-6340-4345-11ad-212bf444d111", "version": 2, "date": "2021-07-19", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user A(victim A) creates a login profile for user B, followed by a AWS Console login event from user B from the same src_ip as user B. This correlated event can be indicative of privilege escalation since both events happened from the same src_ip", "search": "`cloudtrail` eventName = CreateLoginProfile | rename requestParameters.userName as new_login_profile | table src_ip eventName new_login_profile userIdentity.userName  | join new_login_profile src_ip [| search `cloudtrail` eventName = ConsoleLogin | rename userIdentity.userName  as new_login_profile | stats count values(eventName) min(_time) as firstTime max(_time) as lastTime by eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn new_login_profile src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`] | `aws_createloginprofile_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created a login profile for another user.", "references": ["https://labs.bishopfox.com/tech-blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/aws_createloginprofile/aws_cloudtrail_events.json"], "impact": 90, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ is attempting to create a login profile for $requestParameters.userName$ and did a console login from this IP $src_ip$", "mitre_attack_id": ["T1136.003", "T1136"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.userName"], "risk_score": 72, "security_domain": "network", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_createloginprofile_filter"}]}, {"name": "GitHub Dependabot Alert", "id": "05032b04-4469-4034-9df7-05f607d75cba", "version": 1, "date": "2021-09-01", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for Dependabot Alerts in Github logs.", "search": "`github` alert.id=* action=create | rename repository.full_name as repository, repository.html_url as repository_url sender.login as user | stats min(_time) as firstTime max(_time) as lastTime by action alert.affected_package_name alert.affected_range alert.created_at alert.external_identifier alert.external_reference alert.fixed_in alert.severity repository repository_url user | eval phase=\"code\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_dependabot_alert_filter`", "how_to_implement": "You must index GitHub logs. You can follow the url in reference to onboard GitHub logs.", "known_false_positives": "unknown", "references": ["https://www.splunk.com/en_us/blog/tips-and-tricks/getting-github-data-with-webhooks.html"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "GitHub", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1195.001/github_security_advisor_alert/github_security_advisor_alert.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "Vulnerabilities found in packages used by GitHub repository $repository$", "mitre_attack_id": ["T1195.001", "T1195"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "repository", "type": "System", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time", "alert.id", "repository.full_name", "repository.html_url", "action", "alert.affected_package_name", "alert.affected_range", "alert.created_at", "alert.external_identifier", "alert.external_reference", "alert.fixed_in", "alert.severity"], "risk_score": 27, "security_domain": "network", "mitre_attack_technique": ["Compromise Software Dependencies and Development Tools", "Supply Chain Compromise"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["no", "Elderwood"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=aws:firehose:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "github"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "github_dependabot_alert_filter"}]}, {"name": "AWS UpdateLoginProfile", "id": "2a9b80d3-6a40-4115-11ad-212bf3d0d111", "version": 2, "date": "2021-07-19", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user A who has already permission to update login profile, makes an API call to update login profile for another user B . Attackers have been know to use this technique for Privilege Escalation in case new victim(user B) has more permissions than old victim(user B)", "search": "`cloudtrail` eventName = UpdateLoginProfile userAgent !=console.amazonaws.com errorCode = success| search userIdentity.userName!=requestParameters.userName  |  stats count min(_time) as firstTime max(_time) as lastTime  by requestParameters.userName src eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.userName user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_updateloginprofile_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created keys for another user.", "references": ["https://labs.bishopfox.com/tech-blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 60, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/aws_updateloginprofile/aws_cloudtrail_events.json"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "From IP address $sourceIPAddress$, user agent $userAgent$ has trigged an event $eventName$ for updating the existing login profile, potentially giving user $user_arn$ more access privilleges", "mitre_attack_id": ["T1136.003", "T1136"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.userName"], "risk_score": 30, "security_domain": "threat", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_updateloginprofile_filter"}]}, {"name": "Detect AWS Console Login by User from New Region", "id": "9f31aa8e-e37c-46bc-bce1-8b3be646d026", "version": 1, "date": "2020-10-07", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Authentication"], "description": "This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour", "search": "| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | table firstTime lastTime user Region | join user  type=outer [| inputlookup previously_seen_users_console_logins | stats min(firstTime) AS earliestseen by user Region | fields earliestseen user Region] | eval userRegion=if(firstTime >= relative_time(now(), \"-24h@h\"), \"New Region\",\"Previously Seen Region\") | eval userStatus=if(earliestseen >= relative_time(now(), \"-24h@h\") OR isnull(earliestseen), \"New User\",\"Old User\") | where userRegion = \"New Region\" AND userStatus != \"Old User\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user Region  userStatus userRegion  | `detect_aws_console_login_by_user_from_new_region_filter`", "how_to_implement": "You must install and configure the Splunk Add-on for AWS (version 5.1.0 or later) and Enterprise Security 6.2, which contains the required updates to the Authentication data model for cloud use cases. Run the `Previously Seen Users in AWS CloudTrail - Initial` support search only once to create a baseline of previously seen IAM users within the last 30 days. Run `Previously Seen Users in AWS CloudTrail - Update` hourly (or more frequently depending on how often you run the detection searches) to refresh the baselines. You can also provide additional filtering for this search by customizing the `detect_aws_console_login_by_user_from_new_region_filter` macro.", "known_false_positives": "When a legitimate new user logins for the first time, this activity will be detected. Check how old the account is and verify that the user activity is legitimate.", "references": [], "tags": {"analytic_story": ["Suspicious AWS Login Activities", "Suspicious Cloud Authentication Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ is logging into the AWS console from Region $Region$ for the first time", "mitre_attack_id": ["T1535"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.signature", "Authentication.user", "Authentication.src"], "risk_score": 36, "security_domain": "threat", "mitre_attack_technique": ["Unused/Unsupported Cloud Regions"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_aws_console_login_by_user_from_new_region_filter"}], "lookups": [{"description": "A table of users seen doing console logins, and the first and last time that the activity was observed", "collection": "previously_seen_users_console_logins", "name": "previously_seen_users_console_logins", "fields_list": "_key, firstTime, lastTime, user, src, City, Region, Country"}]}, {"name": "Circle CI Disable Security Step", "id": "72cb9de9-e98b-4ac9-80b2-5331bba6ea97", "version": 1, "date": "2021-09-01", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for disable security step in CircleCI pipeline.", "search": "`circleci` | rename workflows.job_id AS job_id | join job_id [ | search `circleci` | stats values(name) as step_names count by job_id job_name ] | stats count by step_names job_id job_name vcs.committer_name vcs.subject vcs.url owners{} | rename vcs.* as * , owners{} as user | lookup mandatory_step_for_job job_name OUTPUTNEW step_name AS mandatory_step | search mandatory_step=* | eval mandatory_step_executed=if(like(step_names, \"%\".mandatory_step.\"%\"), 1, 0) | where mandatory_step_executed=0 | rex field=url \"(?<repository>[^\\/]*\\/[^\\/]*)$\" | eval phase=\"build\"  | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `circle_ci_disable_security_step_filter`", "how_to_implement": "You must index CircleCI logs.", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "CircleCI", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1554/circle_ci_disable_security_step/circle_ci_disable_security_step.json"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "disable security step $mandatory_step$ in job $job_name$ from user $user$", "mitre_attack_id": ["T1554"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_times"], "risk_score": 72, "security_domain": "network", "mitre_attack_technique": ["Compromise Client Software Binary"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=circleci", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "circleci"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "circle_ci_disable_security_step_filter"}], "lookups": [{"description": "A lookup file that will be used to define the mandatory step for job", "filename": "mandatory_step_for_job.csv", "name": "mandatory_step_for_job", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/mandatory_step_for_job.csv"}]}, {"name": "Detect shared ec2 snapshot", "id": "2a9b80d3-6340-4345-b5ad-290bf3d222c4", "version": 2, "date": "2021-07-20", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "The following analytic utilizes AWS CloudTrail events to identify when an EC2 snapshot permissions are modified to be shared with a different AWS account. This method is used by adversaries to exfiltrate the EC2 snapshot.", "search": "`cloudtrail` eventName=ModifySnapshotAttribute | rename requestParameters.createVolumePermission.add.items{}.userId as requested_account_id | search requested_account_id != NULL | eval match=if(requested_account_id==aws_account_id,\"Match\",\"No Match\") | table _time user_arn src_ip requestParameters.attributeType requested_account_id aws_account_id match vendor_region user_agent | where match = \"No Match\" | `detect_shared_ec2_snapshot_filter` ", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "It is possible that an AWS admin has legitimately shared a snapshot with others for  a specific purpose.", "references": ["https://labs.nettitude.com/blog/how-to-exfiltrate-aws-ec2-data/"], "tags": {"analytic_story": ["Suspicious Cloud Instance Activities", "Data Exfiltration"], "asset_type": "EC2 Snapshot", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1537/aws_snapshot_exfil/aws_cloudtrail_events.json"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "AWS EC2 snapshot from account $aws_account_id$ is shared with $requested_account_id$ by user $user_arn$ from $src_ip$", "mitre_attack_id": ["T1537"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user_arn", "type": "User", "role": ["Attacker"]}, {"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "user_arn", "src_ip", "requestParameters.attributeType", "aws_account_id", "vendor_region", "user_agent"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Transfer Data to Cloud Account"], "mitre_attack_tactics": ["Exfiltration"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_shared_ec2_snapshot_filter"}]}, {"name": "Gsuite Outbound Email With Attachment To External Domain", "id": "dc4dc3a8-ff54-11eb-8bf7-acde48001122", "version": 1, "date": "2021-08-17", "author": "Teoderick Contreras, Stanislav Miskovic, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a suspicious outbound e-mail from internal email to external email domain. This can be a good hunting query to monitor insider or outbound email traffic for not common domain e-mail. The idea is to parse the domain of destination email check if there is a minimum outbound traffic < 20 with attachment.", "search": "`gsuite_gmail` num_message_attachments > 0 | rex field=source.from_header_address \"[^@]+@(?<source_domain>[^@]+)\" | rex field=destination{}.address \"[^@]+@(?<dest_domain>[^@]+)\" | where source_domain=\"internal_test_email.com\" and not dest_domain=\"internal_test_email.com\" | eval phase=\"plan\" | eval severity=\"low\" | stats values(subject) as subject, values(source.from_header_address) as src_domain_list, count as numEvents, dc(source.from_header_address) as numSrcAddresses, min(_time) as firstTime max(_time) as lastTime by dest_domain phase severity | where numSrcAddresses < 20 |sort - numSrcAddresses | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_outbound_email_with_attachment_to_external_domain_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc.", "known_false_positives": "network admin and normal user may send this file attachment as part of their day to day work. having a good protocol in attaching this file type to an e-mail may reduce the risk of having a spear phishing attack.", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops"], "tags": {"analytic_story": ["Dev Sec Ops"], "confidence": 30, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/gsuite_outbound_email_to_external/gsuite_external_domain.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "suspicious email from $source.address$ to $destination{}.address$", "mitre_attack_id": ["T1048.003", "T1048"], "observable": [{"name": "source.address", "type": "User", "role": ["attacker"]}, {"name": "destination{}.address", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "Exfiltration Over Alternative Protocol"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["APT32", "APT33", "Thrip", "FIN8", "OilRig", "Lazarus Group", "no"]}, "macros": [{"definition": "sourcetype=gsuite:gmail:bigquery", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_gmail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_outbound_email_with_attachment_to_external_domain_filter"}]}, {"name": "AWS IAM Failure Group Deletion", "id": "723b861a-92eb-11eb-93b8-acde48001122", "version": 1, "date": "2021-04-01", "author": "Michael Haag, Splunk", "type": "Anomaly", "datamodel": [], "description": "This detection identifies failure attempts to delete groups. We want to identify when a group is attempting to be deleted, but either access is denied, there is a conflict or there is no group. This is indicative of administrators performing an action, but also could be suspicious behavior occurring. Review parallel IAM events - recently added users, new groups and so forth.", "search": "`cloudtrail` eventSource=iam.amazonaws.com eventName=DeleteGroup errorCode IN (NoSuchEntityException,DeleteConflictException, AccessDenied) (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.groupName) as group_name by src eventName eventSource aws_account_id errorCode errorMessage userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_failure_group_deletion_filter`", "how_to_implement": "The Splunk AWS Add-on and Splunk App for AWS is required to utilize this data. The search requires AWS Cloudtrail logs.", "known_false_positives": "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users. Not every user with AWS access should have permission to delete groups (least privilege).", "references": ["https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/delete-group.html", "https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteGroup.html"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1098/aws_iam_failure_group_deletion/aws_iam_failure_group_deletion.json"], "impact": 10, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ has had mulitple failures while attempting to delete groups from $src$", "mitre_attack_id": ["T1098"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}, {"name": "group_name", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Splunk Security Analytics for AWS"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.groupName"], "risk_score": 5, "security_domain": "cloud", "mitre_attack_technique": ["Account Manipulation"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["APT3", "Dragonfly 2.0", "Lazarus Group"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_iam_failure_group_deletion_filter"}]}, {"name": "O365 Disable MFA", "id": "c783dd98-c703-4252-9e8a-f19d9f5c949e", "version": 1, "date": "2020-12-16", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects when multi factor authentication has been disabled, what entitiy performed the action and against what user", "search": "`o365_management_activity` Operation=\"Disable Strong Authentication.\" | stats count earliest(_time) as firstTime latest(_time) as lastTime by UserType Operation user status signature dest ResultStatus |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `o365_disable_mfa_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "Unless it is a special case, it is uncommon to disable MFA or Strong Authentication", "references": ["https://attack.mitre.org/techniques/T1556/"], "tags": {"analytic_story": ["Office 365 Detections"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1556/o365_disable_mfa/o365_disable_mfa.json"], "impact": 80, "kill_chain_phases": ["Actions on Objective"], "message": "User $user$ has executed an operation $Operation$ for this destination $dest$", "mitre_attack_id": ["T1556"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}, {"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Operation", "UserType", "user", "status", "signature", "dest", "ResultStatus"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Modify Authentication Process"], "mitre_attack_tactics": ["Credential Access", "Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_disable_mfa_filter"}]}, {"name": "Cloud API Calls From Previously Unseen User Roles", "id": "2181ad1f-1e73-4d0c-9780-e8880482a08f", "version": 1, "date": "2020-09-04", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for new commands from each user role.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where All_Changes.user_type=AssumedRole AND All_Changes.status=success by All_Changes.user, All_Changes.command All_Changes.object | `drop_dm_object_name(\"All_Changes\")` | lookup previously_seen_cloud_api_calls_per_user_role user as user, command as command OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUserApiCall=min(firstTimeSeen) | where isnull(firstTimeSeenUserApiCall) OR firstTimeSeenUserApiCall > relative_time(now(),\"-24h@h\") | table firstTime, user, object, command |`security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `cloud_api_calls_from_previously_unseen_user_roles_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider.  You should run the baseline search `Previously Seen Cloud API Calls Per User Role - Initial` to build the initial table of user roles, commands, and times. You must also enable the second baseline search `Previously Seen Cloud API Calls Per User Role - Update` to keep this table up to date and to age out old data. You can adjust the time window for this search by updating the `cloud_api_calls_from_previously_unseen_user_roles_activity_window` macro. You can also provide additional filtering for this search by customizing the `cloud_api_calls_from_previously_unseen_user_roles_filter`", "known_false_positives": ".", "references": [], "tags": {"analytic_story": ["Suspicious Cloud User Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Recon", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 60, "message": "User $user$ of type AssumedRole attempting to execute new API calls $command$ that have not been seen before", "mitre_attack_id": ["T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.user", "All_Changes.user_type", "All_Changes.status", "All_Changes.command", "All_Changes.object"], "risk_score": 36, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_api_calls_from_previously_unseen_user_roles_filter"}], "lookups": [{"description": "A table of users, commands, and the first and last time that they have been seen", "collection": "previously_seen_cloud_api_calls_per_user_role", "name": "previously_seen_cloud_api_calls_per_user_role", "fields_list": "_key, user, command, firstTimeSeen, lastTimeSeen, enough_data"}]}, {"name": "Cloud Provisioning Activity From Previously Unseen Region", "id": "5aba1860-9617-4af9-b19d-aecac16fe4f2", "version": 1, "date": "2020-08-16", "author": "Rico Valdez, Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud provisioning activities from previously unseen regions. Provisioning activities are defined broadly as any event that runs or creates something.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(\"All_Changes\")` | iplocation src | where isnotnull(Region) | lookup previously_seen_cloud_provisioning_activity_sources Region as Region OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenRegion=min(firstTimeSeen) | where isnull(firstTimeSeenRegion) OR firstTimeSeenRegion > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, Region, user, object, command | `cloud_provisioning_activity_from_previously_unseen_region_filter` | `security_content_ctime(firstTime)`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider.  You should run the baseline search `Previously Seen Cloud Provisioning Activity Sources - Initial` to build the initial table of source IP address, geographic locations, and times. You must also enable the second baseline search `Previously Seen Cloud Provisioning Activity Sources - Update` to keep this table up to date and to age out old data. You can adjust the time window for this search by updating the `previously_unseen_cloud_provisioning_activity_window` macro. You can also provide additional filtering for this search by customizing the `cloud_provisioning_activity_from_previously_unseen_region_filter` macro.", "known_false_positives": "This is a strictly behavioral search, so we define \"false positive\" slightly differently. Every time this fires, it will accurately reflect the first occurrence in the time period you're searching within, plus what is stored in the cache feature. But while there are really no \"false positives\" in a traditional sense, there is definitely lots of noise.\\\n This search will fire any time a new IP address is seen in the **GeoIP** database for any kind of provisioning activity. If you typically do all provisioning from tools inside of your country, there should be few false positives. If you are located in countries where the free version of **MaxMind GeoIP** that ships by default with Splunk has weak resolution (particularly small countries in less economically powerful regions), this may be much less valuable to you.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Provisioning Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "message": "User $user$ is starting or creating an instance $object$ for the first time in region $Region$ from IP address $src$", "mitre_attack_id": ["T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "object", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.action", "All_Changes.status", "All_Changes.src", "All_Changes.user", "All_Changes.object", "All_Changes.command"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"description": "Use this macro to determine how far back you should be checking for new provisioning activities", "definition": "\"-70m@m\"", "name": "previously_unseen_cloud_provisioning_activity_window"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_provisioning_activity_from_previously_unseen_region_filter"}], "lookups": [{"description": "A table of source IPs, geographic locations, and the first and last time that they have that done cloud provisioning activities", "collection": "previously_seen_cloud_provisioning_activity_sources", "name": "previously_seen_cloud_provisioning_activity_sources", "fields_list": "_key, src, City, Country, Region, firstTimeSeen, lastTimeSeen, enough_data"}]}, {"name": "O365 Suspicious Admin Email Forwarding", "id": "7f398cfb-918d-41f4-8db8-2e2474e02c28", "version": 1, "date": "2020-12-16", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects when an admin configured a forwarding rule for multiple mailboxes to the same destination.", "search": "`o365_management_activity` Operation=Set-Mailbox | spath input=Parameters | rename Identity AS src_user | search ForwardingAddress=* | stats dc(src_user) AS count_src_user earliest(_time) as firstTime latest(_time) as lastTime values(src_user) AS src_user values(user) AS user by ForwardingAddress | where count_src_user > 1 |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_admin_email_forwarding_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Office 365 Detections", "Data Exfiltration"], "asset_type": "Office 365", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1114.003/o365_email_forwarding_rule/o365_email_forwarding_rule.json"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ has configured a forwarding rule for multiple mailboxes to the same destination $ForwardingAddress$", "mitre_attack_id": ["T1114.003", "T1114"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Operation", "Parameters"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Email Forwarding Rule", "Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_suspicious_admin_email_forwarding_filter"}]}, {"name": "Cloud Compute Instance Created In Previously Unused Region", "id": "fa4089e2-50e3-40f7-8469-d2cc1564ca59", "version": 1, "date": "2020-09-02", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks at cloud-infrastructure events where an instance is created in any region within the last hour and then compares it to a lookup file of previously seen regions where instances have been created.", "search": "| tstats earliest(_time) as firstTime latest(_time) as lastTime values(All_Changes.object_id) as dest, count from datamodel=Change where All_Changes.action=created by All_Changes.vendor_region, All_Changes.user | `drop_dm_object_name(\"All_Changes\")` | lookup previously_seen_cloud_regions vendor_region as vendor_region OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenRegion=min(firstTimeSeen) | where isnull(firstTimeSeenRegion) OR firstTimeSeenRegion > relative_time(now(), \"-24h@h\") | table firstTime, user, dest, count , vendor_region | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_in_previously_unused_region_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider. You should run the baseline search `Previously Seen Cloud Regions - Initial` to build the initial table of images observed and times. You must also enable the second baseline search `Previously Seen Cloud Regions - Update` to keep this table up to date and to age out old data. You can also provide additional filtering for this search by customizing the `cloud_compute_instance_created_in_previously_unused_region_filter` macro.", "known_false_positives": "It's possible that a user has unknowingly started an instance in a new region. Please verify that this activity is legitimate.", "references": [], "tags": {"analytic_story": ["Cloud Cryptomining"], "asset_type": "Cloud Compute Instance", "automated_detection_testing": "passed", "cis20": ["CIS 12"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ is creating an instance $dest$ in a new region for the first time", "mitre_attack_id": ["T1535"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "user", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.vendor_region", "All_Changes.user"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Unused/Unsupported Cloud Regions"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_compute_instance_created_in_previously_unused_region_filter"}], "lookups": [{"description": "A table of vendor_region values and the first and last time that they have been observed in cloud provisioning activities", "collection": "previously_seen_cloud_regions", "name": "previously_seen_cloud_regions", "fields_list": "_key, firstTimeSeen, lastTimeSeen, vendor_region, enough_data"}]}, {"name": "Gsuite Email Suspicious Subject With Attachment", "id": "8ef3971e-00f2-11ec-b54f-acde48001122", "version": 1, "date": "2021-08-19", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a gsuite email contains suspicious subject having known file type used in spear phishing. This technique is a common and effective entry vector of attacker to compromise a network by luring the user to click or execute the suspicious attachment send from external email account because of the effective social engineering of subject related to delivery, bank and so on. On the other hand this detection may catch a normal email traffic related to legitimate transaction so better to check the email sender, spelling and etc. avoid click link or opening the attachment if you are not expecting this type of e-mail.", "search": "`gsuite_gmail` num_message_attachments > 0 subject IN (\"*dhl*\", \"* ups *\", \"*delivery*\", \"*parcel*\", \"*label*\", \"*invoice*\", \"*postal*\", \"* fedex *\", \"* usps *\", \"* express *\", \"*shipment*\", \"*Banking/Tax*\",\"*shipment*\", \"*new order*\") attachment{}.file_extension_type IN (\"doc\", \"docx\", \"xls\", \"xlsx\", \"ppt\", \"pptx\", \"pdf\", \"zip\", \"rar\", \"html\",\"htm\",\"hta\") | rex field=source.from_header_address \"[^@]+@(?<source_domain>[^@]+)\" | rex field=destination{}.address \"[^@]+@(?<dest_domain>[^@]+)\" | where not source_domain=\"internal_test_email.com\" and dest_domain=\"internal_test_email.com\" | eval phase=\"plan\" | eval severity=\"medium\" | stats count min(_time) as firstTime max(_time) as lastTime values(attachment{}.file_extension_type) as email_attachments, values(attachment{}.sha256) as attachment_sha256, values(payload_size) as payload_size by destination{}.service num_message_attachments  subject destination{}.address source.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_suspicious_subject_with_attachment_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc.", "known_false_positives": "normal user or normal transaction may contain the subject and file type attachment that this detection try to search.", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops", "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-top-spear-phishing-words.pdf"], "tags": {"analytic_story": ["Dev Sec Ops"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/gsuite_susp_subj/gsuite_susp_subj_attach.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "suspicious email from $source.address$ to $destination{}.address$", "mitre_attack_id": ["T1566.001", "T1566"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Spearphishing Attachment", "Phishing"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass", "no"]}, "macros": [{"definition": "sourcetype=gsuite:gmail:bigquery", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_gmail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_email_suspicious_subject_with_attachment_filter"}]}, {"name": "O365 Excessive SSO logon errors", "id": "8158ccc4-6038-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects accounts with high number of Single Sign ON (SSO) logon errors. Excessive logon errors may indicate attempts to bruteforce of password or single sign on token hijack or reuse.", "search": "`o365_management_activity`  Workload=AzureActiveDirectory LogonError=SsoArtifactInvalidOrExpired | stats count min(_time) as firstTime max(_time) as lastTime by LogonError ActorIpAddress UserAgent UserId | where count > 5 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_excessive_sso_logon_errors_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "Logon errors may not be malicious in nature however it may indicate attempts to reuse a token or password obtained via credential access attack.", "references": ["https://stealthbits.com/blog/bypassing-mfa-with-pass-the-cookie/"], "tags": {"analytic_story": ["Office 365 Detections", "Cloud Federated Credential Abuse"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1556/o365_sso_logon_errors/o365_sso_logon_errors.json"], "impact": 80, "kill_chain_phases": ["Actions on Objective"], "message": "User $UserId$ has caused excessive number of SSO logon errors from $ActorIpAddress$ using UserAgent $UserAgent$.", "mitre_attack_id": ["T1556"], "observable": [{"name": "ActorIpAddress", "type": "IP Address", "role": ["Attacker"]}, {"name": "UserId", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Workload", "LogonError", "ActorIpAddress", "UserAgent", "UserId"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Modify Authentication Process"], "mitre_attack_tactics": ["Credential Access", "Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_excessive_sso_logon_errors_filter"}]}, {"name": "AWS Cross Account Activity From Previously Unseen Account", "id": "21193641-cb96-4a2c-a707-d9b9a7f7792b", "version": 1, "date": "2020-05-28", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Authentication"], "description": "This search looks for AssumeRole events where an IAM role in a different account is requested for the first time.", "search": "| tstats min(_time) as firstTime max(_time) as lastTime from datamodel=Authentication where Authentication.signature=AssumeRole by Authentication.vendor_account Authentication.user Authentication.src Authentication.user_role | `drop_dm_object_name(Authentication)` | rex field=user_role \"arn:aws:sts:*:(?<dest_account>.*):\" | where vendor_account != dest_account | rename vendor_account as requestingAccountId dest_account as requestedAccountId | lookup previously_seen_aws_cross_account_activity requestingAccountId, requestedAccountId, OUTPUTNEW firstTime | eval status = if(firstTime > relative_time(now(), \"-24h@h\"),\"New Cross Account Activity\",\"Previously Seen\") |  where status = \"New Cross Account Activity\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `aws_cross_account_activity_from_previously_unseen_account_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider. You should run the baseline search `Previously Seen AWS Cross Account Activity - Initial` to build the initial table of source IP address, geographic locations, and times. You must also enable the second baseline search `Previously Seen AWS Cross Account Activity - Update` to keep this table up to date and to age out old data. You can also provide additional filtering for this search by customizing the `aws_cross_account_activity_from_previously_unseen_account_filter` macro.", "known_false_positives": "Using multiple AWS accounts and roles is perfectly valid behavior. It's suspicious when an account requests privileges of an account it hasn't before. You should validate with the account owner that this is a legitimate request.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Authentication Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "AWS account $requestingAccountId$ is trying to access resource from some other account $requestedAccountId$, for the first time.", "nist": ["PR.AC", "PR.DS", "DE.AE"], "observable": [{"name": "requestingAccountId", "type": "Other", "role": ["Attacker"]}, {"name": "requestedAccountId", "type": "Other", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.signature", "Authentication.vendor_account", "Authentication.user", "Authentication.user_role", "Authentication.src"], "risk_score": 15, "security_domain": "network", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_cross_account_activity_from_previously_unseen_account_filter"}], "lookups": [{"description": "A placeholder for a list of AWS accounts and assumed roles", "filename": "previously_seen_aws_cross_account_activity.csv", "name": "previously_seen_aws_cross_account_activity", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/previously_seen_aws_cross_account_activity.csv"}]}, {"name": "O365 New Federated Domain Added", "id": "e155876a-6048-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the addition of a new Federated domain.", "search": "`o365_management_activity` Workload=Exchange Operation=\"Add-FederatedDomain\" | stats count min(_time) as firstTime max(_time) as lastTime values(Parameters{}.Value) as Parameters.Value by ObjectId Operation OrganizationName OriginatingServer UserId UserKey | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `o365_new_federated_domain_added_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity.", "known_false_positives": "The creation of a new Federated domain is not necessarily malicious, however these events need to be followed closely, as it may indicate federated credential abuse or backdoor via federated identities at a similar or different cloud provider.", "references": ["https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/wp-m-unc2452-2021-000343-01.pdf", "https://us-cert.cisa.gov/ncas/alerts/aa21-008a", "https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html", "https://www.sygnia.co/golden-saml-advisory", "https://o365blog.com/post/aadbackdoor/"], "tags": {"analytic_story": ["Office 365 Detections", "Cloud Federated Credential Abuse"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1136.003/o365_new_federated_domain/o365_new_federated_domain.json"], "impact": 80, "kill_chain_phases": ["Actions on Objective"], "message": "User $UserId$ has added a new federated domaain $Parameters.Value$ for $OrganizationName$", "mitre_attack_id": ["T1136.003", "T1136"], "observable": [{"name": "OrganizationName", "type": "Other", "role": ["Victim"]}, {"name": "UserId", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Workload", "Operation", "Parameters{}.Value", "ObjectId", "OrganizationName", "OriginatingServer", "UserId", "UserKey"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Cloud Account", "Create Account"], "mitre_attack_tactics": ["Persistence", "Persistence"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_new_federated_domain_added_filter"}]}, {"name": "Detect New Open S3 Buckets over AWS CLI", "id": "39c61d09-8b30-4154-922b-2d0a694ecc22", "version": 2, "date": "2021-07-19", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user has created an open/public S3 bucket over the aws cli.", "search": "`cloudtrail` eventSource=\"s3.amazonaws.com\" (userAgent=\"[aws-cli*\" OR userAgent=aws-cli* ) eventName=PutBucketAcl OR requestParameters.accessControlList.x-amz-grant-read-acp IN (\"*AuthenticatedUsers\",\"*AllUsers\") OR requestParameters.accessControlList.x-amz-grant-write IN (\"*AuthenticatedUsers\",\"*AllUsers\") OR requestParameters.accessControlList.x-amz-grant-write-acp IN (\"*AuthenticatedUsers\",\"*AllUsers\") OR requestParameters.accessControlList.x-amz-grant-full-control IN (\"*AuthenticatedUsers\",\"*AllUsers\") | rename requestParameters.bucketName AS bucketName | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userIdentity.userName userIdentity.principalId userAgent bucketName requestParameters.accessControlList.x-amz-grant-read requestParameters.accessControlList.x-amz-grant-read-acp requestParameters.accessControlList.x-amz-grant-write requestParameters.accessControlList.x-amz-grant-write-acp requestParameters.accessControlList.x-amz-grant-full-control | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_open_s3_buckets_over_aws_cli_filter` ", "how_to_implement": "", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately created a public bucket for a specific purpose. That said, AWS strongly advises against granting full control to the \"All Users\" group.", "references": [], "tags": {"analytic_story": ["Suspicious AWS S3 Activities"], "asset_type": "S3 Bucket", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1530/aws_s3_public_bucket/aws_cloudtrail_events.json"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "User $userIdentity.userName$ has created an open/public bucket $bucketName$ using AWS CLI with the following permissions - $requestParameters.accessControlList.x-amz-grant-read$ $requestParameters.accessControlList.x-amz-grant-read-acp$ $requestParameters.accessControlList.x-amz-grant-write$ $requestParameters.accessControlList.x-amz-grant-write-acp$ $requestParameters.accessControlList.x-amz-grant-full-control$", "mitre_attack_id": ["T1530"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "userIdentity.userName", "type": "User", "role": ["Attacker"]}, {"name": "bucketName", "type": "Other", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventSource", "eventName", "requestParameters.accessControlList.x-amz-grant-read-acp", "requestParameters.accessControlList.x-amz-grant-write", "requestParameters.accessControlList.x-amz-grant-write-acp", "requestParameters.accessControlList.x-amz-grant-full-control", "requestParameters.bucketName", "userIdentity.userName", "userIdentity.principalId", "userAgent", "bucketName"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Data from Cloud Storage Object"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_new_open_s3_buckets_over_aws_cli_filter"}]}, {"name": "AWS Network Access Control List Created with All Open Ports", "id": "ada0f478-84a8-4641-a3f1-d82362d6bd75", "version": 2, "date": "2021-01-11", "author": "Bhavin Patel, Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "The search looks for AWS CloudTrail events to detect if any network ACLs were created with all the ports open to a specified CIDR.", "search": "`cloudtrail` eventName=CreateNetworkAclEntry OR eventName=ReplaceNetworkAclEntry requestParameters.ruleAction=allow requestParameters.egress=false requestParameters.aclProtocol=-1 | append [search `cloudtrail` eventName=CreateNetworkAclEntry OR eventName=ReplaceNetworkAclEntry requestParameters.ruleAction=allow requestParameters.egress=false requestParameters.aclProtocol!=-1 | eval port_range='requestParameters.portRange.to' - 'requestParameters.portRange.from' | where port_range>1024] | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userName userIdentity.principalId eventName requestParameters.ruleAction requestParameters.egress requestParameters.aclProtocol requestParameters.portRange.to requestParameters.portRange.from src userAgent requestParameters.cidrBlock | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_network_access_control_list_created_with_all_open_ports_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS, version 4.4.0 or later, and configure your AWS CloudTrail inputs.", "known_false_positives": "It's possible that an admin has created this ACL with all ports open for some legitimate purpose however, this should be scoped and not allowed in production environment.", "references": [], "tags": {"analytic_story": ["AWS Network ACL Activity"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 11"], "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.007/aws_create_acl/aws_cloudtrail_events.json"], "impact": 60, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ has created network ACLs with all the ports open to a specified CIDR $requestParameters.cidrBlock$", "mitre_attack_id": ["T1562.007", "T1562"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "userName", "type": "User", "role": ["Victim"]}, {"name": "requestParameters.cidrBlock", "type": "IP Address", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "requestParameters.ruleAction", "requestParameters.egress", "requestParameters.aclProtocol", "requestParameters.portRange.to", "requestParameters.portRange.from", "requestParameters.cidrBlock", "userName", "userIdentity.principalId", "userAgent"], "risk_score": 48, "security_domain": "network", "mitre_attack_technique": ["Disable or Modify Cloud Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_network_access_control_list_created_with_all_open_ports_filter"}]}, {"name": "Detect Spike in AWS Security Hub Alerts for EC2 Instance", "id": "2a9b80d3-6340-4345-b5ad-290bf5d0d222", "version": 3, "date": "2021-01-26", "author": "Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for a spike in number of of AWS security Hub alerts for an EC2 instance in 4 hours intervals", "search": "`aws_securityhub_finding` \"Resources{}.Type\"=AWSEC2Instance | bucket span=4h _time | stats count AS alerts values(Title) as Title values(Types{}) as Types values(vendor_account) as vendor_account values(vendor_region) as vendor_region values(severity) as severity by _time dest | eventstats avg(alerts) as total_alerts_avg, stdev(alerts) as total_alerts_stdev | eval threshold_value = 3 | eval isOutlier=if(alerts > total_alerts_avg+(total_alerts_stdev * threshold_value), 1, 0) | search isOutlier=1 | table _time dest alerts Title Types vendor_account vendor_region severity isOutlier total_alerts_avg | `detect_spike_in_aws_security_hub_alerts_for_ec2_instance_filter`", "how_to_implement": "You must install the AWS App for Splunk (version 5.1.0 or later) and Splunk Add-on for AWS (version 4.4.0 or later), then configure your Security Hub inputs. The threshold_value should be tuned to your environment and schedule these searches according to the bucket span interval.", "known_false_positives": "None", "references": [], "tags": {"analytic_story": ["AWS Security Hub Alerts"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 50, "context": ["Source:Cloud Data", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/security_hub_ec2_spike/security_hub_ec2_spike.json"], "impact": 30, "message": "Spike in AWS security Hub alerts with title $Title$ for EC2 instance $dest$", "nist": ["DE.DP"], "observable": [{"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Resources{}.Type", "Title", "Types{}", "vendor_account", "vendor_region", "severity", "dest"], "risk_score": 15, "security_domain": "endpoint", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=\"aws:securityhub:finding\"", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "aws_securityhub_finding"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_spike_in_aws_security_hub_alerts_for_ec2_instance_filter"}]}, {"name": "AWS IAM Assume Role Policy Brute Force", "id": "f19e09b0-9308-11eb-b7ec-acde48001122", "version": 1, "date": "2021-04-01", "author": "Michael Haag, Splunk", "type": "TTP", "datamodel": [], "description": "The following detection identifies any malformed policy document exceptions with a status of `failure`. A malformed policy document exception occurs in instances where roles are attempted to be assumed, or brute forced. In a brute force attempt, using a tool like CloudSploit or Pacu, an attempt will look like `arn:aws:iam::111111111111:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS`.  Meaning, when an adversary is attempting to identify a role name, multiple failures will occur. This detection focuses on the errors of a remote attempt that is failing.", "search": "`cloudtrail` (errorCode=MalformedPolicyDocumentException) status=failure (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyName) as policy_name by src eventName eventSource aws_account_id errorCode requestParameters.policyDocument userAgent eventID awsRegion userIdentity.principalId user_arn | where count >= 2 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_assume_role_policy_brute_force_filter`", "how_to_implement": "The Splunk AWS Add-on and Splunk App for AWS is required to utilize this data. The search requires AWS Cloudtrail logs. Set the `where count` greater than a value to identify suspicious activity in your environment.", "known_false_positives": "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users.", "references": ["https://www.praetorian.com/blog/aws-iam-assume-role-vulnerabilities", "https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/", "https://www.elastic.co/guide/en/security/current/aws-iam-brute-force-of-assume-role-policy.html"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Cloud Data", "Scope:Inbound", "Stage:Credential Access", "Other:Policy Violation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1580/aws_iam_assume_role_policy_brute_force/aws_iam_assume_role_policy_brute_force.json"], "impact": 40, "kill_chain_phases": ["Reconnaissance"], "message": "User $user_arn$ has caused multiple failures with errorCode $errorCode$, which potentially means adversary is attempting to identify a role name.", "mitre_attack_id": ["T1580", "T1110"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Splunk Security Analytics for AWS"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.policyName"], "risk_score": 28, "security_domain": "access", "mitre_attack_technique": ["Brute Force"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_iam_assume_role_policy_brute_force_filter"}]}, {"name": "Circle CI Disable Security Job", "id": "4a2fdd41-c578-4cd4-9ef7-980e352517f2", "version": 1, "date": "2021-09-02", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for disable security job in CircleCI pipeline.", "search": "`circleci` | rename vcs.committer_name as user vcs.subject as commit_message vcs.url as url workflows.* as *  | stats values(job_name) as job_names by workflow_id workflow_name user commit_message url branch | lookup mandatory_job_for_workflow workflow_name OUTPUTNEW job_name AS mandatory_job | search mandatory_job=* | eval mandatory_job_executed=if(like(job_names, \"%\".mandatory_job.\"%\"), 1, 0) | where mandatory_job_executed=0 | eval phase=\"build\" | rex field=url \"(?<repository>[^\\/]*\\/[^\\/]*)$\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `circle_ci_disable_security_job_filter`", "how_to_implement": "You must index CircleCI logs.", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "CircleCI", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 90, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1554/circle_ci_disable_security_job/circle_ci_disable_security_job.json"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "disable security job $mandatory_job$ in workflow $workflow_name$ from user $user$", "mitre_attack_id": ["T1554"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_times"], "risk_score": 72, "security_domain": "network", "mitre_attack_technique": ["Compromise Client Software Binary"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=circleci", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "circleci"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "circle_ci_disable_security_job_filter"}], "lookups": [{"description": "A lookup file that will be used to define the mandatory job for workflow", "filename": "mandatory_job_for_workflow.csv", "name": "mandatory_job_for_workflow", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/mandatory_job_for_workflow.csv"}]}, {"name": "AWS IAM Delete Policy", "id": "ec3a9362-92fe-11eb-99d0-acde48001122", "version": 1, "date": "2021-04-01", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": [], "description": "The following detection identifes when a policy is deleted on AWS. This does not identify whether successful or failed, but the error messages tell a story of suspicious attempts. There is a specific process to follow when deleting a policy. First, detach the policy from all users, groups, and roles that the policy is attached to, using DetachUserPolicy , DetachGroupPolicy , or DetachRolePolicy.", "search": "`cloudtrail` eventName=DeletePolicy (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyArn) as policyArn by src eventName eventSource aws_account_id errorCode errorMessage userAgent eventID awsRegion userIdentity.principalId userIdentity.arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_delete_policy_filter`", "how_to_implement": "The Splunk AWS Add-on and Splunk App for AWS is required to utilize this data. The search requires AWS Cloudtrail logs.", "known_false_positives": "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users. Not every user with AWS access should have permission to delete policies (least privilege). In addition, this may be saved seperately and tuned for failed or success attempts only.", "references": ["https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeletePolicy.html", "https://docs.aws.amazon.com/cli/latest/reference/iam/delete-policy.html"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Stage:Execution", "Other:Policy Violation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1098/aws_iam_delete_policy/aws_iam_delete_policy.json"], "impact": 20, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ has deleted AWS Policies from IP address $src$ by executing the following command $eventName$", "mitre_attack_id": ["T1098"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Splunk Security Analytics for AWS"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.policyArn"], "risk_score": 10, "security_domain": "access", "mitre_attack_technique": ["Account Manipulation"], "mitre_attack_tactics": ["Persistence"], "mitre_attack_groups": ["APT3", "Dragonfly 2.0", "Lazarus Group"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_iam_delete_policy_filter"}]}, {"name": "AWS SetDefaultPolicyVersion", "id": "2a9b80d3-6340-4345-11ad-212bf3d0dac4", "version": 1, "date": "2021-03-02", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events where a user has set a default policy versions. Attackers have been know to use this technique for Privilege Escalation in case the previous versions of the policy had permissions to access more resources than the current version of the policy", "search": "`cloudtrail` eventName=SetDefaultPolicyVersion eventSource = iam.amazonaws.com | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyArn) as policy_arn by src requestParameters.versionId eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_setdefaultpolicyversion_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "While this search has no known false positives, it is possible that an AWS admin has legitimately set a default policy to allow a user to access all resources. That said, AWS strongly advises against granting full control to all AWS resources", "references": ["https://labs.bishopfox.com/tech-blog/privilege-escalation-in-aws", "https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation-part-2/"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "asset_type": "AWS Account", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Stage:Credential Access", "Stage:Privilege Escalation"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/aws_setdefaultpolicyversion/aws_cloudtrail_events.json"], "impact": 50, "kill_chain_phases": ["Actions on Objectives"], "message": "From IP address $sourceIPAddress$, user agent $userAgent$ has trigged an event $eventName$ for updating the the default policy version", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.userName", "eventSource"], "risk_score": 30, "security_domain": "threat", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_setdefaultpolicyversion_filter"}]}, {"name": "O365 Suspicious Rights Delegation", "id": "b25d2973-303e-47c8-bacd-52b61604c6a7", "version": 1, "date": "2020-12-15", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects the assignment of rights to accesss content from another mailbox. This is usually only assigned to a service account.", "search": "`o365_management_activity` Operation=Add-MailboxPermission | spath input=Parameters | rename User AS src_user, Identity AS dest_user | search AccessRights=FullAccess OR AccessRights=SendAs OR AccessRights=SendOnBehalf | stats count earliest(_time) as firstTime latest(_time) as lastTime by user src_user dest_user Operation AccessRights |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_rights_delegation_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "Service Accounts", "references": [], "tags": {"analytic_story": ["Office 365 Detections"], "asset_type": "Office 365", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Stage:Exfiltration", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1114.002/suspicious_rights_delegation/suspicious_rights_delegation.json"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ has delegated suspicious rights $AccessRights$ to user $dest_user$ that allow access to sensitive", "mitre_attack_id": ["T1114.002", "T1114"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Operation", "Parameters"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Remote Email Collection", "Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["APT1", "FIN4", "APT28", "Dragonfly 2.0", "Ke3chang", "Leafminer", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_suspicious_rights_delegation_filter"}]}, {"name": "Abnormally High Number Of Cloud Security Group API Calls", "id": "d4dfb7f3-7a37-498a-b5df-f19334e871af", "version": 1, "date": "2020-09-07", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search will detect a spike in the number of API calls made to your cloud infrastructure environment about security groups by a user.", "search": "| tstats count as security_group_api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.object_category=firewall AND All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(\"All_Changes\")` | eval HourOfDay=strftime(_time, \"%H\") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, \"%w\") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_security_group_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_security_group_api_calls_v1 threshold=0.005 | rename \"IsOutlier(security_group_api_calls)\" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), \":\"), 0) | where security_group_api_calls > expected_upper_threshold | eval distance_from_threshold = security_group_api_calls - expected_upper_threshold | table _time, user, command, security_group_api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_security_group_api_calls_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs. You also must run the baseline search `Baseline Of Cloud Security Group API Calls Per User` to create the probability density function model.", "known_false_positives": "", "references": [], "tags": {"analytic_story": ["Suspicious Cloud User Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 50, "context": ["Source:Cloud Data", "Scope:Inbound", "Outcome:Allowed", "Stage:Execution", "Stage:Recon"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "user $user$ has made $api_calls$ api calls related to security groups, violating the dynamic threshold of $expected_upper_threshold$ with the following command $command$.", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["DE.DP", "DE.CM", "PR.AC"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.command", "All_Changes.object_category", "All_Changes.status", "All_Changes.user"], "risk_score": 15, "security_domain": "network", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "abnormally_high_number_of_cloud_security_group_api_calls_filter"}]}, {"name": "Gsuite Suspicious Shared File Name", "id": "07eed200-03f5-11ec-98fb-acde48001122", "version": 1, "date": "2021-08-23", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a shared file in google drive with suspicious file name that are commonly used by spear phishing campaign. This technique is very popular to lure the user by running a malicious document or click a malicious link within the shared file that will redirected to malicious website. This detection can also catch some normal email communication between organization and its external customer.", "search": "`gsuite_drive` parameters.owner_is_team_drive=false \"parameters.doc_title\" IN (\"*dhl*\", \"* ups *\", \"*delivery*\", \"*parcel*\", \"*label*\", \"*invoice*\", \"*postal*\", \"*fedex*\", \"* usps *\", \"* express *\", \"*shipment*\", \"*Banking/Tax*\",\"*shipment*\", \"*new order*\") parameters.doc_type IN (\"document\",\"pdf\", \"msexcel\", \"msword\", \"spreadsheet\", \"presentation\") | rex field=parameters.owner \"[^@]+@(?<source_domain>[^@]+)\" | rex field=parameters.target_user \"[^@]+@(?<dest_domain>[^@]+)\" | where not source_domain=\"internal_test_email.com\" and dest_domain=\"internal_test_email.com\" | eval phase=\"plan\" | eval severity=\"low\" | stats count min(_time) as firstTime max(_time) as lastTime by email parameters.owner parameters.target_user parameters.doc_title parameters.doc_type phase severity | rename parameters.target_user AS user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_suspicious_shared_file_name_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc. In order for the search to work for your environment, please edit the query to use your company specific email domain instead of `internal_test_email.com`.", "known_false_positives": "normal user or normal transaction may contain the subject and file type attachment that this detection try to search", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops", "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-top-spear-phishing-words.pdf"], "tags": {"analytic_story": ["Dev Sec Ops"], "automated_detection_testing": "passed", "confidence": 70, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/gdrive_susp_file_share/gdrive_susp_attach.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "suspicious share gdrive from $parameters.owner$ to $email$ namely as $parameters.doc_title$", "mitre_attack_id": ["T1566.001", "T1566"], "observable": [{"name": "parameters.owner", "type": "User", "role": ["attacker"]}, {"name": "email", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time", "parameters.doc_title", "src_domain", "dest_domain", "email", "parameters.visibility", "parameters.owner", "parameters.doc_type"], "risk_score": 21, "security_domain": "endpoint", "mitre_attack_technique": ["Spearphishing Attachment", "Phishing"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=gsuite:drive:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_drive"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_suspicious_shared_file_name_filter"}]}, {"name": "AWS ECR Container Upload Outside Business Hours", "id": "d4c4d4eb-3994-41ca-a25e-a82d64e125bb", "version": 1, "date": "2021-08-19", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). A upload of a new container is normally done during business hours. When done outside business hours, we want to take a look into it.", "search": "`cloudtrail` eventSource=ecr.amazonaws.com eventName=PutImage date_hour>=20 OR date_hour<8 NOT (date_wday=saturday OR date_wday=sunday) | rename requestParameters.* as * | rename repositoryName AS image | eval phase=\"release\" | eval severity=\"medium\" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, user, userName, src_ip, imageTag, registryId, image, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_upload_outside_business_hours_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "When your development is spreaded in different time zones, applying this rule can be difficult.", "references": ["https://attack.mitre.org/techniques/T1204/003/"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 70, "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Container uploaded outside business hours from $user$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["eventSource", "eventName", "awsRegion", "requestParameters.imageTag", "requestParameters.registryId", "requestParameters.repositoryName", "user", "userName", "src_ip"], "risk_score": 49, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_ecr_container_upload_outside_business_hours_filter"}]}, {"name": "Github Commit In Develop", "id": "f3030cb6-0b02-11ec-8f22-acde48001122", "version": 1, "date": "2021-09-01", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a pushed or commit to develop branch. This is to avoid unwanted modification to develop without a review to the changes. Ideally in terms of devsecops the changes made in a branch and do a PR for review. of course in some cases admin of the project may did a changes directly to master branch", "search": "`github` branches{}.name = main OR branches{}.name = develop |  stats count min(_time) as firstTime max(_time) as lastTime  by commit.author.html_url commit.commit.author.email commit.author.login commit.commit.message repository.pushed_at commit.commit.committer.date | eval phase=\"code\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_commit_in_develop_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to github logs having the fork, commit, push metadata that can be use to monitor the changes in a github project.", "known_false_positives": "admin can do changes directly to develop branch", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops"], "tags": {"analytic_story": ["Dev Sec Ops"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1199/github_push_master/github_push_develop.json"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "suspicious commit by $commit.commit.author.email$ to develop branch", "mitre_attack_id": ["T1199"], "observable": [{"name": "commit.commit.author.email", "type": "User", "role": ["attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Trusted Relationship"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["APT28", "menuPass"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=aws:firehose:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "github"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "github_commit_in_develop_filter"}]}, {"name": "O365 Bypass MFA via Trusted IP", "id": "c783dd98-c703-4252-9e8a-f19d9f66949e", "version": 2, "date": "2021-07-19", "author": "Bhavin Patel, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects newly added IP addresses/CIDR blocks to the list of MFA Trusted IPs to bypass multi factor authentication. Attackers are often known to use this technique so that they can bypass the MFA system.", "search": "`o365_management_activity` signature=\"Set Company Information.\" ModifiedProperties{}.Name=StrongAuthenticationPolicy | rex max_match=100 field=ModifiedProperties{}.NewValue \"(?<ip_addresses_new_added>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2})\" | rex max_match=100 field=ModifiedProperties{}.OldValue \"(?<ip_addresses_old>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2})\" | eval ip_addresses_old=if(isnotnull(ip_addresses_old),ip_addresses_old,\"0\") | mvexpand ip_addresses_new_added | where isnull(mvfind(ip_addresses_old,ip_addresses_new_added)) |stats count min(_time) as firstTime max(_time) as lastTime values(ip_addresses_old) as ip_addresses_old by user ip_addresses_new_added signature Workload vendor_account status user_id action | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `o365_bypass_mfa_via_trusted_ip_filter`", "how_to_implement": "You must install Splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "Unless it is a special case, it is uncommon to continually update Trusted IPs to MFA configuration.", "references": ["https://i.blackhat.com/USA-20/Thursday/us-20-Bienstock-My-Cloud-Is-APTs-Cloud-Investigating-And-Defending-Office-365.pdf", "https://attack.mitre.org/techniques/T1562/007/"], "tags": {"analytic_story": ["Office 365 Detections"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Defense Evasion"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1562.007/o365_bypass_mfa_via_trusted_ip/o365_bypass_mfa_via_trusted_ip.json"], "impact": 70, "kill_chain_phases": ["Actions on Objective"], "message": "User $user_id$ has added new IP addresses $ip_addresses_new_added$ to a list of trusted IPs to bypass MFA", "mitre_attack_id": ["T1562.007", "T1562"], "observable": [{"name": "ip_addresses_new_added", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_id", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "signature", "ModifiedProperties{}.Name", "ModifiedProperties{}.NewValue", "ModifiedProperties{}.OldValue", "user", "vendor_account", "status", "user_id", "action"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Disable or Modify Cloud Firewall", "Impair Defenses"], "mitre_attack_tactics": ["Defense Evasion", "Defense Evasion"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_bypass_mfa_via_trusted_ip_filter"}]}, {"name": "O365 PST export alert", "id": "5f694cc4-a678-4a60-9410-bffca1b647dc", "version": 1, "date": "2020-12-16", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search detects when a user has performed an Ediscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content", "search": "`o365_management_activity` Category=ThreatManagement Name=\"eDiscovery search started or exported\" | stats count earliest(_time) as firstTime latest(_time) as lastTime by Source Severity AlertEntityId Operation Name |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `o365_pst_export_alert_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.", "references": ["https://attack.mitre.org/techniques/T1114/"], "tags": {"analytic_story": ["Office 365 Detections", "Data Exfiltration"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Exfiltration"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1114/o365_export_pst_file/o365_export_pst_file.json"], "impact": 80, "kill_chain_phases": ["Actions on Objective"], "message": "User $Source$ has exported a PST file from the search using this operation- $Operation$ with a severity of $Severity$", "mitre_attack_id": ["T1114"], "observable": [{"name": "Source", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Category", "Name", "Source", "Severity", "AlertEntityId", "Operation"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Email Collection"], "mitre_attack_tactics": ["Collection"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_pst_export_alert_filter"}]}, {"name": "Gsuite Drive Share In External Email", "id": "f6ee02d6-fea0-11eb-b2c2-acde48001122", "version": 1, "date": "2021-08-16", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect suspicious google drive or google docs files shared outside or externally. This behavior might be a good hunting query to monitor exfitration of data made by an attacker or insider to a targetted machine.", "search": "`gsuite_drive` NOT (email IN(\"\", \"null\")) | rex field=parameters.owner \"[^@]+@(?<src_domain>[^@]+)\" | rex field=email \"[^@]+@(?<dest_domain>[^@]+)\" | where src_domain = \"internal_test_email.com\" and not dest_domain = \"internal_test_email.com\" | eval phase=\"plan\" | eval severity=\"low\" | stats values(parameters.doc_title) as doc_title, values(parameters.doc_type) as doc_types, values(email) as dst_email_list, values(parameters.visibility) as visibility, values(parameters.doc_id) as doc_id, count min(_time) as firstTime max(_time) as lastTime by parameters.owner ip_address phase severity  | rename parameters.owner as user ip_address as src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_drive_share_in_external_email_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc. In order for the search to work for your environment, please edit the query to use your company specific email domain instead of `internal_test_email.com`.", "known_false_positives": "network admin or normal user may share files to customer and external team.", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops"], "tags": {"analytic_story": ["Dev Sec Ops"], "confidence": 90, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1567.002/gsuite_share_drive/gdrive_share_external.log"], "deployments": ["Send to Phantom"], "impact": 80, "kill_chain_phases": ["Exfiltration"], "message": "suspicious share gdrive from $parameters.owner$ to $email$ namely as $parameters.doc_title$", "mitre_attack_id": ["T1567.002", "T1567"], "observable": [{"name": "parameters.owner", "type": "User", "role": ["Attacker"]}, {"name": "email", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time", "parameters.doc_title", "src_domain", "dest_domain", "email", "parameters.visibility", "parameters.owner", "parameters.doc_type"], "risk_score": 72, "security_domain": "endpoint", "mitre_attack_technique": ["Exfiltration to Cloud Storage", "Exfiltration Over Web Service"], "mitre_attack_tactics": ["Exfiltration", "Exfiltration"], "mitre_attack_groups": ["Leviathan", "Turla", "no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=gsuite:drive:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_drive"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_drive_share_in_external_email_filter"}]}, {"name": "Cloud Provisioning Activity From Previously Unseen IP Address", "id": "f86a8ec9-b042-45eb-92f4-e9ed1d781078", "version": 1, "date": "2020-08-16", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud provisioning activities from previously unseen IP addresses. Provisioning activities are defined broadly as any event that runs or creates something.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime, values(All_Changes.object_id) as object_id from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.command | `drop_dm_object_name(\"All_Changes\")` | lookup previously_seen_cloud_provisioning_activity_sources src as src OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenSrc=min(firstTimeSeen) | where isnull(firstTimeSeenSrc) OR firstTimeSeenSrc > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, user, object_id, command | `cloud_provisioning_activity_from_previously_unseen_ip_address_filter` | `security_content_ctime(firstTime)`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider.  You should run the baseline search `Previously Seen Cloud Provisioning Activity Sources - Initial` to build the initial table of source IP address, geographic locations, and times. You must also enable the second baseline search `Previously Seen Cloud Provisioning Activity Sources - Update` to keep this table up to date and to age out old data. You can adjust the time window for this search by updating the `previously_unseen_cloud_provisioning_activity_window` macro. You can also provide additional filtering for this search by customizing the `cloud_provisioning_activity_from_previously_unseen_ip_address_filter` macro.", "known_false_positives": "This is a strictly behavioral search, so we define \"false positive\" slightly differently. Every time this fires, it will accurately reflect the first occurrence in the time period you're searching within, plus what is stored in the cache feature. But while there are really no \"false positives\" in a traditional sense, there is definitely lots of noise.\\\n This search will fire any time a new IP address is seen in the **GeoIP** database for any kind of provisioning activity. If you typically do all provisioning from tools inside of your country, there should be few false positives. If you are located in countries where the free version of **MaxMind GeoIP** that ships by default with Splunk has weak resolution (particularly small countries in less economically powerful regions), this may be much less valuable to you.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Provisioning Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "message": "User $user$ is starting or creating an instance $object_id$ for the first time from IP address $src$", "mitre_attack_id": ["T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "object_id", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.status", "All_Changes.src", "All_Changes.user", "All_Changes.command"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"description": "Use this macro to determine how far back you should be checking for new provisioning activities", "definition": "\"-70m@m\"", "name": "previously_unseen_cloud_provisioning_activity_window"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_provisioning_activity_from_previously_unseen_ip_address_filter"}], "lookups": [{"description": "A table of source IPs, geographic locations, and the first and last time that they have that done cloud provisioning activities", "collection": "previously_seen_cloud_provisioning_activity_sources", "name": "previously_seen_cloud_provisioning_activity_sources", "fields_list": "_key, src, City, Country, Region, firstTimeSeen, lastTimeSeen, enough_data"}]}, {"name": "Cloud Compute Instance Created With Previously Unseen Instance Type", "id": "c6ddbf53-9715-49f3-bb4c-fb2e8a309cda", "version": 1, "date": "2020-09-12", "author": "David Dorsey, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "Find EC2 instances being created with previously unseen instance types.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as dest, count from datamodel=Change where All_Changes.action=created by All_Changes.Instance_Changes.instance_type, All_Changes.user | `drop_dm_object_name(\"All_Changes\")` | `drop_dm_object_name(\"Instance_Changes\")` | where instance_type != \"unknown\" | lookup previously_seen_cloud_compute_instance_types instance_type as instance_type OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenInstanceType=min(firstTimeSeen) | where isnull(firstTimeSeenInstanceType) OR firstTimeSeenInstanceType > relative_time(now(), \"-24h@h\") | table firstTime, user, dest, count, instance_type | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_with_previously_unseen_instance_type_filter`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider. You should run the baseline search `Previously Seen Cloud Compute Instance Types - Initial` to build the initial table of instance types observed and times. You must also enable the second baseline search `Previously Seen Cloud Compute Instance Types - Update` to keep this table up to date and to age out old data. You can also provide additional filtering for this search by customizing the `cloud_compute_instance_created_with_previously_unseen_instance_type_filter` macro.", "known_false_positives": "It is possible that an admin will create a new system using a new instance type that has never been used before. Verify with the creator that they intended to create the system with the new instance type.", "references": [], "tags": {"analytic_story": ["Cloud Cryptomining"], "asset_type": "Cloud Compute Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 50, "message": "User $user$ is creating an instance $dest$ with an instance type $instance_type$ that has not been previously seen.", "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.action", "All_Changes.Instance_Changes.instance_type", "All_Changes.user"], "risk_score": 30, "security_domain": "threat", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_compute_instance_created_with_previously_unseen_instance_type_filter"}], "lookups": [{"description": "A place holder for a list of used cloud compute instance types", "collection": "previously_seen_cloud_compute_instance_types", "name": "previously_seen_cloud_compute_instance_types", "fields_list": "_key, firstTimeSeen, lastTimeSeen, instance_type, enough_data"}]}, {"name": "O365 Suspicious User Email Forwarding", "id": "f8dfe015-dbb3-4569-ba75-b13787e06aa4", "version": 1, "date": "2020-12-16", "author": "Patrick Bareiss, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects when multiple user configured a forwarding rule to the same destination.", "search": "`o365_management_activity` Operation=Set-Mailbox | spath input=Parameters | rename Identity AS src_user | search ForwardingSmtpAddress=* | stats dc(src_user) AS count_src_user earliest(_time) as firstTime latest(_time) as lastTime values(src_user) AS src_user values(user) AS user by ForwardingSmtpAddress | where count_src_user > 1 |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_user_email_forwarding_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Office 365 Detections", "Data Exfiltration"], "asset_type": "Office 365", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Stage:Exfiltration", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1114.003/o365_email_forwarding_rule/o365_email_forwarding_rule.json"], "impact": 80, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ configured multiple users $src_user$ with a count of $count_src_user$, a forwarding rule to same destination $ForwardingSmtpAddress$", "mitre_attack_id": ["T1114.003", "T1114"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "ForwardingSmtpAddress", "type": "Email Address", "role": ["Other"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Operation", "Parameters"], "risk_score": 48, "security_domain": "threat", "mitre_attack_technique": ["Email Forwarding Rule", "Email Collection"], "mitre_attack_tactics": ["Collection", "Collection"], "mitre_attack_groups": ["no", "no"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_suspicious_user_email_forwarding_filter"}]}, {"name": "AWS IAM Successful Group Deletion", "id": "e776d06c-9267-11eb-819b-acde48001122", "version": 1, "date": "2021-03-31", "author": "Michael Haag, Splunk", "type": "Hunting", "datamodel": [], "description": "The following query uses IAM events to track the success of a group being deleted on AWS. This is typically not indicative of malicious behavior, but a precurser to additional events thay may unfold. Review parallel IAM events - recently added users, new groups and so forth. Inversely, review failed attempts in a similar manner.", "search": "`cloudtrail` eventSource=iam.amazonaws.com eventName=DeleteGroup errorCode=success (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.groupName) as group_deleted by src eventName eventSource errorCode user_agent awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_successful_group_deletion_filter`", "how_to_implement": "The Splunk AWS Add-on and Splunk App for AWS is required to utilize this data. The search requires AWS Cloudtrail logs.", "known_false_positives": "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users. Not every user with AWS access should have permission to delete groups (least privilege).", "references": ["https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/delete-group.html", "https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteGroup.html"], "tags": {"analytic_story": ["AWS IAM Privilege Escalation"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1098/aws_iam_successful_group_deletion/aws_iam_successful_group_deletion.json"], "impact": 10, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user_arn$ has sucessfully deleted mulitple groups $group_deleted$ from $src$", "mitre_attack_id": ["T1069.003", "T1098", "T1069"], "observable": [{"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "user_arn", "type": "User", "role": ["Victim"]}, {"name": "group_deleted", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Splunk Security Analytics for AWS"], "required_fields": ["_time", "eventName", "userAgent", "errorCode", "requestParameters.groupName"], "risk_score": 5, "security_domain": "cloud", "mitre_attack_technique": ["Cloud Groups", "Account Manipulation", "Permission Groups Discovery"], "mitre_attack_tactics": ["Discovery", "Persistence", "Discovery"], "mitre_attack_groups": ["no", "APT3", "Dragonfly 2.0", "Lazarus Group", "TA505", "APT3"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_iam_successful_group_deletion_filter"}]}, {"name": "Cloud Instance Modified By Previously Unseen User", "id": "7fb15084-b14e-405a-bd61-a6de15a40722", "version": 1, "date": "2020-07-29", "author": "Rico Valdez, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud instances being modified by users who have not previously modified them.", "search": "| tstats `security_content_summariesonly` count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as object_id values(All_Changes.command) as command from datamodel=Change where All_Changes.action=modified All_Changes.change_type=EC2 All_Changes.status=success by All_Changes.user | `drop_dm_object_name(\"All_Changes\")` | lookup previously_seen_cloud_instance_modifications_by_user user as user OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUser=min(firstTimeSeen) | where isnull(firstTimeSeenUser) OR firstTimeSeenUser > relative_time(now(), \"-24h@h\") | table firstTime user command object_id count | `security_content_ctime(firstTime)` | `cloud_instance_modified_by_previously_unseen_user_filter`", "how_to_implement": "This search has a dependency on other searches to create and update a baseline of users observed to be associated with this activity. The search \"Previously Seen Cloud Instance Modifications By User - Update\" should be enabled for this detection to properly work.", "known_false_positives": "It's possible that a new user will start to modify EC2 instances when they haven't before for any number of reasons. Verify with the user that is modifying instances that this is the intended behavior.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Instance Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 70, "message": "User $user$ is modifying an instance $dest$ for the first time.", "mitre_attack_id": ["T1078.004", "T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.object_id", "All_Changes.command", "All_Changes.action", "All_Changes.change_type", "All_Changes.status", "All_Changes.user"], "risk_score": 42, "security_domain": "threat", "mitre_attack_technique": ["Cloud Accounts", "Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access", "Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["APT33", "Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "summariesonly=false allow_old_summaries=true", "description": "search data model's summaries only", "name": "security_content_summariesonly"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_instance_modified_by_previously_unseen_user_filter"}], "lookups": [{"description": "A table of users seen making instance modifications, and the first and last time that the activity was observed", "collection": "previously_seen_cloud_instance_modifications_by_user", "name": "previously_seen_cloud_instance_modifications_by_user", "fields_list": "_key, firstTimeSeen, lastTimeSeen, user, enough_data"}]}, {"name": "Github Commit Changes In Master", "id": "c9d2bfe2-019f-11ec-a8eb-acde48001122", "version": 1, "date": "2021-08-20", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a pushed or commit to master or main branch. This is to avoid unwanted modification to master without a review to the changes. Ideally in terms of devsecops the changes made in a branch and do a PR for review. of course in some cases admin of the project may did a changes directly to master branch", "search": "`github` branches{}.name = main OR branches{}.name = master | eval severity=\"low\" | eval phase=\"code\" |  stats count min(_time) as firstTime max(_time) as lastTime  by commit.author.html_url commit.commit.author.email commit.author.login commit.commit.message repository.pushed_at commit.commit.committer.date, phase, severity | eval phase=\"code\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_commit_changes_in_master_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to github logs having the fork, commit, push metadata that can be use to monitor the changes in a github project.", "known_false_positives": "admin can do changes directly to master branch", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops"], "tags": {"analytic_story": ["Dev Sec Ops"], "automated_detection_testing": "passed", "confidence": 30, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1199/github_push_master/github_push_master.log"], "impact": 30, "kill_chain_phases": ["Exploitation"], "message": "suspicious commit by $commit.commit.author.email$ to main branch", "mitre_attack_id": ["T1199"], "observable": [{"name": "commit.commit.author.email", "type": "User", "role": ["attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 9, "security_domain": "endpoint", "mitre_attack_technique": ["Trusted Relationship"], "mitre_attack_tactics": ["Initial Access"], "mitre_attack_groups": ["APT28", "menuPass"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "sourcetype=aws:firehose:json", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "github"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "github_commit_changes_in_master_filter"}]}, {"name": "Gsuite Email With Known Abuse Web Service Link", "id": "8630aa22-042b-11ec-af39-acde48001122", "version": 1, "date": "2021-08-23", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This analytics is to detect a gmail containing a link that are known to be abused by malware or attacker like pastebin, telegram and discord to deliver malicious payload. This event can encounter some normal email traffic within organization and external email that normally using this application and services.", "search": "`gsuite_gmail` \"link_domain{}\" IN (\"*pastebin.com*\", \"*discord*\", \"*telegram*\",\"t.me\") | rex field=source.from_header_address \"[^@]+@(?<source_domain>[^@]+)\" | rex field=destination{}.address \"[^@]+@(?<dest_domain>[^@]+)\" | where not source_domain=\"internal_test_email.com\" and dest_domain=\"internal_test_email.com\" | eval phase=\"plan\" | eval severity=\"low\" |stats values(link_domain{}) as link_domains min(_time) as firstTime max(_time) as lastTime count by is_spam source.address source.from_header_address subject destination{}.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_with_known_abuse_web_service_link_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc.", "known_false_positives": "normal email contains this link that are known application within the organization or network can be catched by this detection.", "references": ["https://news.sophos.com/en-us/2021/07/22/malware-increasingly-targets-discord-for-abuse/"], "tags": {"analytic_story": ["Dev Sec Ops"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/gsuite_susp_url/gsuite_susp_url.log"], "impact": 50, "kill_chain_phases": ["Exploitation"], "message": "suspicious email from $source.address$ to $destination{}.address$", "mitre_attack_id": ["T1566.001", "T1566"], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 25, "security_domain": "endpoint", "mitre_attack_technique": ["Spearphishing Attachment", "Phishing"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass", "no"]}, "macros": [{"definition": "sourcetype=gsuite:gmail:bigquery", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_gmail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_email_with_known_abuse_web_service_link_filter"}]}, {"name": "AWS SAML Update identity provider", "id": "2f0604c6-6030-11eb-ae93-0242ac130002", "version": 1, "date": "2021-01-26", "author": "Rod Soto, Splunk", "type": "TTP", "datamodel": [], "description": "This search provides detection of updates to SAML provider in AWS. Updates to SAML provider need to be monitored closely as they may indicate possible perimeter compromise of federated credentials, or backdoor access from another cloud provider set by attacker.", "search": "`cloudtrail` eventName=UpdateSAMLProvider | stats count min(_time) as firstTime max(_time) as lastTime by eventType eventName requestParameters.sAMLProviderArn userIdentity.sessionContext.sessionIssuer.arn sourceIPAddress userIdentity.accessKeyId userIdentity.principalId | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_saml_update_identity_provider_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "Updating a SAML provider or creating a new one may not necessarily be malicious however it needs to be closely monitored.", "references": ["https://us-cert.cisa.gov/ncas/alerts/aa21-008a", "https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html", "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/wp-m-unc2452-2021-000343-01.pdf", "https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps"], "tags": {"analytic_story": ["Cloud Federated Credential Abuse"], "asset_type": "AWS Federated Account", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Stage:Credential Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1078/update_saml_provider/update_saml_provider.json"], "impact": 80, "message": "User $userIdentity.principalId$ from IP address $sourceIPAddress$ has trigged an event $eventName$ to update the SAML provider to $requestParameters.sAMLProviderArn$", "mitre_attack_id": ["T1078"], "observable": [{"name": "sourceIPAddress", "type": "IP Address", "role": ["Attacker"]}, {"name": "userIdentity.principalId", "type": "User", "role": ["Victim", "Target"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "eventName", "eventType", "requestParameters.sAMLProviderArn", "userIdentity.sessionContext.sessionIssuer.arn", "sourceIPAddress", "userIdentity.accessKeyId", "userIdentity.principalId"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_saml_update_identity_provider_filter"}]}, {"name": "GSuite Email Suspicious Attachment", "id": "6d663014-fe92-11eb-ab07-acde48001122", "version": 1, "date": "2021-08-16", "author": "Teoderick Contreras, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search is to detect a suspicious attachment file extension in Gsuite email that may related to spear phishing attack. This file type is commonly used by malware to lure user to click on it to execute malicious code to compromised targetted machine. But this search can also catch some normal files related to this file type that maybe send by employee or network admin.", "search": "`gsuite_gmail` \"attachment{}.file_extension_type\" IN (\"pl\", \"py\", \"rb\", \"sh\", \"bat\", \"exe\", \"dll\", \"cpl\", \"com\", \"js\", \"vbs\", \"ps1\", \"reg\",\"swf\", \"cmd\", \"go\") | eval phase=\"plan\" | eval severity=\"medium\" | stats count min(_time) as firstTime max(_time) as lastTime values(attachment{}.file_extension_type) as email_attachments, values(attachment{}.sha256) as attachment_sha256, values(payload_size) as payload_size by destination{}.service num_message_attachments  subject destination{}.address source.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_suspicious_attachment_filter`", "how_to_implement": "To successfully implement this search, you need to be ingesting logs related to gsuite having the file attachment metadata like file type, file extension, source email, destination email, num of attachment and etc.", "known_false_positives": "network admin and normal user may send this file attachment as part of their day to day work. having a good protocol in attaching this file type to an e-mail may reduce the risk of having a spear phishing attack.", "references": ["https://www.redhat.com/en/topics/devops/what-is-devsecops"], "tags": {"analytic_story": ["Dev Sec Ops"], "confidence": 70, "context": ["Source:Endpoint", "Stage:Reconnaissance"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1566.001/gsuite_susp_attachment_ext/gsuite_gmail_file_ext.log"], "impact": 70, "kill_chain_phases": ["Exploitation"], "message": "suspicious email from $source.address$ to $destination{}.address$", "mitre_attack_id": ["T1566.001", "T1566"], "observable": [{"name": "source.address", "type": "User", "role": ["attacker"]}, {"name": "destination{}.address", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time", "attachment{}.file_extension_type", "attachment{}.sha256", "destination{}.service", "num_message_attachments", "payload_size", "subject", "destination{}.address", "source.address"], "risk_score": 49, "security_domain": "endpoint", "mitre_attack_technique": ["Spearphishing Attachment", "Phishing"], "mitre_attack_tactics": ["Initial Access", "Initial Access"], "mitre_attack_groups": ["Magic Hound", "Windshift", "APT33", "Sandworm Team", "Naikon", "Gamaredon Group", "Sharpshooter", "Molerats", "Mofang", "Wizard Spider", "RTM", "Frankenstein", "Inception", "BlackTech", "APT-C-36", "APT41", "Machete", "admin@338", "Kimsuky", "APT12", "TA505", "Silence", "The White Company", "APT39", "FIN4", "Darkhotel", "Gallmaker", "Tropic Trooper", "Turla", "Gorgon Group", "Rancor", "DarkHydrus", "Cobalt Group", "FIN7", "OilRig", "Lazarus Group", "APT19", "Dragonfly 2.0", "BRONZE BUTLER", "APT32", "FIN8", "MuddyWater", "APT28", "TA459", "Leviathan", "Patchwork", "PLATINUM", "Elderwood", "APT29", "APT37", "menuPass", "no"]}, "macros": [{"definition": "sourcetype=gsuite:gmail:bigquery", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "gsuite_gmail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "gsuite_email_suspicious_attachment_filter"}]}, {"name": "Cloud Provisioning Activity From Previously Unseen City", "id": "e7ecc5e0-88df-48b9-91af-51104c68f02f", "version": 1, "date": "2020-10-09", "author": "Rico Valdez, Bhavin Patel, Splunk", "type": "Anomaly", "datamodel": ["Change"], "description": "This search looks for cloud provisioning activities from previously unseen cities. Provisioning activities are defined broadly as any event that runs or creates something.", "search": "| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(\"All_Changes\")` | iplocation src | where isnotnull(City) | lookup previously_seen_cloud_provisioning_activity_sources City as City OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenCity=min(firstTimeSeen) | where isnull(firstTimeSeenCity) OR firstTimeSeenCity > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, City, user, object, command | `cloud_provisioning_activity_from_previously_unseen_city_filter` | `security_content_ctime(firstTime)`", "how_to_implement": "You must be ingesting your cloud infrastructure logs from your cloud provider.  You should run the baseline search `Previously Seen Cloud Provisioning Activity Sources - Initial` to build the initial table of source IP address, geographic locations, and times. You must also enable the second baseline search `Previously Seen Cloud Provisioning Activity Sources - Update` to keep this table up to date and to age out old data. You can adjust the time window for this search by updating the `previously_unseen_cloud_provisioning_activity_window` macro. You can also provide additional filtering for this search by customizing the `cloud_provisioning_activity_from_previously_unseen_city_filter` macro.", "known_false_positives": "This is a strictly behavioral search, so we define \"false positive\" slightly differently. Every time this fires, it will accurately reflect the first occurrence in the time period you're searching within, plus what is stored in the cache feature. But while there are really no \"false positives\" in a traditional sense, there is definitely lots of noise.\\\n This search will fire any time a new IP address is seen in the **GeoIP** database for any kind of provisioning activity. If you typically do all provisioning from tools inside of your country, there should be few false positives. If you are located in countries where the free version of **MaxMind GeoIP** that ships by default with Splunk has weak resolution (particularly small countries in less economically powerful regions), this may be much less valuable to you.", "references": [], "tags": {"analytic_story": ["Suspicious Cloud Provisioning Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 1"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "message": "User $user$ is starting or creating an instance $dest$ for the first time in City $City$ from IP address $src$", "mitre_attack_id": ["T1078"], "nist": ["ID.AM"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}, {"name": "src", "type": "IP Address", "role": ["Attacker"]}, {"name": "dest", "type": "Endpoint", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "All_Changes.action", "All_Changes.status", "All_Changes.src", "All_Changes.user", "All_Changes.object", "All_Changes.command"], "risk_score": 18, "security_domain": "threat", "mitre_attack_technique": ["Valid Accounts"], "mitre_attack_tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "mitre_attack_groups": ["Sandworm Team", "Wizard Spider", "Silence", "APT41", "Soft Cell", "TEMP.Veles", "APT39", "FIN4", "Night Dragon", "Dragonfly 2.0", "FIN8", "Leviathan", "APT33", "OilRig", "FIN5", "menuPass", "APT28", "FIN10", "Suckfly", "FIN6", "Threat Group-3390", "APT18", "PittyTiger", "Carbanak"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"description": "Use this macro to determine how far back you should be checking for new provisioning activities", "definition": "\"-70m@m\"", "name": "previously_unseen_cloud_provisioning_activity_window"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "cloud_provisioning_activity_from_previously_unseen_city_filter"}], "lookups": [{"description": "A table of source IPs, geographic locations, and the first and last time that they have that done cloud provisioning activities", "collection": "previously_seen_cloud_provisioning_activity_sources", "name": "previously_seen_cloud_provisioning_activity_sources", "fields_list": "_key, src, City, Country, Region, firstTimeSeen, lastTimeSeen, enough_data"}]}, {"name": "Kubernetes Nginx Ingress RFI", "id": "fc5531ae-62fd-4de6-9c36-b4afdae8ca95", "version": 1, "date": "2021-08-23", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search uses the Kubernetes logs from a nginx ingress controller to detect remote file inclusion attacks.", "search": "`kubernetes_container_controller` | rex field=_raw \"^(?<remote_addr>\\S+)\\s+-\\s+-\\s+\\[(?<time_local>[^\\]]*)\\]\\s\\\"(?<request>[^\\\"]*)\\\"\\s(?<status>\\S*)\\s(?<body_bytes_sent>\\S*)\\s\\\"(?<http_referer>[^\\\"]*)\\\"\\s\\\"(?<http_user_agent>[^\\\"]*)\\\"\\s(?<request_length>\\S*)\\s(?<request_time>\\S*)\\s\\[(?<proxy_upstream_name>[^\\]]*)\\]\\s\\[(?<proxy_alternative_upstream_name>[^\\]]*)\\]\\s(?<upstream_addr>\\S*)\\s(?<upstream_response_length>\\S*)\\s(?<upstream_response_time>\\S*)\\s(?<upstream_status>\\S*)\\s(?<req_id>\\S*)\" | rex field=request \"^(?<http_method>\\S+)?\\s(?<url>\\S+)\\s\" | rex field=url \"(?<dest_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\" | search dest_ip=* | rename remote_addr AS src_ip, upstream_status as status, proxy_upstream_name as proxy | eval phase=\"operate\" | eval severity=\"medium\" | stats count min(_time) as firstTime max(_time) as lastTime by src_ip, dest_ip status, url, http_method, host, http_user_agent, proxy, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_nginx_ingress_rfi_filter`", "how_to_implement": "You must ingest Kubernetes logs through Splunk Connect for Kubernetes.", "known_false_positives": "unknown", "references": ["https://github.com/splunk/splunk-connect-for-kubernetes", "https://www.netsparker.com/blog/web-security/remote-file-inclusion-vulnerability/"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "Kubernetes", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 70, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1212/kuberntest_nginx_rfi_attack/kubernetes_nginx_rfi_attack.log"], "deployments": ["Slack Alert"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Remote File Inclusion Attack detected on $host$", "mitre_attack_id": ["T1212"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["raw"], "risk_score": 49, "security_domain": "network", "mitre_attack_technique": ["Exploitation for Credential Access"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=kube:container:controller", "description": "customer specific splunk configurations(eg- index, source, sourcetype) for Kubernetes data. Replace the macro definition with configurations for your Splunk Environmnent.", "name": "kubernetes_container_controller"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "kubernetes_nginx_ingress_rfi_filter"}]}, {"name": "Correlation by Repository and Risk", "id": "8da9fdd9-6a1b-4ae0-8a34-8c25e6be9687", "version": 1, "date": "2021-09-06", "author": "Patrick Bareiss, Splunk", "type": "Correlation", "datamodel": [], "description": "This search correlations detections by repository and risk_score", "search": "`signals` | fillnull | stats sum(risk_score) as risk_score values(source) as signals values(user) as user by repository | sort - risk_score | where risk_score > 80 | `correlation_by_repository_and_risk_filter`", "how_to_implement": "For Dev Sec Ops POC", "known_false_positives": "unknown", "references": [], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 100, "deployments": ["Slack Alert"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Correlation triggered for user $user$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["_time"], "risk_score": 70, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "index=signals", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "signals"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "correlation_by_repository_and_risk_filter"}]}, {"name": "O365 Excessive Authentication Failures Alert", "id": "d441364c-349c-453b-b55f-12eccab67cf9", "version": 1, "date": "2020-12-16", "author": "Rod Soto, Splunk", "type": "Anomaly", "datamodel": [], "description": "This search detects when an excessive number of authentication failures occur this search also includes attempts against MFA prompt codes", "search": "`o365_management_activity` Workload=AzureActiveDirectory UserAuthenticationMethod=* status=Failed | stats count earliest(_time) as firstTime latest(_time) values(UserAuthenticationMethod) AS UserAuthenticationMethod values(UserAgent) AS UserAgent values(status) AS status values(src_ip) AS src_ip by user | where count > 10 |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `o365_excessive_authentication_failures_alert_filter`", "how_to_implement": "You must install splunk Microsoft Office 365 add-on. This search works with o365:management:activity", "known_false_positives": "The threshold for alert is above 10 attempts and this should reduce the number of false positives.", "references": ["https://attack.mitre.org/techniques/T1110/"], "tags": {"analytic_story": ["Office 365 Detections"], "asset_type": "Office 365", "automated_detection_testing": "passed", "confidence": 80, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution", "Stage:Initial Access"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110/o365_brute_force_login/o365_brute_force_login.json"], "impact": 80, "kill_chain_phases": ["Not Applicable"], "message": "User $user$ has caused excessive number of authentication failures from $src_ip$ using UserAgent $UserAgent$.", "mitre_attack_id": ["T1110"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "user", "type": "User", "role": ["Victim"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Workload", "UserAuthenticationMethod", "status", "UserAgent", "src_ip", "user"], "risk_score": 64, "security_domain": "threat", "mitre_attack_technique": ["Brute Force"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["DarkVishnya", "APT39", "OilRig", "FIN5", "Turla"]}, "macros": [{"definition": "sourcetype=o365:management:activity", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "o365_management_activity"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "o365_excessive_authentication_failures_alert_filter"}]}, {"name": "Kubernetes Nginx Ingress LFI", "id": "0f83244b-425b-4528-83db-7a88c5f66e48", "version": 1, "date": "2021-08-20", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search uses the Kubernetes logs from a nginx ingress controller to detect local file inclusion attacks.", "search": "`kubernetes_container_controller` | rex field=_raw \"^(?<remote_addr>\\S+)\\s+-\\s+-\\s+\\[(?<time_local>[^\\]]*)\\]\\s\\\"(?<request>[^\\\"]*)\\\"\\s(?<status>\\S*)\\s(?<body_bytes_sent>\\S*)\\s\\\"(?<http_referer>[^\\\"]*)\\\"\\s\\\"(?<http_user_agent>[^\\\"]*)\\\"\\s(?<request_length>\\S*)\\s(?<request_time>\\S*)\\s\\[(?<proxy_upstream_name>[^\\]]*)\\]\\s\\[(?<proxy_alternative_upstream_name>[^\\]]*)\\]\\s(?<upstream_addr>\\S*)\\s(?<upstream_response_length>\\S*)\\s(?<upstream_response_time>\\S*)\\s(?<upstream_status>\\S*)\\s(?<req_id>\\S*)\" | lookup local_file_inclusion_paths local_file_inclusion_paths AS request OUTPUT lfi_path | search lfi_path=yes | rename remote_addr AS src_ip, upstream_status as status, proxy_upstream_name as proxy | rex field=request \"^(?<http_method>\\S+)\\s(?<url>\\S+)\\s\" | eval phase=\"operate\" | eval severity=\"high\" | stats count min(_time) as firstTime max(_time) as lastTime by src_ip, status, url, http_method, host, http_user_agent, proxy, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_nginx_ingress_lfi_filter`", "how_to_implement": "You must ingest Kubernetes logs through Splunk Connect for Kubernetes.", "known_false_positives": "unknown", "references": ["https://github.com/splunk/splunk-connect-for-kubernetes", "https://www.offensive-security.com/metasploit-unleashed/file-inclusion-vulnerabilities/"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "Kubernetes", "automated_detection_testing": "passed", "cis20": ["CIS 13"], "confidence": 70, "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1212/kubernetes_nginx_lfi_attack/kubernetes_nginx_lfi_attack.log"], "deployments": ["Slack Alert"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Local File Inclusion Attack detected on $host$", "mitre_attack_id": ["T1212"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["raw"], "risk_score": 49, "security_domain": "network", "mitre_attack_technique": ["Exploitation for Credential Access"], "mitre_attack_tactics": ["Credential Access"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=kube:container:controller", "description": "customer specific splunk configurations(eg- index, source, sourcetype) for Kubernetes data. Replace the macro definition with configurations for your Splunk Environmnent.", "name": "kubernetes_container_controller"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "kubernetes_nginx_ingress_lfi_filter"}], "lookups": [{"description": "A list of interesting files in a local file inclusion attack", "filename": "local_file_inclusion_paths.csv", "name": "local_file_inclusion_paths", "default_match": "false", "match_type": "WILDCARD(local_file_inclusion_paths)", "min_matches": 1, "case_sensitive_match": "false", "csv_file_url": "https://security-content.s3-us-west-2.amazonaws.com/lookups/local_file_inclusion_paths.csv"}]}, {"name": "AWS IAM AccessDenied Discovery Events", "id": "3e1f1568-9633-11eb-a69c-acde48001122", "version": 2, "date": "2021-11-12", "author": "Michael Haag, Splunk", "type": "Anomaly", "datamodel": [], "description": "The following detection identifies excessive AccessDenied events within an hour timeframe. It is possible that an access key to AWS may have been stolen and is being misused to perform discovery events. In these instances, the access is not available with the key stolen therefore these events will be generated.", "search": "`cloudtrail` (errorCode = \"AccessDenied\") user_type=IAMUser (userAgent!=*.amazonaws.com) | bucket _time span=1h | stats count as failures min(_time) as firstTime max(_time) as lastTime, dc(eventName) as methods, dc(eventSource) as sources by src_ip, userIdentity.arn, _time | where failures >= 5 and methods >= 1 and sources >= 1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_accessdenied_discovery_events_filter`", "how_to_implement": "The Splunk AWS Add-on and Splunk App for AWS is required to utilize this data. The search requires AWS Cloudtrail logs.", "known_false_positives": "It is possible to start this detection will need to be tuned by source IP or user. In addition, change the count values to an upper threshold to restrict false positives.", "references": ["https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-iam-permission-errors/"], "tags": {"analytic_story": ["Suspicious Cloud User Activities"], "automated_detection_testing": "passed", "confidence": 50, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Blocked", "Stage:Discovery"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1580/aws_iam_accessdenied_discovery_events/aws_iam_accessdenied_discovery_events.json"], "impact": 20, "kill_chain_phases": ["Reconnaissance"], "message": "User $userIdentity.arn$ is seen to perform excessive number of discovery related api calls- $failures$, within an hour where the access was denied.", "mitre_attack_id": ["T1580"], "observable": [{"name": "src_ip", "type": "IP Address", "role": ["Attacker"]}, {"name": "userIdentity.arn", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Splunk Security Analytics for AWS"], "required_fields": ["_time", "eventName", "eventSource", "userAgent", "errorCode", "userIdentity.type"], "risk_object": "src_ip", "risk_object_type": "system", "risk_score": 10, "security_domain": "access", "mitre_attack_technique": [], "mitre_attack_tactics": [], "mitre_attack_groups": []}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_iam_accessdenied_discovery_events_filter"}]}, {"name": "AWS ECR Container Scanning Findings High", "id": "62721bd2-1d82-4623-b6e6-aac170014423", "version": 1, "date": "2021-08-17", "author": "Patrick Bareiss, Splunk", "type": "TTP", "datamodel": [], "description": "This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.", "search": "`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity=HIGH | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as image | eval finding = finding_name.\", \".finding_description | eval phase=\"release\" | eval severity=\"high\" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, image, user, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_high_filter`", "how_to_implement": "You must install splunk AWS add on and Splunk App for AWS. This search works with AWS CloudTrail logs.", "known_false_positives": "unknown", "references": ["https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html"], "tags": {"analytic_story": ["Dev Sec Ops"], "asset_type": "AWS Account", "cis20": ["CIS 13"], "confidence": 100, "deployments": ["Slack Alert"], "impact": 70, "kill_chain_phases": ["Actions on Objectives"], "message": "Vulnerabilities with severity high found in image $image$", "mitre_attack_id": ["T1204.003", "T1204"], "nist": ["PR.DS", "PR.AC", "DE.CM"], "observable": [{"name": "image", "type": "System", "role": ["Victim"]}], "product": ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud", "Dev Sec Ops Analytics"], "required_fields": ["eventSource", "eventName", "responseElements.imageScanFindings.findings{}", "awsRegion", "requestParameters.imageId.imageDigest", "requestParameters.repositoryName", "user", "userName", "src_ip"], "risk_score": 70, "security_domain": "network", "mitre_attack_technique": ["User Execution"], "mitre_attack_tactics": ["Execution"], "mitre_attack_groups": ["no"]}, "macros": [{"definition": "sourcetype=aws:cloudtrail", "description": "customer specific splunk configurations(eg- index, source, sourcetype). Replace the macro definition with configurations for your Splunk Environmnent.", "name": "cloudtrail"}, {"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "aws_ecr_container_scanning_findings_high_filter"}]}, {"name": "Detect AWS Console Login by User from New City", "id": "121b0b11-f8ac-4ed6-a132-3800ca4fc07a", "version": 1, "date": "2020-10-07", "author": "Bhavin Patel, Splunk", "type": "Hunting", "datamodel": ["Authentication"], "description": "This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour", "search": "| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | table firstTime lastTime user City | join user  type=outer [| inputlookup previously_seen_users_console_logins | stats min(firstTime) AS earliestseen by user City | fields earliestseen user City] | eval userCity=if(firstTime >= relative_time(now(), \"-24h@h\"), \"New City\",\"Previously Seen City\") | eval userStatus=if(earliestseen >= relative_time(now(), \"-24h@h\") OR isnull(earliestseen), \"New User\",\"Old User\") | where userCity = \"New City\" AND userStatus != \"Old User\" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user City  userStatus userCity  | `detect_aws_console_login_by_user_from_new_city_filter`", "how_to_implement": "You must install and configure the Splunk Add-on for AWS (version 5.1.0 or later) and Enterprise Security 6.2, which contains the required updates to the Authentication data model for cloud use cases. Run the `Previously Seen Users in AWS CloudTrail - Initial` support search only once to create a baseline of previously seen IAM users within the last 30 days. Run `Previously Seen Users in AWS CloudTrail - Update` hourly (or more frequently depending on how often you run the detection searches) to refresh the baselines. You can also provide additional filtering for this search by customizing the `detect_aws_console_login_by_user_from_new_city_filter` macro.", "known_false_positives": "When a legitimate new user logins for the first time, this activity will be detected. Check how old the account is and verify that the user activity is legitimate.", "references": [], "tags": {"analytic_story": ["Suspicious AWS Login Activities", "Suspicious Cloud Authentication Activities"], "asset_type": "AWS Instance", "automated_detection_testing": "passed", "cis20": ["CIS 16"], "confidence": 60, "context": ["Source:Cloud Data", "Scope:External", "Outcome:Allowed", "Stage:Execution"], "dataset": ["https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/suspicious_behaviour/abnormally_high_cloud_instances_launched/cloudtrail_behavioural_detections.json"], "impact": 30, "kill_chain_phases": ["Actions on Objectives"], "message": "User $user$ is logging into the AWS console from City $City$ for the first time", "mitre_attack_id": ["T1535"], "nist": ["DE.DP", "DE.AE"], "observable": [{"name": "user", "type": "User", "role": ["Attacker"]}], "product": ["Splunk Security Analytics for AWS", "Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"], "required_fields": ["_time", "Authentication.signature", "Authentication.user", "Authentication.src"], "risk_score": 18, "security_domain": "threat", "mitre_attack_technique": ["Unused/Unsupported Cloud Regions"], "mitre_attack_tactics": ["Defense Evasion"], "mitre_attack_groups": ["no"]}, "macros": [{"arguments": ["field"], "definition": "convert timeformat=\"%Y-%m-%dT%H:%M:%S\" ctime($field$)", "description": "convert epoch time to string", "name": "security_content_ctime"}, {"definition": "search *", "description": "Update this macro to limit the output results to filter out false positives. ", "name": "detect_aws_console_login_by_user_from_new_city_filter"}], "lookups": [{"description": "A table of users seen doing console logins, and the first and last time that the activity was observed", "collection": "previously_seen_users_console_logins", "name": "previously_seen_users_console_logins", "fields_list": "_key, firstTime, lastTime, user, src, City, Region, Country"}]}], "count": 696}