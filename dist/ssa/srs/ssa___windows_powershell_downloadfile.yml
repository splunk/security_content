name: Windows Powershell DownloadFile
id: 46440222-81d5-44b1-a376-19dcd70d1b08
version: 1
status: production
description: The following analytic identifies the use of PowerShell downloading a
  file using `DownloadFile` method. This particular method is utilized in many different
  PowerShell frameworks to download files and output to disk. Identify the source
  (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell
  transaction logs are available, review for further details of the implant.
search: ' $main = from source  | eval timestamp = time  | eval metadata_uid = metadata.uid  |
  eval process_pid = process.pid | eval process_file = process.file | eval process_file_path
  = process_file.path | eval process_file_name = process_file.name | eval process_cmd_line
  = process.cmd_line | eval actor_user = actor.user | eval actor_user_name = actor_user.name
  | eval actor_process = actor.process | eval actor_process_pid = actor_process.pid
  | eval actor_process_file = actor_process.file | eval actor_process_file_path =
  actor_process_file.path | eval actor_process_file_name = actor_process_file.name
  | eval device_hostname = device.hostname | where (process_file_name="powershell_ise.exe"
  OR process_file_name="powershell.exe" OR process_file_name="sqltoolsps.exe" OR process_file_name="sqlps.exe"
  OR process_file_name="pwsh.exe" OR process_file_name="pwsh.exe") AND match(process_cmd_line,
  /(?i)downloadfile/)=true 
  | eval devices = [{"hostname": device_hostname, "type_id": 0, "uuid": device.uuid}],
    time = timestamp,
    evidence = {"process.pid": process_pid, "process.file.path": process_file_path, "process.file.name": process_file_name, "process.cmd_line": process_cmd_line, "actor.user.name": actor_user_name, "actor.process.pid": actor_process_pid, "actor.process.file.path": actor_process_file_path, "actor.process.file.name": actor_process_file_name, "device.hostname": device_hostname},
    message = "Windows Powershell DownloadFile has been triggered on " + device_hostname + " by " + actor_user_name + ".",
    users = [{"name": actor_user_name, "uid": actor_user.uid}],
    activity_id = 1,
    cis_csc = [{"control": "CIS 10", "version": 8}], 
    analytic_stories = ["Malicious PowerShell", "Ingress Tool Transfer", "Log4Shell CVE-2021-44228"],
    class_name = "Detection Report", 
    confidence = 70,
    confidence_id = 3,
    duration = 0, 
    impact = 50,
    impact_id = 3,
    kill_chain = [{"phase": "Actions on Objectives", "phase_id": 7}],
    nist = ["DE.AE"], 
    risk_level = "Low", 
    category_uid = 2,
    class_uid = 102001,
    risk_level_id = 1,
    risk_score = 35,
    severity_id = 0,
    rule = {"name": "Windows Powershell DownloadFile", "uid": "46440222-81d5-44b1-a376-19dcd70d1b08", "type": "Streaming"},
    metadata = {"customer_uid": metadata.customer_uid, "product": {"name": "Behavior Analytics", "vendor_name": "Splunk"}, "version": "1.0.0-rc.2", "logged_time": time()},
    type_uid = 10200101,
    start_time = timestamp,
    end_time = timestamp
  | fields metadata, rule, activity_id, analytic_stories, cis_csc, category_uid, class_name, class_uid, confidence, confidence_id, devices, duration, time, evidence, impact, impact_id, kill_chain, message, nist, observables, risk_level, risk_level_id, risk_score, severity_id, type_uid, users, start_time, end_time 
  | into sink; '
how_to_implement: To successfully implement this search you need to be ingesting information
  on process that include the name of the process responsible for the changes from
  your endpoints into the `Endpoint` datamodel in the `Processes` node. In addition,
  confirm the latest CIM App 4.20 or higher is installed and the latest TA for the
  endpoint product.
known_false_positives: False positives may be present and filtering will need to occur
  by parent process or command line argument. It may be required to modify this query
  to an EDR product for more granular coverage.
references:
- https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-5.0
- https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1059.001/T1059.001.md
tags:
  required_fields:
  - process.pid
  - process.file.path
  - process.file.name
  - process.cmd_line
  - actor.user.name
  - actor.process.pid
  - actor.process.file.path
  - actor.process.file.name
  - device.hostname
  risk_score: 35
  security_domain: endpoint
  risk_severity: low
  research_site_url: https://research.splunk.com/endpoint/46440222-81d5-44b1-a376-19dcd70d1b08/
  event_schema: ocsf
  mappings:
  - ocsf: process.pid
    cim: process_id
  - ocsf: process.file.path
    cim: process_path
  - ocsf: process.file.name
    cim: process_name
  - ocsf: process.cmd_line
    cim: process
  - ocsf: actor.user.name
    cim: user
  - ocsf: actor.process.pid
    cim: parent_process_id
  - ocsf: actor.process.file.path
    cim: parent_process_path
  - ocsf: actor.process.file.name
    cim: parent_process_name
  - ocsf: device.hostname
    cim: dest
  annotations:
    analytic_story:
    - Malicious PowerShell
    - Ingress Tool Transfer
    - Log4Shell CVE-2021-44228
    cis20:
    - CIS 10
    kill_chain_phases:
    - Actions on Objectives
    mitre_attack_id:
    - T1020
    nist:
    - DE.AE
test:
  name: Windows Powershell DownloadFile Unit Test
  tests:
  - name: Windows Powershell DownloadFile
    attack_data:
    - file_name: downloadfile_windows-security.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/atomic_red_team/downloadfile_windows-security.log
      source: WinEventLog:Security
runtime: SPL2
internalVersion: 2
