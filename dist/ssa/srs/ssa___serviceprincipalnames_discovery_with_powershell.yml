name: ServicePrincipalNames Discovery with PowerShell
id: 54d7a7b1-c60f-431e-992d-b61382ab6b64
version: 2
status: validation
detection_type: STREAMING
description: 'The following analytic identifies `powershell.exe` usage, using Script
  Block Logging EventCode 4104, related to querying the domain for Service Principle
  Names. typically, this is a precursor activity related to kerberoasting or the silver
  ticket attack. \

  What is a ServicePrincipleName? \

  A service principal name (SPN) is a unique identifier of a service instance. SPNs
  are used by Kerberos authentication to associate a service instance with a service
  logon account. This allows a client application to request that the service authenticate
  an account even if the client does not have the account name.\

  The following analytic identifies the use of KerberosRequestorSecurityToken class
  within the script block. Using .NET System.IdentityModel.Tokens.KerberosRequestorSecurityToken
  class in PowerShell is the equivelant of using setspn.exe. \

  During triage, review parallel processes for further suspicious activity.'
search: ' $main = from source  | eval timestamp = time  | eval metadata_uid = metadata.uid  |
  eval device_hostname = device.hostname | eval process_file = process.file | eval
  process_file_path = process_file.path | eval process_uid = process.uid | eval process_cmd_line
  = process.cmd_line | eval actor_user = actor.user | eval actor_user_uid = actor_user.uid
  | where match(process_cmd_line, /(?i)KerberosRequestorSecurityToken/)=true 
  | eval devices = [{"hostname": device_hostname, "type_id": 0, "uuid": device.uuid}],
    time = timestamp,
    evidence = {"device.hostname": device_hostname, "process.file.path": process_file_path, "process.uid": process_uid, "process.cmd_line": process_cmd_line, "actor.user.uid": actor_user_uid, "sourceType": metadata.source_type, "source": metadata.source},
    message = "ServicePrincipalNames Discovery with PowerShell has been triggered on " + device_hostname + " by " + "Unknown" + ".",
    users = [{"name": "Unknown", "uuid": actor_user.uuid, "uid": actor_user.uid}],
    activity_id = 1,
    cis_csc = [{"control": "CIS 10", "version": 8}], 
    analytic_stories = ["Active Directory Discovery", "Active Directory Kerberos Attacks", "Malicious PowerShell", "Active Directory Privilege Escalation"],
    class_name = "Detection Report", 
    confidence = 100,
    confidence_id = 3,
    duration = 0, 
    impact = 80,
    impact_id = 5,
    kill_chain = [{"phase": "Exploitation", "phase_id": 4}],
    nist = ["DE.AE"], 
    risk_level = "Critical", 
    category_uid = 2,
    class_uid = 102001,
    risk_level_id = 4,
    risk_score = 80,
    severity_id = 0,
    rule = {"name": "ServicePrincipalNames Discovery with PowerShell", "uid": "54d7a7b1-c60f-431e-992d-b61382ab6b64", "type": "Streaming"},
    metadata = {"customer_uid": metadata.customer_uid, "product": {"name": "Behavior Analytics", "vendor_name": "Splunk"}, "version": "1.0.0-rc.2", "logged_time": time()},
    type_uid = 10200101,
    start_time = timestamp,
    end_time = timestamp
  | fields metadata, rule, activity_id, analytic_stories, cis_csc, category_uid, class_name, class_uid, confidence, confidence_id, devices, duration, time, evidence, impact, impact_id, kill_chain, message, nist, observables, risk_level, risk_level_id, risk_score, severity_id, type_uid, users, start_time, end_time 
  | into sink; '
how_to_implement: To successfully implement this analytic, you will need to enable
  PowerShell Script Block Logging on some or all endpoints. Additional setup here
  https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.
known_false_positives: False positives should be limited, however filter as needed.
references:
- https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names
- https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8
- https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/t1208-kerberoasting
- https://strontic.github.io/xcyclopedia/library/setspn.exe-5C184D581524245DAD7A0A02B51FD2C2.html
- https://attack.mitre.org/techniques/T1558/003/
- https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx
- https://web.archive.org/web/20220212163642/https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/
- https://blog.zsec.uk/paving-2-da-wholeset/
- https://msitpros.com/?p=3113
- https://adsecurity.org/?p=3466
- https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.
- https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63
- https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf
- https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/
tags:
  required_fields:
  - device.hostname
  - process.file.path
  - process.uid
  - process.cmd_line
  - actor.user.uid
  risk_score: 80
  security_domain: endpoint
  risk_severity: high
  research_site_url: https://research.splunk.com/endpoint/54d7a7b1-c60f-431e-992d-b61382ab6b64/
  event_schema: ocsf
  mappings:
  - ocsf: device.hostname
    cim: dest
  - ocsf: process.file.path
    cim: process_path
  - ocsf: process.uid
    cim: process_id
  - ocsf: process.cmd_line
    cim: process
  - ocsf: actor.user.uid
    cim: user_id
  annotations:
    analytic_story:
    - Active Directory Discovery
    - Active Directory Kerberos Attacks
    - Malicious PowerShell
    - Active Directory Privilege Escalation
    cis20:
    - CIS 10
    kill_chain_phases:
    - Exploitation
    mitre_attack_id:
    - T1558.003
    nist:
    - DE.CM
test:
  name: ServicePrincipalNames Discovery with PowerShell Unit Test
  tests:
  - name: ServicePrincipalNames Discovery with PowerShell
    attack_data:
    - file_name: sbl_xml.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/sbl_xml.log
      source: XmlWinEventLog
runtime: SPL2
internalVersion: 2
