name: Windows Exchange PowerShell Module Usage
id: 1118bc65-b0c7-4589-bc2f-ad6802fd0909
version: 4
status: production
detection_type: STREAMING
description: 'The following analytic identifies the usage of Exchange PowerShell modules
  that were recently used for a proof of concept related to ProxyShell. Currently,
  there is no active data shared or data we could re-produce relate to this part of
  the ProxyShell chain of exploits.

  Inherently, the usage of the modules is not malicious, but reviewing parallel processes,
  and user, of the session will assist with determining the intent.

  Module - New-MailboxExportRequest will begin the process of exporting contents of
  a primary mailbox or archive to a .pst file.

  Module - New-managementroleassignment can assign a management role to a management
  role group, management role assignment policy, user, or universal security group
  (USG).

  Module - New-MailboxSearch cmdlet to create a mailbox search and either get an estimate
  of search results, place search results on In-Place Hold or copy them to a Discovery
  mailbox. You can also place all contents in a mailbox on hold by not specifying
  a search query, which accomplishes similar results as Litigation Hold. \ Module
  - Get-Recipient cmdlet to view existing recipient objects in your organization.
  This cmdlet returns all mail-enabled objects (for example, mailboxes, mail users,
  mail contacts, and distribution groups).'
search: ' $main = from source  | eval timestamp = time  | eval metadata_uid = metadata.uid  |
  eval device_hostname = device.hostname | eval process_file = process.file | eval
  process_file_path = process_file.path | eval process_uid = process.uid | eval process_cmd_line
  = process.cmd_line | eval actor_user = actor.user | eval actor_user_uid = actor_user.uid
  | where match(process_cmd_line, /(?i)get-recipient/)=true OR match(process_cmd_line,
  /(?i)new-mailboxsearch/)=true OR match(process_cmd_line, /(?i)new-managementroleassignment/)=true
  OR match(process_cmd_line, /(?i)new-mailboxexportrequest/)=true 
  | eval devices = [{"hostname": device_hostname, "type_id": 0, "uuid": device.uuid}],
    time = timestamp,
    evidence = {"device.hostname": device_hostname, "process.file.path": process_file_path, "process.uid": process_uid, "process.cmd_line": process_cmd_line, "actor.user.uid": actor_user_uid, "sourceType": metadata.source_type, "source": metadata.source},
    message = "Windows Exchange PowerShell Module Usage has been triggered on " + device_hostname + " by " + "Unknown" + ".",
    users = [{"name": "Unknown", "uuid": actor_user.uuid, "uid": actor_user.uid}],
    activity_id = 1,
    cis_csc = [{"control": "CIS 10", "version": 8}], 
    analytic_stories = ["ProxyShell", "CISA AA22-264A"],
    class_name = "Detection Report", 
    confidence = 80,
    confidence_id = 3,
    duration = 0, 
    impact = 40,
    impact_id = 3,
    kill_chain = [{"phase": "Installation", "phase_id": 5}],
    nist = ["DE.AE"], 
    risk_level = "Low", 
    category_uid = 2,
    class_uid = 102001,
    risk_level_id = 1,
    risk_score = 32,
    severity_id = 0,
    rule = {"name": "Windows Exchange PowerShell Module Usage", "uid": "1118bc65-b0c7-4589-bc2f-ad6802fd0909", "type": "Streaming"},
    metadata = {"customer_uid": metadata.customer_uid, "product": {"name": "Behavior Analytics", "vendor_name": "Splunk"}, "version": "1.0.0-rc.2", "logged_time": time()},
    type_uid = 10200101,
    start_time = timestamp,
    end_time = timestamp
  | fields metadata, rule, activity_id, analytic_stories, cis_csc, category_uid, class_name, class_uid, confidence, confidence_id, devices, duration, time, evidence, impact, impact_id, kill_chain, message, nist, observables, risk_level, risk_level_id, risk_score, severity_id, type_uid, users, start_time, end_time 
  | into sink; '
how_to_implement: To successfully implement this analytic, you will need to enable
  PowerShell Script Block Logging on some or all endpoints. Additional setup here
  https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.
  This will only work with Multiline event logs, not XML.
known_false_positives: Administrators or power users may use this PowerShell commandlet
references:
- https://docs.microsoft.com/en-us/powershell/module/exchange/new-mailboxexportrequest?view=exchange-ps
- https://docs.microsoft.com/en-us/powershell/module/exchange/new-managementroleassignment?view=exchange-ps
- https://blog.orange.tw/2021/08/proxyshell-a-new-attack-surface-on-ms-exchange-part-3.html
- https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell
- https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/
- https://www.cisa.gov/uscert/ncas/alerts/aa22-264a
- https://learn.microsoft.com/en-us/powershell/module/exchange/new-mailboxsearch?view=exchange-ps
- https://learn.microsoft.com/en-us/powershell/module/exchange/get-recipient?view=exchange-ps
- https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/
tags:
  required_fields:
  - device.hostname
  - process.file.path
  - process.uid
  - process.cmd_line
  - actor.user.uid
  risk_score: 32
  security_domain: endpoint
  risk_severity: low
  research_site_url: https://research.splunk.com/endpoint/1118bc65-b0c7-4589-bc2f-ad6802fd0909/
  event_schema: ocsf
  mappings:
  - ocsf: device.hostname
    cim: dest
  - ocsf: process.file.path
    cim: process_path
  - ocsf: process.uid
    cim: process_id
  - ocsf: process.cmd_line
    cim: process
  - ocsf: actor.user.uid
    cim: user_id
  annotations:
    analytic_story:
    - ProxyShell
    - CISA AA22-264A
    cis20:
    - CIS 10
    kill_chain_phases:
    - Installation
    mitre_attack_id:
    - T1059
    - T1059.001
    nist:
    - DE.CM
test:
  name: Windows Exchange PowerShell Module Usage Unit Test
  tests:
  - name: Windows Exchange PowerShell Module Usage
    attack_data:
    - file_name: windows-powershell.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/exchange/windows-powershell.log
      source: XmlWinEventLog
runtime: SPL2
internalVersion: 2
