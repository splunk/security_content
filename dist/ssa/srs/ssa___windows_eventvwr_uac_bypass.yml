name: Windows Eventvwr UAC Bypass
id: 66adff66-90d9-11ec-aba7-acde48001122
version: 1
description: The following search identifies Eventvwr bypass by identifying the registry
  modification into a specific path that eventvwr.msc looks to (but is not valid)
  upon execution. A successful attack will include a suspicious command to be executed
  upon eventvwr.msc loading. Upon triage, review the parallel processes that have
  executed. Identify any additional registry modifications on the endpoint that may
  look suspicious. Remediate as necessary.
search: '| from read_ssa_enriched_events() | where "Endpoint_Registry" IN (_datamodels)
  | eval timestamp=parse_long(ucast(map_get(input_event, "_time"), "string", null)),
  registry_path=lower(ucast(map_get(input_event, "registry_path"), "string", null)),
  registry_hive=lower(ucast(map_get(input_event, "registry_hive"), "string", null)),
  registry_value_name=lower(ucast(map_get(input_event, "registry_value_name"), "string",
  null)), registry_key_name=lower(ucast(map_get(input_event, "parent_process_name"),
  "string", null)), registry_value_type=lower(ucast(map_get(input_event, "registry_value_type"),
  "string", null)), registry_value_data=lower(ucast(map_get(input_event, "registry_value_data"),
  "string", null)), process_guid=lower(ucast(map_get(input_event, "process_guid"),
  "string", null)) | where registry_path IS NOT NULL AND (like (registry_path, "%mscfile\\\\shell\\\\open\\\\command%"))
  | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event,
  "dest_user_id"), "string", null), ucast(map_get(input_event, "dest_device_id"),
  "string", null)) | eval body=create_map(["registry_path", registry_path, "registry_hive",
  registry_hive, "registry_value_name", registry_value_name, "registry_key_name",
  registry_key_name, "registry_value_type", registry_value_type, "registry_value_data",
  registry_value_data, "process_guid", process_guid]) | into write_ssa_detected_events();'
how_to_implement: To successfully implement this search you need to be ingesting information
  on process that include the name of the process responsible for the changes from
  your endpoints into the `Endpoint_Registry` datamodel.
known_false_positives: None known at this time.
references:
- https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md
- https://attack.mitre.org/techniques/T1548/002
- https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/
tags:
  analytic_story:
  - Windows Defense Evasion Tactics
  - IcedID
  - Living Off The Land
  cis20:
  - CIS 14
  kill_chain_phases:
  - Exploitation
  mitre_attack_id:
  - T1548.002
  - T1548
  nist:
  - DE.AE
  required_fields:
  - _time
  - event_id
  - registry_path
  - registry_hive
  - registry_value_name
  - registry_key_name
  - registry_value_type
  - registry_value_data
  - process_guid
  security_domain: endpoint
  risk_severity: high
test:
  name: Windows Eventvwr UAC Bypass Unit Test
  tests:
  - name: Windows Eventvwr UAC Bypass
    file: endpoint/ssa___windows_eventvwr_uac_bypass.yml
    pass_condition: '@count_gt(0)'
    attack_data:
    - file_name: windows-sysmon-registry.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/ssa_eventvwr/windows-sysmon-registry.log
      source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
