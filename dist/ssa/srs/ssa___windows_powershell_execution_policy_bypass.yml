name: Windows Powershell Execution Policy Bypass
id: 1d20daaa-f99e-4770-a25c-e84e8cd32825
version: 1
status: validation
detection_type: STREAMING
description: The following analytic detects the initiation of PowerShell processes
  with parameters specifically designed to bypass the local script execution policy.
  It identifies this behavior by searching for commandline arguments that are commonly
  used in malicious activities to circumvent the built-in security mechanisms of PowerShell.
  This detection is crucial for a Security Operations Center (SOC) as bypassing the
  execution policy can allow attackers to execute arbitrary scripts, leading to unauthorized
  actions, data exfiltration, or further system compromise. The impact of such an
  attack can be significant, potentially resulting in the loss of sensitive information
  or control over critical systems.
search: ' $main = from source  | eval timestamp = time  | eval metadata_uid = metadata.uid  |
  eval process_pid = process.pid | eval process_file = process.file | eval process_file_path
  = process_file.path | eval process_file_name = lower(process_file.name) | eval process_cmd_line
  = process.cmd_line | eval actor_user = actor.user | eval actor_user_name = actor_user.name
  | eval actor_process = actor.process | eval actor_process_pid = actor_process.pid
  | eval actor_process_file = actor_process.file | eval actor_process_file_path =
  actor_process_file.path | eval actor_process_file_name = actor_process_file.name
  | eval device_hostname = device.hostname | where (process_file_name IN ("powershell_ise.exe",
  "powershell.exe", "sqltoolsps.exe", "sqlps.exe", "pwsh.exe", "pwsh.exe")) AND match(process_cmd_line,
  /(?i)Bypass/)=true 
  | eval devices = [{"hostname": device_hostname, "type_id": 0, "uuid": device.uuid}],
    time = timestamp,
    evidence = {"process.pid": process_pid, "process.file.path": process_file_path, "process.file.name": process_file_name, "process.cmd_line": process_cmd_line, "actor.user.name": actor_user_name, "actor.process.pid": actor_process_pid, "actor.process.file.path": actor_process_file_path, "actor.process.file.name": actor_process_file_name, "device.hostname": device_hostname, "sourceType": metadata.source_type, "source": metadata.source},
    message = "Windows Powershell Execution Policy Bypass has been triggered on " + device_hostname + " by " + actor_user_name + ".",
    users = [{"name": actor_user_name, "uuid": actor_user.uuid, "uid": actor_user.uid}],
    activity_id = 1,
    cis_csc = [{"control": "CIS 10", "version": 8}], 
    analytic_stories = ["DHS Report TA18-074A", "HAFNIUM Group", "DarkCrystal RAT", "AsyncRAT", "Volt Typhoon"],
    class_name = "Detection Report", 
    confidence = 60,
    confidence_id = 2,
    duration = 0, 
    impact = 70,
    impact_id = 4,
    kill_chain = [{"phase": "Installation", "phase_id": 5}],
    nist = ["DE.AE"], 
    risk_level = "Medium", 
    category_uid = 2,
    class_uid = 102001,
    risk_level_id = 2,
    risk_score = 42,
    severity_id = 0,
    rule = {"name": "Windows Powershell Execution Policy Bypass", "uid": "1d20daaa-f99e-4770-a25c-e84e8cd32825", "type": "Streaming"},
    metadata = {"customer_uid": metadata.customer_uid, "product": {"name": "Behavior Analytics", "vendor_name": "Splunk"}, "version": "1.0.0-rc.2", "logged_time": time()},
    type_uid = 10200101,
    start_time = timestamp,
    end_time = timestamp
  | fields metadata, rule, activity_id, analytic_stories, cis_csc, category_uid, class_name, class_uid, confidence, confidence_id, devices, duration, time, evidence, impact, impact_id, kill_chain, message, nist, observables, risk_level, risk_level_id, risk_score, severity_id, type_uid, users, start_time, end_time 
  | into sink; '
how_to_implement: The detection is based on data that originates from Endpoint Detection
  and Response (EDR) agents. These agents are designed to provide security-related
  telemetry from the endpoints where the agent is installed. To implement this search,
  you must ingest logs that contain the process GUID, process name, and parent process.
  Additionally, you must ingest complete command-line executions. These logs must
  be processed using the appropriate Splunk Technology Add-ons that are specific to
  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`
  data model. Use the Splunk Common Information Model (CIM) to normalize the field
  names and speed up the data modeling process.
known_false_positives: There may be legitimate reasons to bypass the PowerShell execution
  policy. The PowerShell script being run with this parameter should be validated
  to ensure that it is legitimate.
references:
- https://www.microsoft.com/en-us/security/blog/2023/05/24/volt-typhoon-targets-us-critical-infrastructure-with-living-off-the-land-techniques/
tags:
  required_fields:
  - process.pid
  - process.file.path
  - process.file.name
  - process.cmd_line
  - actor.user.name
  - actor.process.pid
  - actor.process.file.path
  - actor.process.file.name
  - device.hostname
  risk_score: 42
  security_domain: endpoint
  risk_severity: low
  research_site_url: https://research.splunk.com/endpoint/1d20daaa-f99e-4770-a25c-e84e8cd32825/
  event_schema: ocsf
  mappings:
  - ocsf: process.pid
    cim: process_id
  - ocsf: process.file.path
    cim: process_path
  - ocsf: process.file.name
    cim: process_name
  - ocsf: process.cmd_line
    cim: process
  - ocsf: actor.user.name
    cim: user
  - ocsf: actor.process.pid
    cim: parent_process_id
  - ocsf: actor.process.file.path
    cim: parent_process_path
  - ocsf: actor.process.file.name
    cim: parent_process_name
  - ocsf: device.hostname
    cim: dest
  annotations:
    analytic_story:
    - DHS Report TA18-074A
    - HAFNIUM Group
    - DarkCrystal RAT
    - AsyncRAT
    - Volt Typhoon
    cis20:
    - CIS 10
    kill_chain_phases:
    - Installation
    mitre_attack_id:
    - T1059
    - T1059.001
    nist:
    - DE.CM
test:
  name: Windows Powershell Execution Policy Bypass Unit Test
  tests:
  - name: Windows Powershell Execution Policy Bypass
    attack_data:
    - file_name: windows-security.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/encoded_powershell/windows-security.log
      source: XmlWinEventLog:Security
runtime: SPL2
internalVersion: 2
