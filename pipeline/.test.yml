# Save pipeline ID to artifacts so the downstream can do a sanity check
save_pipeline_id:
  stage: test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING != "True"'
      when: on_success
  needs:
    - generate_all_builds
  artifacts:
    when: always
    paths:
      - artifacts/*
    expire_in: 14 days
  script:
    - echo $CI_PIPELINE_ID > artifacts/security_content_pipeline_id.txt

# Install contentctl w/ poetry
.install_contentctl: &install_contentctl
  - pip3 install poetry
  - git submodule update --init contentctl
  - cd contentctl
  - git checkout main
  - poetry install
  - poetry env info --path
  - source `poetry env info --path`/bin/activate
  - cd ..

# GitLab checks out the repo in a HEAD-less state, so we must checkout the source ref for dry-run 
# to work
.checkout_source_branch: &checkout_source_branch
  - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  - git fetch origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  - git checkout $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  - GIT_HEAD=$(git rev-parse HEAD)
  - > 
    if [ $GIT_HEAD = $CI_COMMIT_SHA ]; then
      echo "HEAD ${GIT_HEAD} matches pipline commit sha ${CI_COMMIT_SHA}";
    else
      echo "HEAD ${GIT_HEAD} DOES NOT match pipline commit sha ${CI_COMMIT_SHA}";
      exit 1;
    fi

# Generate the list of detections changed in an MR for the downstream
dry_run_escu:
  stage: test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
  needs:
    - generate_all_builds
  artifacts:
    when: always
    paths:
      - artifacts/*
    reports:
      dotenv: build.env
    expire_in: 14 days
  before_script:
    - *checkout_source_branch
    - *install_contentctl
  script:
    - contentctl test --dry_run --mode changes --target_branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME --test_branch $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - deactivate
    - pip3 install PyYAML==6.0.1
    - python pipeline/tools/check_num_detections.py -c dry_run_config/contentctl_test.yml -d build.env
  after_script:
    - cp dry_run_config/contentctl_test.yml artifacts/mr_contentctl_test.yml

# Trigger a downstream test (non-MR)
trigger_escu_test:
  stage: test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
      when: on_success
  inherit:
    variables: false
  variables:
    SECURITY_CONTENT_PIPELINE_ID: $CI_PIPELINE_ID
    SECURITY_CONTENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
    SECURITY_CONTENT_GIT_REF: $CI_COMMIT_REF_NAME
    SECURITY_CONTENT_GIT_COMMIT_SHA: $CI_COMMIT_SHA
    ESCU_BUILD_PATH: artifacts/DA-ESS-ContentUpdate-latest.tar.gz
    BUILD_NAME: DA-ESS-ContentUpdate
  needs:
    - save_pipeline_id
  trigger:
    project: securitycontent/security-content-automation
    branch: main
    strategy: depend

# Trigger a downstream test (MR) -> extends trigger_escu_test
trigger_escu_test_mr:
  extends: trigger_escu_test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
  variables:
    SECURITY_CONTENT_PIPELINE_ID: $CI_PIPELINE_ID
    SECURITY_CONTENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
    SECURITY_CONTENT_GIT_REF: $CI_COMMIT_REF_NAME
    SECURITY_CONTENT_GIT_COMMIT_SHA: $CI_COMMIT_SHA
    SECURITY_CONTENT_MR_ID: $CI_MERGE_REQUEST_ID
    SECURITY_CONTENT_MR_IID: $CI_MERGE_REQUEST_IID
    SECURITY_CONTENT_MR_REF_PATH: $CI_MERGE_REQUEST_REF_PATH
    SECURITY_CONTENT_MR_EVENT_TYPE: $CI_MERGE_REQUEST_EVENT_TYPE
    SECURITY_CONTENT_SOURCE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    SECURITY_CONTENT_TARGET_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    SECURITY_CONTENT_SOURCE_COMMIT: $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    SECURITY_CONTENT_TARGET_COMMIT: $CI_MERGE_REQUEST_TARGET_BRANCH_SHA
    SECURITY_CONTENT_MR_TEST_CONFIG_PATH: artifacts/mr_contentctl_test.yml
    ESCU_BUILD_PATH: artifacts/DA-ESS-ContentUpdate-latest.tar.gz
    BUILD_NAME: DA-ESS-ContentUpdate
    NUM_INSTANCES: "-1"
  needs:
    - dry_run_escu
    - save_pipeline_id

# Trigger SSA test
trigger_ssa_test:
  stage: test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG
      when: on_success 
  inherit:
    variables: false
  variables:
    SECURITY_CONTENT_PIPELINE_ID: $CI_PIPELINE_ID
    SECURITY_CONTENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
    SECURITY_CONTENT_GIT_REF: $CI_COMMIT_REF_NAME
    SECURITY_CONTENT_GIT_COMMIT_SHA: $CI_COMMIT_SHA
    SECURITY_CONTENT_GIT_COMMIT_TAG: $CI_COMMIT_TAG
    SSA_BUILD_PATH: artifacts/SSA-Content-latest.tar.gz
    BUILD_NAME: SSA_Content
  needs:
    - save_pipeline_id
  trigger:
    project: securitycontent/security-content-automation
    branch: main
    strategy: depend

# Retrieve downstream results (non-MR)
get_artifacts:
  stage: test
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
      when: always
  needs:
    - trigger_escu_test
  artifacts:
    when: always
    paths:
      - downstream_artifacts/*
    reports:
      junit: downstream_artifacts/contentctl_summary.xml
    expire_in: 14 days
  before_script:
    - mkdir downstream_artifacts
    - mkdir downstream_artifacts_tmp
    - pip3 install requests==2.31.0
  script:
    - python3 pipeline/tools/get_artifacts.py -t trigger_escu_test --local-token $PIPELINE_READ_TOKEN --down-token $SCA_READ_TOKEN --down-job execute-testcases -o artifacts.zip
  after_script:
    - unzip artifacts.zip -d downstream_artifacts_tmp
    - mv downstream_artifacts_tmp/artifacts/results/contentctl_summary.xml downstream_artifacts/contentctl_summary.xml
    - mv downstream_artifacts_tmp/artifacts/results/contentctl_summary.yml downstream_artifacts/contentctl_summary.yml

# Retrieve downstream results (MR) -> extends get_artifacts
get_artifacts_mr:
  extends: get_artifacts
  rules:
    - if: '$SKIP_DOWNSTREAM_TESTING == "True"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
  needs:
    - trigger_escu_test_mr
    - dry_run_escu
  script:
    - | 
      if [ $SKIP_TESTING == "True" ]; then
        echo "Nothing was tested, skipping artifact retrieval. after_script commands will fail, but that's ok"
      else
        python3 pipeline/tools/get_artifacts.py -t trigger_escu_test_mr --local-token $PIPELINE_READ_TOKEN --down-token $SCA_READ_TOKEN --down-job execute-testcases-mr -o artifacts.zip
      fi
