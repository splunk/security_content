# Run reporting
reporting:
  stage: release
  needs:
  - app_inspect
  variables:
    BUCKET: "security-content"
  before_script:
    - pip3 install poetry
    - git submodule update --init contentctl
    - cd contentctl
    - git checkout main
    - poetry install
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    # Temporary workaround until we use pip based install for contentctl, moving the file to contentctl directory
    - cp ../contentctl.yml .
    - poetry run contentctl report  --path ../ 
    - cd ..
    - aws s3 cp reporting s3://$BUCKET/reporting --recursive --exclude "*" --include "*.svg"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success

# Update Attack Range ESCU App
attack_range_escu_app:
  stage: release
  needs:
  - app_inspect
  artifacts:
    when: always
    paths:
      - artifacts/*
    expire_in: 14 days
  variables:
    BUCKET: "attack-range-appbinaries"
  before_script:
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - aws s3 cp artifacts/DA-ESS-ContentUpdate-latest.tar.gz  s3://$BUCKET/
    - aws s3api put-object-acl --bucket $BUCKET --key DA-ESS-ContentUpdate-latest.tar.gz --acl public-read
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success

# Push SSE security content Json files to Artifactory
push_sse_json_to_artifactory:
  stage: release
  needs:
    - github_push_develop
  before_script:
    - git clone --depth=1 --single-branch --branch=master https://github.com/redcanaryco/atomic-red-team.git
    - 'NEW_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//")'
    - 'echo "Updating contentctl.yml version: $NEW_VERSION"'
    # - 'sed -i "s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - 'sed -i "/app:/,/apps:/s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - pip3 install poetry
    - git submodule update --init contentctl
    - cd contentctl
    - git checkout main
    - poetry install
    # Temporary workaround until we use pip based install for contentctl, moving the file from root to contentctl directory
    - cp ../contentctl.yml .
    # - poetry run contentctl -p ../ --enable_enrichment build -t api
    - poetry run contentctl build --path ../ --enrichments
    - cd ..
    - tar -czvf sse.tar.gz dist/api/*
  script:
    - creds-helper init
    - eval $(creds-helper artifactory --eval $ARTIFACTORY_GENERIC_WRITE_ROLE)
    - curl -u $ARTIFACTORY_AUTHORIZATION -X PUT $ARTIFACTORY_BASE_URL/generic/threat-research-security-content/$CI_COMMIT_TAG/$CI_PIPELINE_ID/sse.tar.gz -T sse.tar.gz
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'

trigger_downstream_sse_json_release:
  stage: release
  needs:
    - push_sse_json_to_artifactory
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
  inherit:
    variables: false
  variables:
    UPSTREAM_ESCU_VERSION: $CI_COMMIT_TAG
    IS_DOWNSTREAM_SSE_JSON_RELEASE: "True"
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    project: securitycontent/security-content-automation
    branch: main
    strategy: depend

# Create Package GitLab
release_job:
  stage: release
  needs:
  - app_inspect
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release_job"
  # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success

# Updating Gitlab dist
update_gitlab_dist:
  stage: release
  needs:
  - release_job
  artifacts:
    when: always
    paths:
      - artifacts/*
    expire_in: 14 days
  before_script:
    - git clone --depth=1 --single-branch --branch=master https://github.com/redcanaryco/atomic-red-team.git
    - 'echo "Current CI_COMMIT_TAG: $CI_COMMIT_TAG"'
    - 'NEW_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//")'
    - 'echo "Updating contentctl.yml version: $NEW_VERSION"'
    # - 'sed -i "s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - 'sed -i "/app:/,/apps:/s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - pip3 install poetry
    - git submodule update --init contentctl
    - cd contentctl
    - git checkout main
    - poetry install
    
  script:
    # - poetry run contentctl -p ../ --enable_enrichment build
    # - poetry run contentctl -p ../ --enable_enrichment build -t ssa
    # - poetry run contentctl -p ../ --enable_enrichment build -t api
    # Temporary workaround until we use pip based install for contentctl, moving the file from root to contentctl directory
    - cp ../contentctl.yml .
    - poetry run contentctl build --path ../ --enrichments
    - cd ..
    - echo "Updating dist build scripts in a branch"
    - git config --global user.email "research@splunk.com"
    - git config --global user.name "research-bot"
    - git remote set-url origin https://PUSH_DIST_VIA_CI:$PUSH_DIST_VIA_CI@cd.splunkdev.com/threat-research/security_content.git
    - git fetch --all
    - git checkout develop
    - git add contentctl.yml
    - git add dist/api/*
    - git add dist/DA-ESS-ContentUpdate/*
    - git add dist/ssa/*
    - git commit -m "Auto-update dist/* files for ESCU,BA,API via release job for tag $CI_COMMIT_TAG [skip ci]"
    - git push origin develop
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success

# Sync changes to GitHub, by creating a branch and push the content and create a PR
github_push_develop:
  stage: release
  needs:
  - update_gitlab_dist
  variables:
    BRANCH: "gitlab_release_$CI_COMMIT_TAG"
  before_script:
    - git clone --depth=1 --single-branch --branch=master https://github.com/redcanaryco/atomic-red-team.git
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - pip3 install poetry
    - git submodule update --init contentctl
    - cd contentctl
    - git checkout main
    - poetry install
  script:
    - cd ..
    - git config user.email "research@splunk.com"
    - git config user.name "research bot"
    - git remote add github_origin git@github.com:splunk/security_content.git
    - git fetch github_origin
    - git checkout -b $BRANCH
    - git config merge.submodule ignore
    - git merge github_origin/develop -X theirs || true
    # Update contentctl.yml version after merge with theirs
    - 'NEW_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//")'
    - 'echo "Updating contentctl.yml version: $NEW_VERSION"'
    # - 'sed -i "s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - 'sed -i "/app:/,/apps:/s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - cd contentctl && git checkout main && cd ..
    - git add contentctl
    - cd contentctl/
    # Temporary workaround until we use pip based install for contentctl, moving the file from root to contentctl directory
    - cp ../contentctl.yml .
    - poetry run contentctl build --path ../ --enrichments
    # - poetry run contentctl -p ../ --enable_enrichment build
    # - poetry run contentctl -p ../ --enable_enrichment build -t ssa
    # - poetry run contentctl -p ../ --enable_enrichment build -t api
    - cd ..
    - git add .
    - git status
    - git commit -m "Updating Github with Content from ESCU - $CI_COMMIT_TAG"
    - git push -u github_origin $BRANCH
    # Automatically create a Github PR
    - 'curl -X POST -H "Authorization: token $CREATE_GH_RELEASE_PR" -H "Accept: application/vnd.github.v3+json" -d "{\"title\":\"Release $CI_COMMIT_TAG\", \"body\":\"This PR contains content for ESCU - $CI_COMMIT_TAG\", \"head\":\"$BRANCH\", \"base\":\"develop\"}" https://api.github.com/repos/splunk/security_content/pulls'
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success