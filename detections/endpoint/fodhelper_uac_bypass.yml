name: FodHelper UAC Bypass
id: 909f8fd8-7ac8-11eb-a1f3-acde48001122
version: 1
date: '2021-03-01'
author: Michael Haag, Splunk
type: TTP
datamodel:
- Endpoint
description: 'Fodhelper.exe has a known UAC bypass as it attempts to look for specific
  registry keys upon execution, that do not exist. Therefore, an attacker can write
  its malicious commands in these registry keys to be executed by fodhelper.exe with
  the highest privilege. \

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command`\

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute`\

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command\(default)`\

  Upon triage, fodhelper.exe will have a child process and read access will occur
  on the registry keys. Isolate the endpoint and review parallel processes for additional
  behavior.'
search: '| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time)
  as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=fodhelper.exe
  by Processes.dest Processes.user Processes.parent_process Processes.process_name
  Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)`
  | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `fodhelper_uac_bypass_filter`'
how_to_implement: To successfully implement this search you need to be ingesting information
  on process that include the name of the process responsible for the changes from
  your endpoints into the `Endpoint` datamodel in the `Processes` node.
known_false_positives: Limited to no false positives are expected.
references:
- https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md
- https://github.com/gushmazuko/WinBypass/blob/master/FodhelperBypass.ps1
- https://attack.mitre.org/techniques/T1548/002
tags:
  analytic_story:
  - Windows Defense Evasion Tactics
  - IcedID
  automated_detection_testing: passed
  confidence: 90
  context:
  - Source:Endpoint
  - Stage:Privilege Escalation
  dataset:
  - https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/atomic_red_team/windows-sysmon.log
  impact: 90
  kill_chain_phases:
  - Exploitation
  - Privilege Escalation
  message: Suspcious registy keys added by process fodhelper.exe (process_id- $process_id),
    with a parent_process of $parent_process_name$ that has been executed on $dest$
    by $user$.
  mitre_attack_id:
  - T1112
  - T1548.002
  - T1548
  observable:
  - name: user
    type: User
    role:
    - Victim
  - name: dest
    type: Endpoint
    role:
    - Victim
  - name: parent_process_name
    type: Process Name
    role:
    - Parent Process
    - Attacker
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - Processes.parent_process_name
  - Processes.dest
  - Processes.user
  - Processes.parent_process
  - Processes.process_name
  - Processes.process
  - Processes.process_id
  - Processes.parent_process_id
  risk_score: 81
  security_domain: endpoint
  supported_tas:
  - Splunk_TA_microsoft_sysmon
