name: Suspicious msbuild path
id: f5198224-551c-11eb-ae93-0242ac130002
version: 3
date: '2023-07-10'
author: Michael Haag, Splunk
status: production
type: TTP
description: The following analytic identifies msbuild.exe executing from a non-standard
  path. Msbuild.exe is natively found in C:\Windows\Microsoft.NET\Framework\v4.0.30319
  and C:\Windows\Microsoft.NET\Framework64\v4.0.30319. Instances of Visual Studio
  will run a copy of msbuild.exe. A moved instance of MSBuild is suspicious, however
  there are instances of build applications that will move or use a copy of MSBuild.
data_source:
- Sysmon Event ID 1
search: '| tstats `security_content_summariesonly` count values(Processes.process_name)
  as process_name values(Processes.process) as process min(_time) as firstTime max(_time)
  as lastTime from datamodel=Endpoint.Processes where `process_msbuild` AND (Processes.process_path!=*\\framework*\\v*\\*)
  by Processes.dest Processes.original_file_name Processes.parent_process Processes.user
  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|
  `suspicious_msbuild_path_filter`'
how_to_implement: The detection is based on data that originates from Endpoint Detection
  and Response (EDR) agents. These agents are designed to provide security-related
  telemetry from the endpoints where the agent is installed. To implement this search,
  you must ingest logs that contain the process GUID, process name, and parent process.
  Additionally, you must ingest complete command-line executions. These logs must
  be processed using the appropriate Splunk Technology Add-ons that are specific to
  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`
  data model. Use the Splunk Common Information Model (CIM) to normalize the field
  names and speed up the data modeling process.
known_false_positives: Some legitimate applications may use a moved copy of msbuild.exe,
  triggering a false positive. Baselining of MSBuild.exe usage is recommended to better
  understand it's path usage. Visual Studio runs an instance out of a path that will
  need to be filtered on.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Msbuild/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1127.001/T1127.001.md
tags:
  analytic_story:
  - Trusted Developer Utilities Proxy Execution MSBuild
  - Masquerading - Rename System Utilities
  - Living Off The Land
  - Cobalt Strike
  - BlackByte Ransomware
  - Graceful Wipe Out Attack
  asset_type: Endpoint
  confidence: 70
  impact: 70
  message: Msbuild.exe ran from an uncommon path on $dest$ execyted by $user$
  mitre_attack_id:
  - T1036
  - T1127
  - T1036.003
  - T1127.001
  observable:
  - name: dest
    type: Endpoint
    role:
    - Victim
  - name: user
    type: User
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - Processes.dest
  - Processes.user
  - Processes.parent_process_name
  - Processes.parent_process
  - Processes.original_file_name
  - Processes.process_name
  - Processes.process
  - Processes.process_id
  - Processes.parent_process_path
  - Processes.process_path
  - Processes.parent_process_id
  risk_score: 49
  security_domain: endpoint
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1127.001/windows-sysmon.log
    source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
    sourcetype: xmlwineventlog
    update_timestamp: true
