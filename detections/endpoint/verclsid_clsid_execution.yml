name: Verclsid CLSID Execution
id: 61e9a56a-20fa-11ec-8ba3-acde48001122
version: 1
date: '2021-09-29'
author: Teoderick Contreras, Splunk
status: production
type: Hunting
description: This analytic is to detect a possible abuse of verclsid to execute malicious
  file through generate CLSID. This process is a normal application of windows to
  verify the CLSID COM object before it is instantiated by Windows Explorer. This
  hunting query can be a good pivot point to analyze what is he CLSID or COM object
  pointing too to check if it is a valid application or not.
data_source:
- Sysmon EventID 1
search: '| tstats `security_content_summariesonly` values(Processes.process) as process
  values(Processes.parent_process) as parent_process values(Processes.process_id)
  as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes
  where `process_verclsid` AND Processes.process="*/S*" Processes.process="*/C*" AND  Processes.process="*{*"
  AND Processes.process="*}*" by  Processes.process_name Processes.original_file_name
  Processes.dest Processes.user Processes.parent_process_name Processes.parent_process
  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`
  | `verclsid_clsid_execution_filter`'
how_to_implement: The detection is based on data that originates from Endpoint Detection
  and Response (EDR) agents. These agents are designed to provide security-related
  telemetry from the endpoints where the agent is installed. To implement this search,
  you must ingest logs that contain the process GUID, process name, and parent process.
  Additionally, you must ingest complete command-line executions. These logs must
  be processed using the appropriate Splunk Technology Add-ons that are specific to
  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`
  data model. Use the Splunk Common Information Model (CIM) to normalize the field
  names and speed up the data modeling process.
known_false_positives: windows can used this application for its normal COM object
  validation.
references:
- https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5
- https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/
tags:
  analytic_story:
  - Unusual Processes
  asset_type: Endpoint
  confidence: 50
  impact: 50
  message: process $process_name$ to execute possible clsid commandline $process$
    in $dest$
  mitre_attack_id:
  - T1218.012
  - T1218
  observable:
  - name: dest
    type: Hostname
    role:
    - Victim
  - name: user
    type: User
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - Processes.dest
  - Processes.user
  - Processes.parent_process_name
  - Processes.parent_process
  - Processes.original_file_name
  - Processes.process_name
  - Processes.process
  - Processes.process_id
  - Processes.parent_process_path
  - Processes.process_path
  - Processes.parent_process_id
  risk_score: 25
  security_domain: endpoint
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1218.012/verclsid_exec/sysmon.log
    source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
    sourcetype: xmlwineventlog
