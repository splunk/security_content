name: Windows Ldifde Directory Object Behavior
id: 35cd29ca-f08c-4489-8815-f715c45460d3
version: 1
date: '2023-05-25'
author: Michael Haag, Splunk
status: production
type: TTP
data_source:
- Sysmon EventID 1
description: The following analytic identifies the use of Ldifde.exe, which provides
  the ability to create, modify, or delete LDAP directory objects. Natively, the binary
  is only installed on a domain controller. However, adversaries or administrators
  may install the Windows Remote Server Admin Tools for ldifde.exe. Ldifde.exe is
  a Microsoft Windows command-line utility used to import or export LDAP directory
  entries. LDAP stands for Lightweight Directory Access Protocol, which is a protocol
  used for accessing and managing directory information services over an IP network.
  LDIF, on the other hand, stands for LDAP Data Interchange Format, a standard plain-text
  data interchange format for representing LDAP directory entries. -i This is a flag
  used with Ldifde.exe to denote import mode. In import mode, Ldifde.exe takes an
  LDIF file and imports its contents into the LDAP directory. The data in the LDIF
  file might include new objects to be created, or modifications or deletions to existing
  objects. -f This flag is used to specify the filename of the LDIF file that Ldifde.exe
  will import from (in the case of the -i flag) or export to (without the -i flag).
  For example, if you wanted to import data from a file called data.ldif, you would
  use the command ldifde -i -f data.ldif. Keep in mind that while the use of Ldifde.exe
  is legitimate in many contexts, it can also be used maliciously. For instance, an
  attacker who has gained access to a domain controller could potentially use Ldifde.exe
  to export sensitive data or make unauthorized changes to the directory. Therefore,
  it's important to monitor for unusual or unauthorized use of this tool.
search: '| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time)
  as lastTime from datamodel=Endpoint.Processes where Processes.process_name=ldifde.exe
  Processes.process IN ("*-i *", "*-f *") by Processes.dest Processes.user Processes.parent_process_name
  Processes.process_name Processes.original_file_name Processes.process Processes.process_id
  Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`
  | `security_content_ctime(lastTime)` | `windows_ldifde_directory_object_behavior_filter`'
how_to_implement: The detection is based on data that originates from Endpoint Detection
  and Response (EDR) agents. These agents are designed to provide security-related
  telemetry from the endpoints where the agent is installed. To implement this search,
  you must ingest logs that contain the process GUID, process name, and parent process.
  Additionally, you must ingest complete command-line executions. These logs must
  be processed using the appropriate Splunk Technology Add-ons that are specific to
  the EDR product. The logs must also be mapped to the `Processes` node of the `Endpoint`
  data model. Use the Splunk Common Information Model (CIM) to normalize the field
  names and speed up the data modeling process.
known_false_positives: False positives may be present, filter as needed.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Ldifde/
- https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF
- https://twitter.com/0gtweet/status/1564968845726580736?s=20
- https://strontic.github.io/xcyclopedia/library/ldifde.exe-45D28FB47E9B6ACC5DCA9FDA3E790210.html
tags:
  analytic_story:
  - Volt Typhoon
  asset_type: Endpoint
  atomic_guid:
  - 22cf8cb9-adb1-4e8c-80ca-7c723dfc8784
  confidence: 50
  impact: 80
  message: An instance of $parent_process_name$ spawning $process_name$ was identified
    on endpoint $dest$ by user $user$ utilizing ldifde on a domain controller.
  mitre_attack_id:
  - T1105
  - T1069.002
  observable:
  - name: user
    type: User
    role:
    - Victim
  - name: dest
    type: Hostname
    role:
    - Victim
  - name: parent_process_name
    type: Process
    role:
    - Parent Process
  - name: process_name
    type: Process
    role:
    - Child Process
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - Processes.dest
  - Processes.user
  - Processes.parent_process_name
  - Processes.parent_process
  - Processes.original_file_name
  - Processes.process_name
  - Processes.process
  - Processes.process_id
  - Processes.parent_process_path
  - Processes.process_path
  - Processes.parent_process_id
  risk_score: 40
  security_domain: endpoint
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1069.002/AD_discovery/ldifde_windows-sysmon.log
    source: XmlWinEventLog:Microsoft-Windows-Sysmon/Operational
    sourcetype: xmlwineventlog
