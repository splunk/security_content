name: PowerShell Loading DotNET into Memory via System Reflection Assembly
id: 85bc3f30-ca28-11eb-bd21-acde48001122
version: 1
date: '2021-06-10'
author: Michael Haag, Splunk
type: TTP
datamodel: []
description: 'The following analytic utilizes PowerShell Script Block Logging (EventCode=4104)
  to identify suspicious PowerShell execution. Script Block Logging captures the command
  sent to PowerShell, the full command to be executed. Upon enabling, logs will output
  to Windows event logs. Dependent upon volume, enable no critical endpoints or all.
  \

  This analytic identifies the use of PowerShell loading .net assembly via reflection.
  This is commonly found in malicious PowerShell usage, including Empire and Cobalt
  Strike. In addition, the `load(` value may be modifed by removing `(` and it will
  identify more events to review. \

  During triage, review parallel processes using an EDR product or 4688 events. It
  will be important to understand the timeline of events around this activity. Review
  the entire logged PowerShell script block.'
search: '`powershell` EventCode=4104 Message IN ("*[system.reflection.assembly]::load(*","*[reflection.assembly]*")
  | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName
  User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`
  | `powershell_loading_dotnet_into_memory_via_system_reflection_assembly_filter`'
how_to_implement: To successfully implement this analytic, you will need to enable
  PowerShell Script Block Logging on some or all endpoints. Additional setup here
  https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.
known_false_positives: False positives should be limited as day to day scripts do
  not use this method.
references:
- https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly?view=net-5.0
- https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.
- https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63
- https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf
- https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/
tags:
  analytic_story:
  - Malicious PowerShell
  automated_detection_testing: passed
  confidence: 80
  context:
  - source:endpoint
  - stage: Defense Evasion
  dataset:
  - https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1059.001/powershell_script_block_logging/windows-powershell.log
  impact: 70
  kill_chain_phases:
  - Exploitation
  message: A suspicious powershell script contains reflective class assembly  command
    in $Message$ to load .net code in memory with EventCode $EventCode$ in host $ComputerName$
  mitre_attack_id:
  - T1059
  - T1059.001
  observable:
  - name: ComputerName
    type: Hostname
    role:
    - Victim
  - name: User
    type: User
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - Message
  - OpCode
  - ComputerName
  - User
  - EventCode
  risk_score: 56
  security_domain: endpoint
