name: Log4Shell JNDI Payload Injection Attempt
id: c184f12e-5c90-11ec-bf1f-497c9a704a72
version: 1
date: '2021-12-13'
author: Jose Hernandez
type: Anomaly
datamodel:
- Web
description: CVE-2021-44228 Log4Shell payloads can be injected via various methods,
  but on of the most common vectors injection is via Web calls. Many of the vulnerable
  java web applications that are using log4j have a web component to them are specially
  targets of this injection, specifically projects like Apache Struts, Flink, Druid,
  and Solr. The exploit is triggered by a LDAP lookup function in the log4j package,
  its invocation is similar to `${jndi:ldap://PAYLOAD_INJECTED}`, when executed against
  vulnerable web applications the invocation can be seen in various part of web logs.
  Specifically it has been successfully exploited via headers like X-Forwarded-For,
  User-Agent, Referer, and X-Api-Version. In this detection we first limit the scope
  of our search to the Web Datamodel and use the `| from datamodel` function to benefit
  from schema accelerated searching capabilities, mainly because the second part of
  the detection is pretty heavy, it runs a regex across all _raw events that looks
  for `${jndi:ldap://` pattern across all potential web fields available to the raw
  data, like http headers for example. If you see results for this detection, it means
  that there was a attempt at a injection, which could be a reconnaissance activity
  or a valid expliotation attempt, but this does not exactly mean that the host was
  indeed successfully exploited.
search: '| from datamodel Web.Web | regex _raw="[jJnNdDiI]{4}(\:|\%3A|\/|\%2F)\w+(\:\/\/|\%3A\%2F\%2F)(\$\{.*?\}(\.)?)?"
  | fillnull | stats count by action, category, dest, dest_port, http_content_type,
  http_method, http_referrer, http_user_agent, site, src, url, url_domain, user |
  `log4shell_jndi_payload_injection_attempt_filter`'
how_to_implement: This detection requires the Web datamodel to be populated from a
  supported Technology Add-On like Splunk for Apache or Splunk for Nginx.
known_false_positives: If there is a vulnerablility scannner looking for log4shells
  this will trigger, otherwise likely to have low false positives.
references:
- https://www.lunasec.io/docs/blog/log4j-zero-day/
tags:
  analytic_story:
  - Log4Shell CVE-2021-44228
  - CISA AA22-257A
  - CISA AA22-320A
  asset_type: Endpoint
  cis20:
  - CIS 3
  - CIS 5
  - CIS 16
  confidence: 30
  context:
  - Source:Application Log
  - Stage:Execution
  cve:
  - CVE-2021-44228
  dataset:
  - https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1190/log4j_proxy_logs/log4j_proxy_logs.log
  impact: 50
  kill_chain_phases:
  - Reconnaissance
  - Exploitation
  message: CVE-2021-44228 Log4Shell triggered for host $dest$
  mitre_attack_id:
  - T1190
  nist:
  - DE.CM
  observable:
  - name: user
    type: User
    role:
    - Victim
  - name: dest
    type: Hostname
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - action
  - category
  - dest
  - dest_port
  - http_content_type
  - http_method
  - http_referrer
  - http_user_agent
  - site
  - src
  - url
  - url_domain
  - user
  risk_score: 15
  security_domain: threat
  supported_tas:
  - Splunk_TA_nginx
