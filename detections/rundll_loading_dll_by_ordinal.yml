name: RunDLL Loading DLL By Ordinal
id: 6c135f8d-5e60-454e-80b7-c56eed739833
version: 3
date: '2020-07-21'
description: This search looks for DLLs under %AppData% being loaded by rundll32.exe
  that are calling the exported function at ordinal 2. Calling exported functions
  by ordinal is not as common as calling by exported name. There was a bug fixed in
  IDAPro on 2016-08-08 that would not display functions without names.  Calling functions
  by ordinal would overcome the lack of name and make it harder for analyst to reverse
  engineer.
how_to_implement: You must be ingesting data that records process activity from your
  hosts to populate the Endpoint data model in the Processes node. You must also be
  ingesting logs with both the process name and command line from your endpoints.
  The command-line arguments are mapped to the "process" field in the Endpoint data
  model.
type: ESCU
references: []
author: David Dorsey, Splunk
search: '| tstats `security_content_summariesonly` values(Processes.process) as process
  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes
  where Processes.process_name = rundll32.exe Processes.process="*AppData*" Processes.process="*,#2"
  by Processes.process_name Processes.parent_process_name Processes.dest Processes.user
  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`
  | `rundll_loading_dll_by_ordinal_filter`'
known_false_positives: While not common, loading a DLL under %AppData% and calling
  a function by ordinal is possible by a legitimate process
tags:
  analytics_story:
  - Unusual Processes
  mitre_attack_id:
  - T1218.011
  kill_chain_phases:
  - Installation
  cis20:
  - CIS 8
  nist:
  - PR.PT
  - DE.CM
  security_domain: endpoint
  asset_type: Endpoint
