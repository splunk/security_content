name: Detect Password Spray Attempts
id: 086ab581-8877-42b3-9aee-4a7ecb0923af
version: 1
date: '2023-11-01'
author: Dean Luxton
status: production
type: TTP
data_source:
- Windows Event Log Security 4625
description: This analytic employs the 3-sigma approach to detect an unusual volume of failed authentication attempts
  from a single source. A password spray attack is a type of brute force attack where an attacker tries a few
  common passwords across many different accounts to avoid detection and account lockouts. By utilizing the
  Authentication Data Model, this detection is effective for all CIM-mapped authentication events, providing
  comprehensive coverage and enhancing security against these attacks.
search: '| tstats `security_content_summariesonly` dc(Authentication.user) AS unique_accounts values(Authentication.app) as app count(Authentication.user) as total_failures from datamodel=Authentication.Authentication where Authentication.action="failure" by Authentication.src, Authentication.action, Authentication.signature_id, sourcetype, _time  span=2m
  | `drop_dm_object_name("Authentication")`
  ```fill out time buckets for 0-count events during entire search length```
  | appendpipe [| timechart limit=0 span=5m count | table _time]
  | fillnull value=0 unique_accounts, unique_src
  ``` remove duplicate & empty time buckets```
  | sort - total_failures
  | dedup _time
  ``` Create aggregation field & apply to all null events```
  | eval counter=src+"__"+sourcetype+"__"+signature_id
  | eventstats values(counter) as fnscounter | eval counter=coalesce(counter,fnscounter)
  | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by counter
  | eval upperBound=(comp_avg+comp_std*3)
  | eval isOutlier=if(unique_accounts > 30 and unique_accounts >= upperBound, 1, 0)
  | replace "::ffff:*" with * in src
  | where isOutlier=1
  | foreach * [ eval <<FIELD>> = if(<<FIELD>>="null",null(),<<FIELD>>)] 
  | table _time, src, action, app, unique_accounts, total_failures, sourcetype, signature_id
  | `detect_password_spray_attempts_filter`'
how_to_implement: Ensure in-scope authentication data is CIM mapped and the src field is populated with the source device. Also ensure fill_nullvalue is set within the macro security_content_summariesonly. 
known_false_positives: Unknown
references:
- https://attack.mitre.org/techniques/T1110/003/
tags:
  analytic_story:
  - Compromised User Account
  - Active Directory Password Spraying
  asset_type: Endpoint
  atomic_guid:
  - 90bc2e54-6c84-47a5-9439-0a2a92b4b175
  confidence: 70
  impact: 70
  message: Potential Password Spraying attack from $src$ targeting $unique_accounts$ unique accounts. 
  mitre_attack_id:
  - T1110.003
  - T1110
  observable:
  - name: src
    type: Endpoint
    role:
    - Attacker
  - name: sourcetype
    type: Other
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - Authentication.action
  - Authentication.user
  - Authentication.src
  security_domain: access
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1110.003/purplesharp_invalid_users_kerberos_xml/windows-security.log
    source: XmlWinEventLog:Security
    sourcetype: XmlWinEventLog