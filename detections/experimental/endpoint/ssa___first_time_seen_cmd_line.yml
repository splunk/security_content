name: First time seen command line argument
id: fc0edc95-ff2b-48b0-9f6f-63da3789fd23
version: 4
date: '2021-11-30'
author: Ignacio Bermudez Corrales, Splunk
type: Anomaly
datamodel:
- Endpoint_Processes
description: This search looks for command-line arguments that use a `/c` parameter
  to execute a command that has not previously been seen. This is an implementation
  on SPL2 of the rule `First time seen command line argument` by @bpatel. 'The following
  analytic identifies first time seen command-line arguments on a single endpoint.
  The analytic looks for arguments instantiated by `cmd.exe /c` and the associated
  command-line. Adversaries automate or spawn multiple processes using this method,
  this analytic may assist with identifying the first time it's been found on this
  endpoint.'
search: '| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event,
  "_time"), "string", null)) | eval dest_user_id=ucast(map_get(input_event, "dest_user_id"),
  "string", null), dest_device_id=ucast(map_get(input_event, "dest_device_id"), "string",
  null), process_name=ucast(map_get(input_event, "process_name"), "string", null),
  cmd_line=ucast(map_get(input_event, "process"), "string", null), cmd_line_norm=lower(cmd_line),
  cmd_line_norm=replace(cmd_line_norm, /[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/,
  "GUID"), cmd_line_norm=replace(cmd_line_norm, /(?<=\s)+\\[^:]*(?=\\.*\.\w{3}(\s|$)+)/,
  "\\PATH"), /* replaces " \\Something\\Something\\command.ext" => "PATH\\command.ext"
  */ cmd_line_norm=replace(cmd_line_norm, /\w:\\[^:]*(?=\\.*\.\w{3}(\s|$)+)/, "\\PATH"),
  /* replaces "C:\\Something\\Something\\command.ext" => "PATH\\command.ext" */ cmd_line_norm=replace(cmd_line_norm,
  /\d+/, "N"), event_id=ucast(map_get(input_event, "event_id"), "string", null) |
  where process_name="cmd.exe" AND match_regex(ucast(cmd_line, "string", ""), /.*
  \/[cC] .*/)=true | select process_name, cmd_line, cmd_line_norm, timestamp, dest_device_id,
  dest_user_id | first_time_event input_columns=["cmd_line_norm"] | where first_time_cmd_line_norm
  | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id,
  dest_user_id), body=create_map(["event_id", event_id, "cmd_line", cmd_line, "process_name",
  process_name]) | into write_ssa_detected_events();'
how_to_implement: To successfully implement this search, you need to be ingesting
  logs with the process name, parent process, and command-line executions from your
  endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the
  Sysmon TA.
known_false_positives: Legitimate programs use command-line arguments to execute.
  Verify the command-line arguments to check what command/program is being executed.
  Filtering will be needed.
references: []
tags:
  analytic_story:
  - Unusual Processes
  cis20:
  - CIS 3
  - CIS 8
  confidence: 60
  context:
  - source:endpoint
  - stage: Defense Evasion
  impact: 50
  kill_chain_phases:
  - Command and Control
  - Actions on Objectives
  message: A process $process_name$ ha been identified in the environment with a command-line
    $cmd_line$ not previously seen before on host $dest_device_id$
  mitre_attack_id:
  - T1059
  - T1202
  nist:
  - PR.PT
  - DE.CM
  - PR.IP
  observable:
  - name: dest_device_id
    type: Hostname
    role:
    - Victim
  - name: dest_user_id
    type: user
    role:
    - Victim
  product:
  - Splunk Behavioral Analytics
  required_fields:
  - process_name
  - _time
  - dest_device_id
  - dest_user_id
  - process
  - cmd_line
  risk_score: 30
  risk_severity: low
  security_domain: endpoint
