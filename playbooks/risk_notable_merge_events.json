{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Risk Notable",
    "coa": {
        "data": {
            "description": "This playbook finds related events based on key fields in a Risk Notable and allows the user to process the results and decide which events to merge into the current investigation.\t",
            "edges": [
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_8_to_port_10",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 2
                        }
                    ],
                    "id": "port_8_to_port_11",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_12_to_port_15",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_15_to_port_17",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 2
                        }
                    ],
                    "id": "port_15_to_port_19",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_19_to_port_20",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_18",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_16_to_port_22",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_14",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_23_to_port_24",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_24_to_port_26",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "26",
                    "targetPort": "26_in"
                },
                {
                    "id": "port_26_to_port_25",
                    "sourceNode": "26",
                    "sourcePort": "26_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_4_to_port_6",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_9_to_port_12",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_17_to_port_31",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_31_to_port_29",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_29_to_port_30",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_29_to_port_32",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_32_to_port_1",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_30_to_port_1",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_18_to_port_1",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_21_to_port_1",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_33_to_port_34",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_33_to_port_35",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "35",
                    "targetPort": "35_in"
                },
                {
                    "id": "port_23_to_port_36",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_36_to_port_33",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "33",
                    "targetPort": "33_in"
                },
                {
                    "id": "port_34_to_port_1",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_35_to_port_1",
                    "sourceNode": "35",
                    "sourcePort": "35_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_14_to_port_37",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "37",
                    "targetPort": "37_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_37_to_port_23",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_37_to_port_36",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_0_to_port_38",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "id": "port_38_to_port_39",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "39",
                    "targetPort": "39_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_39_to_port_4",
                    "sourceNode": "39",
                    "sourcePort": "39_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                }
            ],
            "hash": "79e220c893f1e954c7aa0908ef497492be64f168",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 279.9999999999996
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 740,
                    "y": 2660
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 1",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 4,
                        "functionName": "workbook_task_update_1",
                        "id": "10",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "No Related Events Found",
                                "note_title": "[Auto-Generated] Find Related Events Summary",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "type": "utility",
                    "x": 980,
                    "y": 1140
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "add note 1",
                            "customNameId": 0,
                            "description": "Add a generic note letting the user know that no related events were found.",
                            "join": [],
                            "note": "Add a generic note letting the user know that no related events were found."
                        },
                        "functionId": 5,
                        "functionName": "add_note_1",
                        "id": "11",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "No Related Events Found",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "[Auto-Generated] Find Related Events Summary"
                            }
                        }
                    },
                    "errors": {},
                    "id": "11",
                    "type": "utility",
                    "x": 1320,
                    "y": 1080
                },
                "12": {
                    "customCode": "def related_events(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"related_events() called\")\n\n    ################################################################################\n    # Prompt the user with a list of related events and allow them to select the merge \n    # option.\n    ################################################################################\n\n    # set user and message variables for phantom.prompt call\n\n    user = json.loads(phantom.get_run_data(key='get_effective_user:username'))\n    message = \"\"\"Please review related events in the table below and then select an option.\\n\\n{0}\\n\\n### The merge process will:\\n\\n- Mark the current event as the parent case. If the Risk Notable workbook is present it will be added, otherwise, it will add the system default workbook.\\n- Copy events, artifacts, and notes to the parent case.\\n- Close the related events with a link to the parent case.\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"format_prompt:formatted_data\"\n    ]\n\n    # responses\n    response_types = [\n        {\n            \"prompt\": \"Merge Response\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Merge All\",\n                    \"Merge Individually\",\n                    \"Do Nothing\"\n                ],\n            },\n        }\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"related_events\", parameters=parameters, response_types=response_types, callback=decision_2)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "related events",
                            "customNameId": 0,
                            "description": "Prompt the user with a list of related events and allow them to select the merge option.",
                            "join": [],
                            "note": "Prompt the user with a list of related events and allow them to select the merge option."
                        },
                        "approver": "admin",
                        "functionId": 1,
                        "functionName": "related_events",
                        "id": "12",
                        "message": "Please review related events in the table below and then select an option.\n\n{0}\n\n### The merge process will:\n\n- Mark the current event as the parent case. If the Risk Notable workbook is present it will be added, otherwise, it will add the system default workbook.\n- Copy events, artifacts, and notes to the parent case.\n- Close the related events with a link to the parent case.",
                        "parameters": [
                            "format_prompt:formatted_data"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Merge All",
                                    "Merge Individually",
                                    "Do Nothing"
                                ],
                                "responsePrompt": "Merge Response",
                                "responseType": "customList"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "prompt",
                    "x": 700,
                    "y": 1220
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "process responses",
                            "customNameId": 0,
                            "description": "Produces an output list of containers that the user decided to merge.",
                            "join": [],
                            "note": "Produces an output list of containers that the user decided to merge."
                        },
                        "functionId": 1,
                        "functionName": "process_responses",
                        "id": "14",
                        "inputParameters": [
                            "event_details:action_result.summary.responses"
                        ],
                        "outputVariables": [
                            "container_list",
                            "should_merge"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "code",
                    "userCode": "    \n    process_responses__should_merge = \"false\"\n    responses = event_details_summary_responses[0]\n    # Grab run_key and convert to list\n    container_list = json.loads(phantom.get_run_data(key='container_list'))\n    if 'Merge Into Case' in responses:\n        process_responses__container_list = []\n        for container_id, response in zip(container_list, responses):\n            if response.lower() == 'merge into case':\n                process_responses__container_list.append(container_id)\n                process_responses__should_merge = \"true\"\n\n",
                    "x": 740,
                    "y": 1760
                },
                "15": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "related_events:action_result.summary.responses.0",
                                        "value": "Merge All"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "merge all",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "related_events:action_result.summary.responses.0",
                                        "value": "Merge Individually"
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "merge individually",
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 2,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 2,
                                "customName": "do nothing",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "15",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "decision",
                    "x": 700,
                    "y": 1360
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "custom format",
                            "customNameId": 0,
                            "description": "Produce a custom format that calculates how many related indicators there are per container. This is used to truncate the output if it's over the specified amount.",
                            "join": [],
                            "note": "Produce a custom format that calculates how many related indicators there are per container. This is used to truncate the output if it's over the specified amount."
                        },
                        "functionId": 2,
                        "functionName": "custom_format",
                        "id": "16",
                        "inputParameters": [
                            "find_related_events:custom_function_result.data.*.container_id",
                            "find_related_events:custom_function_result.data.*.indicator_ids",
                            "find_related_events:custom_function_result.data.*.container_name"
                        ],
                        "outputVariables": [
                            "output"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "code",
                    "userCode": "\n    # Define base format - customize as needed\n    custom_format__output = \"\"\"Please review the following events and their associated indicators. Consider merging the related events into the current investigation.\n    \nThe merge process will:\n - Mark the current event as the parent case. If no workbook has been added, it will use the default workbook.\n - Copy events, artifacts, and notes to the parent case.\n - Close the related events with a link to the parent case.\n \n \"\"\"\n    \n    # Build phantom url for use later \n    base_url = phantom.get_base_url()\n    url = phantom.build_phantom_rest_url('indicator')\n    \n    # Iterate through all inputs and append to base format\n    for item1,item2,item3 in zip(find_related_events_data___container_id,find_related_events_data___indicator_ids,find_related_events_data___container_name):\n        custom_format__output += \"#### [Event {0}: {1}]({2}/mission/{0}/summary/evidence)\\n\\n\".format(item1, item3, base_url)\n        custom_format__output += \"| Field Names | Values |\\n\"\n        custom_format__output += \"| --- | --- |\\n\"\n        \n        indicator_dict = {}\n\n        # Find_related_containers only returns an indicator id, this converts the indicator id to an actual value\n        # Only iterate through 10 indicators for easier readability\n        for indicator in item2[0:10]:\n            response = phantom.requests.get(uri = url + \"/{}?_special_fields=true\".format(indicator), verify=False).json()              \n            value = response['value']\n            fields = response.get('_special_fields')\n            \n            # Remove null items and join\n            if isinstance(fields, list):\n                fields = [item for item in fields if item]\n                fields = sorted(fields)\n                fields = \", \".join(fields)\n                \n            indicator_dict[value] = fields\n            \n        # sort dictionary alphabetically by value\n        for k,v in sorted(indicator_dict.items(), key = lambda kv:(kv[1], kv[0])):\n            if len(k) > 250:\n                custom_format__output += \"| {0} | ```{1}``` ***...truncated...*** | \\n\".format(v, k[:250])\n            else:\n                custom_format__output += \"| {0} | ```{1}``` | \\n\".format(v, k)\n            \n        # If there were more than 10 indicators, add a note at the end letting the analyst know they can find more by following the event link    \n        if len(item2) > 10:\n            custom_format__output += \"- ***+{0} additional related artifacts***\".format(len(item2) - 10)\n            \n        custom_format__output += \"\\n---\\n\\n\"\n\n",
                    "x": 740,
                    "y": 1520
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "merge all",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_merge",
                            "repoName": "community"
                        },
                        "functionId": 7,
                        "functionName": "merge_all",
                        "id": "17",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_merge": {
                                "description": "An alternative to the add-to-case API call. This function will copy all artifacts, automation, notes and comments over from every container within the container_list into the target_container. The target_container will be upgraded to a case.\n\nThe notes will be copied over with references to the child containers from where they came. A note will be left in the child containers with a link to the target container. The child containers will be marked as evidence within the target container. \n\nAny notes left as a consequence of the merge process will be skipped in subsequent merges.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The target container to copy the information over. Supports container dictionary or container id.",
                                        "inputType": "item",
                                        "label": "target_container",
                                        "name": "target_container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A list of container IDs to copy into the target container.",
                                        "inputType": "list",
                                        "label": "container_list",
                                        "name": "container_list",
                                        "placeholder": "[1, 5, 10]",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Name or ID of the workbook to add if the container does not have a workbook yet. If no workbook is provided, the system default workbook will be added.",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "My Workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "True or False to close the child containers in the container_list after merge. Defaults to False.",
                                        "inputType": "item",
                                        "label": "close_containers",
                                        "name": "close_containers",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_merge",
                                "name": "container_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_merge": {
                                "close_containers": "True",
                                "container_list": "find_related_events:custom_function_result.data.*.container_id",
                                "target_container": "container:id",
                                "workbook": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "17",
                    "type": "utility",
                    "x": 340,
                    "y": 1520
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 2",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 8,
                        "functionName": "workbook_task_update_2",
                        "id": "18",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "format_end_note:formatted_data",
                                "note_title": "[Auto-Generated] Find Related Events Summary",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "18",
                    "type": "utility",
                    "x": 1020,
                    "y": 1780
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "format end note",
                            "customNameId": 0,
                            "description": "Format a note with the information the user decided to not act upon.",
                            "join": [],
                            "note": "Format a note with the information the user decided to not act upon."
                        },
                        "functionId": 2,
                        "functionName": "format_end_note",
                        "id": "19",
                        "parameters": [
                            "format_prompt_1:formatted_data"
                        ],
                        "template": "User opted to not merge.\n\nPrevious results of find related events below.\n\n{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "format",
                    "x": 1180,
                    "y": 1520
                },
                "20": {
                    "data": {
                        "advanced": {
                            "customName": "workbook decision 2",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "workbook_list:custom_function_result.data.*.name",
                                        "value": "Risk Investigation"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "update workbook",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "leave note",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "workbook_decision_2",
                        "id": "20",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "decision",
                    "x": 1260,
                    "y": 1640
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "add note 2",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 9,
                        "functionName": "add_note_2",
                        "id": "21",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_end_note:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "[Auto-Generated] Find Related Events Summary"
                            }
                        }
                    },
                    "errors": {},
                    "id": "21",
                    "type": "utility",
                    "x": 1320,
                    "y": 1780
                },
                "22": {
                    "customCode": "def event_details(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"event_details() called\")\n\n    ################################################################################\n    # A dynamic prompt to list out details for each container so that the user can \n    # decide which to merge.\n    ################################################################################\n\n    # set user and message variables for phantom.prompt call\n    effective_user_id = phantom.get_effective_user()\n    url = phantom.build_phantom_rest_url('ph_user', effective_user_id)\n    response = phantom.requests.get(url, verify=False).json()\n    user = response.get('username')\n    message = \"\"\"{0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"custom_format:custom_function:output\",\n    ]\n    \n    # fetch data for dynamic response\n    container_data = phantom.collect2(container=container, datapath=['find_related_events:custom_function_result.data.*.container_id', 'find_related_events:custom_function_result.data.*.container_name'], action_results=results)\n    container_id_list = [item[0] for item in container_data]\n    container_name_list = [item[1] for item in container_data]\n    \n    #Dynamic Responses:\n    response_types = []\n    for container_id, container_name in zip(container_id_list, container_name_list):\n        response_types.append({\n                \"prompt\": \"Event {0}: {1}\".format(container_id, container_name),\n                \"options\": {\n                    \"type\": \"list\",\n                    \"choices\": [\n                        \"Merge Into Case\",\n                        \"Ignore\",\n                    ]\n                },\n            })\n        \n    phantom.save_run_data(value=json.dumps(container_id_list), key=\"container_list\", auto=True)\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"event_details\", parameters=parameters, response_types=response_types, callback=process_responses)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "event details",
                            "customNameId": 0,
                            "description": "A dynamic prompt to list out details for each container so that the user can decide which to merge.",
                            "join": [],
                            "note": "A dynamic prompt to list out details for each container so that the user can decide which to merge."
                        },
                        "approver": "admin",
                        "functionId": 2,
                        "functionName": "event_details",
                        "id": "22",
                        "message": "{0}\n",
                        "parameters": [
                            "custom_format:custom_function:output"
                        ],
                        "responseTime": 30,
                        "responses": [],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "prompt",
                    "x": 820,
                    "y": 1640
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "merge selected",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_merge",
                            "repoName": "community"
                        },
                        "functionId": 10,
                        "functionName": "merge_selected",
                        "id": "23",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_merge": {
                                "description": "An alternative to the add-to-case API call. This function will copy all artifacts, automation, notes and comments over from every container within the container_list into the target_container. The target_container will be upgraded to a case.\n\nThe notes will be copied over with references to the child containers from where they came. A note will be left in the child containers with a link to the target container. The child containers will be marked as evidence within the target container. \n\nAny notes left as a consequence of the merge process will be skipped in subsequent merges.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The target container to copy the information over. Supports container dictionary or container id.",
                                        "inputType": "item",
                                        "label": "target_container",
                                        "name": "target_container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A list of container IDs to copy into the target container.",
                                        "inputType": "list",
                                        "label": "container_list",
                                        "name": "container_list",
                                        "placeholder": "[1, 5, 10]",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Name or ID of the workbook to add if the container does not have a workbook yet. If no workbook is provided, the system default workbook will be added.",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "My Workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "True or False to close the child containers in the container_list after merge. Defaults to False.",
                                        "inputType": "item",
                                        "label": "close_containers",
                                        "name": "close_containers",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_merge",
                                "name": "container_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_merge": {
                                "close_containers": "True",
                                "container_list": "process_responses:custom_function:container_list",
                                "target_container": "container:id",
                                "workbook": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "23",
                    "type": "utility",
                    "x": 740,
                    "y": 2020
                },
                "24": {
                    "data": {
                        "advanced": {
                            "customName": "event id filter",
                            "customNameId": 0,
                            "description": "Produce a list of event ids to update in Splunk ES.",
                            "join": [],
                            "notRequiredJoins": [
                                "merge_all",
                                "merge_selected"
                            ],
                            "note": "Produce a list of event ids to update in Splunk ES.",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.event_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "filter event ids",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "event_id_filter",
                        "id": "24",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "filter",
                    "x": 980,
                    "y": 2120
                },
                "25": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "update event",
                            "customNameId": 0,
                            "description": "Update all notables with a link back to the parent case.",
                            "join": [],
                            "notRequiredJoins": [
                                "merge_all",
                                "merge_selected"
                            ],
                            "note": "Update all notables with a link back to the parent case.",
                            "scope": "all"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": 167,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_event",
                        "id": "25",
                        "parameters": {
                            "comment": "es_format:formatted_data",
                            "event_ids": "filtered-data:event_id_filter:condition_1:artifact:*.cef.event_id"
                        },
                        "requiredParameters": [
                            "event_ids"
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "action",
                    "x": 920,
                    "y": 2380
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "es format",
                            "customNameId": 0,
                            "description": "Format a note with a link to the parent case.",
                            "join": [],
                            "notRequiredJoins": [
                                "merge_all",
                                "merge_selected"
                            ],
                            "note": "Format a note with a link to the parent case.",
                            "scope": "all"
                        },
                        "functionId": 3,
                        "functionName": "es_format",
                        "id": "26",
                        "parameters": [
                            "container:id",
                            "container:name",
                            "container:url"
                        ],
                        "template": "Case created: {0}\n\nName: {1}\n\nURL: {2}/summary",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "26",
                    "type": "format",
                    "x": 920,
                    "y": 2260
                },
                "29": {
                    "data": {
                        "advanced": {
                            "customName": "workbook decision 3",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "workbook_list:custom_function_result.data.*.name",
                                        "value": "Risk Investigation"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "update workbook",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "leave note",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "workbook_decision_3",
                        "id": "29",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "decision",
                    "x": 420,
                    "y": 1740
                },
                "30": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 3",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "workbook_task_update_3",
                        "id": "30",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "merge_all_format:formatted_data",
                                "note_title": "[Auto-Generated] Related Events Merged",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "30",
                    "type": "utility",
                    "x": 200,
                    "y": 1880
                },
                "31": {
                    "data": {
                        "advanced": {
                            "customName": "merge all format",
                            "customNameId": 0,
                            "description": "Format a note with a list of all events merged.",
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "merge_all_format",
                        "id": "31",
                        "parameters": [
                            "container:id",
                            "container:name",
                            "find_related_events:custom_function_result.data.*.container_id"
                        ],
                        "template": "Result of merge process:\n\nContainers merged into case {0} - {1}:\n%%\n- {2}\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "format",
                    "x": 340,
                    "y": 1620
                },
                "32": {
                    "data": {
                        "advanced": {
                            "customName": "add note 3",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 11,
                        "functionName": "add_note_3",
                        "id": "32",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "merge_all_format:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "[Auto-Generated] Related Events Merged"
                            }
                        }
                    },
                    "errors": {},
                    "id": "32",
                    "type": "utility",
                    "x": 460,
                    "y": 1880
                },
                "33": {
                    "data": {
                        "advanced": {
                            "customName": "workbook decision 4",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "workbook_list:custom_function_result.data.*.name",
                                        "value": "Risk Investigation"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "update workbook",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "leave note",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "workbook_decision_4",
                        "id": "33",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "33",
                    "type": "decision",
                    "x": 720,
                    "y": 2300
                },
                "34": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 4",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 13,
                        "functionName": "workbook_task_update_4",
                        "id": "34",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "merge_individual_format:formatted_data",
                                "note_title": "[Auto-Generated] Related Events Merged",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "34",
                    "type": "utility",
                    "x": 460,
                    "y": 2500
                },
                "35": {
                    "data": {
                        "advanced": {
                            "customName": "add note 4",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 14,
                        "functionName": "add_note_4",
                        "id": "35",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "merge_individual_format:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "[Auto-Generated] Related Events Merged"
                            }
                        }
                    },
                    "errors": {},
                    "id": "35",
                    "type": "utility",
                    "x": 800,
                    "y": 2500
                },
                "36": {
                    "data": {
                        "advanced": {
                            "customName": "merge individual format",
                            "customNameId": 0,
                            "description": "Format a note that shows the result of the merge process.",
                            "join": [],
                            "note": "Format a note that shows the result of the merge process."
                        },
                        "functionId": 5,
                        "functionName": "merge_individual_format",
                        "id": "36",
                        "parameters": [
                            "container:id",
                            "container:name",
                            "process_responses:custom_function:container_list"
                        ],
                        "template": "Result of merge process:\n\nContainers merged into case {0} - {1}:\n%%\n- {2}\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "format",
                    "userCode": "\n    # Write your custom code here...\n\n",
                    "x": 640,
                    "y": 2140
                },
                "37": {
                    "data": {
                        "advanced": {
                            "customName": "merge any decision",
                            "customNameId": 0,
                            "description": "Determine if the user opted to merge at least 1 of the events.",
                            "join": [],
                            "note": "Determine if the user opted to merge at least 1 of the events."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "process_responses:custom_function:should_merge",
                                        "value": "true"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "merge",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "none merged",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "merge_any_decision",
                        "id": "37",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "37",
                    "type": "decision",
                    "x": 820,
                    "y": 1880
                },
                "38": {
                    "data": {
                        "advanced": {
                            "customName": "get effective user",
                            "customNameId": 0,
                            "description": "Determine which user launched this playbook.",
                            "join": [],
                            "note": "Determine which user launched this playbook."
                        },
                        "functionId": 3,
                        "functionName": "get_effective_user",
                        "id": "38",
                        "inputParameters": [],
                        "outputVariables": [
                            "username",
                            "user_type"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "38",
                    "type": "code",
                    "userCode": "\n    effective_user_id = phantom.get_effective_user()\n    url = phantom.build_phantom_rest_url('ph_user', effective_user_id)\n    response_json = phantom.requests.get(url, verify=False).json()\n\n    get_effective_user__username = response_json['username']\n    get_effective_user__user_type = response_json['type']\n\n",
                    "x": 980,
                    "y": 380
                },
                "39": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_effective_user:custom_function:user_type",
                                        "value": "automation"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "normal user",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "decision_7",
                        "id": "39",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "39",
                    "type": "decision",
                    "x": 1060,
                    "y": 500
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "workbook list",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_list",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "workbook_list",
                        "id": "4",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_list": {
                                "description": "Return a list of all the workbooks on this Phantom instance. This might be useful to display possible options for workbooks to add to this event.",
                                "fields": [],
                                "label": "workbook_list",
                                "name": "workbook_list"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_list": {}
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "type": "utility",
                    "x": 980,
                    "y": 660
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "combine related fields",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_merge",
                            "repoName": "community"
                        },
                        "functionId": 2,
                        "functionName": "combine_related_fields",
                        "id": "6",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_merge": {
                                "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_1",
                                        "name": "input_1",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_2",
                                        "name": "input_2",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_3",
                                        "name": "input_3",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_4",
                                        "name": "input_4",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_5",
                                        "name": "input_5",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_6",
                                        "name": "input_6",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_7",
                                        "name": "input_7",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_8",
                                        "name": "input_8",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_9",
                                        "name": "input_9",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_10",
                                        "name": "input_10",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_merge",
                                "name": "list_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_merge": {
                                "input_1": "artifact:*.cef.risk_object",
                                "input_10": null,
                                "input_2": "artifact:*.cef.threat_object",
                                "input_3": "artifact:*.cef.description",
                                "input_4": null,
                                "input_5": null,
                                "input_6": null,
                                "input_7": null,
                                "input_8": null,
                                "input_9": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "6",
                    "type": "utility",
                    "x": 980,
                    "y": 760
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "find related events",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "find_related_containers",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "find_related_events",
                        "id": "7",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "find_related_containers": {
                                "description": "Takes a provided list of indicator values to search for and finds all related containers. It will produce a list of the related container details.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "An indicator value to search on, such as a file hash or IP address. To search on all indicator values in the container, use \"*\".",
                                        "inputType": "list",
                                        "label": "value_list",
                                        "name": "value_list",
                                        "placeholder": "*",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The minimum number of similar indicator records that a container must have to be considered \"related.\"  If no match count provided, this will default to 1.",
                                        "inputType": "item",
                                        "label": "minimum_match_count",
                                        "name": "minimum_match_count",
                                        "placeholder": "1-100",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The container to run indicator analysis against. Supports container object or container_id. This container will also be excluded from the results for related_containers.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional modifier to only consider related containers within a time window. Default is -30d.  Supports year (y), month (m), day (d), hour (h), or minute (m)  Custom function will always set the earliest container window based on the input container \"create_time\".",
                                        "inputType": "item",
                                        "label": "earliest_time",
                                        "name": "earliest_time",
                                        "placeholder": "-30d",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional comma-separated list of statuses to filter on. Only containers that have statuses matching an item in this list will be included.",
                                        "inputType": "item",
                                        "label": "filter_status",
                                        "name": "filter_status",
                                        "placeholder": "open",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional comma-separated list of labels to filter on. Only containers that have labels matching an item in this list will be included.",
                                        "inputType": "item",
                                        "label": "filter_label",
                                        "name": "filter_label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional comma-separated list of severities to filter on. Only containers that have severities matching an item in this list will be included.",
                                        "inputType": "item",
                                        "label": "filter_severity",
                                        "name": "filter_severity",
                                        "placeholder": "medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to filter containers that are in a case or not. Defaults to True (drop containers that are already in a case).",
                                        "inputType": "item",
                                        "label": "filter_in_case",
                                        "name": "filter_in_case",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "find_related_containers",
                                "name": "find_related_containers"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "find_related_containers": {
                                "container": "container:id",
                                "earliest_time": "-30d",
                                "filter_in_case": null,
                                "filter_label": null,
                                "filter_severity": null,
                                "filter_status": null,
                                "minimum_match_count": "3",
                                "value_list": "combine_related_fields:custom_function_result.data.*.item"
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "type": "utility",
                    "x": 980,
                    "y": 860
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "related events decision",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "find_related_events:custom_function_result.data.*.container_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "related events found",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "find_related_events:custom_function_result.data.*.container_id",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "workbook_list:custom_function_result.data.*.name",
                                        "value": "Risk Investigation"
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no events and update workbook",
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 2,
                                        "op": "==",
                                        "param": "find_related_events:custom_function_result.data.*.container_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 2,
                                "customName": "no events and leave note",
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "related_events_decision",
                        "id": "8",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "decision",
                    "x": 1060,
                    "y": 960
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "format prompt",
                            "customNameId": 0,
                            "description": "Format a prompt with a high-level list of related events",
                            "join": [],
                            "note": "Format a prompt with a high-level list of related events"
                        },
                        "functionId": 1,
                        "functionName": "format_prompt",
                        "id": "9",
                        "parameters": [
                            "find_related_events:custom_function_result.data.*.container_id",
                            "find_related_events:custom_function_result.data.*.container_name",
                            "find_related_events:custom_function_result.data.*.container_indicator_match_count",
                            "find_related_events:custom_function_result.data.*.container_status",
                            "find_related_events:custom_function_result.data.*.container_type",
                            "find_related_events:custom_function_result.data.*.in_case",
                            "find_related_events:custom_function_result.data.*.container_url"
                        ],
                        "template": "| Event ID | Name | # of Matches | Event Status | In Case | \n| ---: | :--- |  :---: | :---: | :---: | \n%%\n| [{0}]({6}) | `{1}` | {2} | {3}:{4} | {5} | \n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "format",
                    "x": 620,
                    "y": 1080
                }
            },
            "notes": "For detailed implementation see https://docs.splunk.com/Documentation/ESSOC/latest/user/Useplaybookpack"
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.3",
        "version": "5.0.1.66250"
    },
    "create_time": "2021-10-19T20:23:28.780241+00:00",
    "draft_mode": false,
    "labels": [
        "risk_notable"
    ],
    "tags": []
}